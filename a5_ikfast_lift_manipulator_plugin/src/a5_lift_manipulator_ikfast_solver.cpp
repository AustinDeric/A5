/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-04-14 17:25:39.713042
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51;
x0=IKcos(j[1]);
x1=IKcos(j[2]);
x2=IKcos(j[3]);
x3=IKsin(j[2]);
x4=IKsin(j[3]);
x5=IKcos(j[4]);
x6=IKsin(j[1]);
x7=IKsin(j[4]);
x8=IKcos(j[6]);
x9=IKsin(j[6]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((2.1)*x6);
x13=((1.0)*x5);
x14=((0.225)*x3);
x15=((1.0)*x7);
x16=((0.225)*x7);
x17=((0.25)*x1);
x18=((0.25)*x2);
x19=((1.0)*x11);
x20=((1.0)*x1);
x21=((2.1)*x3);
x22=(x1*x2);
x23=(x11*x5);
x24=(x0*x4);
x25=(x0*x3);
x26=(x4*x6);
x27=(x3*x4);
x28=(x3*x6);
x29=(x1*x4);
x30=(x0*x15);
x31=((1.0)*x27);
x32=((1.0)*x26);
x33=((1.0)*x2*x3);
x34=((((-1.0)*x31))+x22);
x35=((((-1.0)*x33))+(((-1.0)*x20*x4)));
x36=(x34*x7);
x37=(x10*x34);
x38=(((x0*x22))+(((-1.0)*x24*x3)));
x39=(((x1*x24))+((x2*x25)));
x40=(((x22*x6))+(((-1.0)*x3*x32)));
x41=(((x1*x26))+((x2*x28)));
x42=(x11*x35);
x43=(x11*x38);
x44=(x39*x5);
x45=(x41*x5);
x46=(x44+((x6*x7)));
x47=((((-1.0)*x30))+x45);
x48=(x10*x46);
x49=(x10*x47);
x50=(((x0*x13))+((x15*(((((1.0)*x2*x28))+((x20*x26)))))));
x51=(((x15*(((((1.0)*x2*x25))+((x20*x24))))))+(((-1.0)*x13*x6)));
eerot[0]=(((x8*(((((-1.0)*x48))+(((-1.0)*x19*x38))))))+((x51*x9)));
eerot[1]=(((x51*x8))+((x9*((x48+x43)))));
eerot[2]=(((x10*x38))+((x11*(((((-1.0)*x15*x6))+(((-1.0)*x13*x39)))))));
IkReal x52=(x0*x22);
IkReal x53=((1.0)*x24);
eetrans[0]=((2.94198729810778)+((x18*x25))+(((2.1)*x52))+((x10*(((((-1.0)*x14*x53))+(((0.225)*x52))))))+(((0.74)*x0))+(((1.15)*x25))+((x17*x24))+(((-1.0)*x21*x53))+(((-0.866025403784439)*j[0]))+((x11*(((((-1.0)*x16*x6))+(((-0.225)*x44)))))));
eerot[3]=(((x50*x9))+((x8*(((((-1.0)*x49))+(((-1.0)*x19*x40)))))));
eerot[4]=(((x50*x8))+((x9*((((x11*x40))+x49)))));
eerot[5]=(((x10*x40))+((x11*((x30+(((-1.0)*x13*x41)))))));
eetrans[1]=(((x18*x28))+(((-1.0)*x12*x27))+(((0.74)*x6))+(((1.15)*x28))+((x17*x26))+((x11*((((x0*x16))+(((-0.225)*x45))))))+((x12*x22))+((x10*(((((-1.0)*x14*x26))+(((0.225)*x22*x6)))))));
eerot[6]=(((x8*(((((-1.0)*x19*x35))+(((-1.0)*x13*x37))))))+((x36*x9)));
eerot[7]=(((x9*((x42+((x37*x5))))))+((x36*x8)));
eerot[8]=(((x10*x35))+((x23*(((((-1.0)*x2*x20))+x31)))));
IkReal x54=((1.0)*x2);
eetrans[2]=((0.774519052838329)+(((-2.1)*x29))+(((1.15)*x1))+(((-0.25)*x27))+((x23*((((x14*x4))+(((-0.225)*x22))))))+(((-1.0)*x21*x54))+((x17*x2))+(((0.5)*j[0]))+((x10*(((((-1.0)*x14*x54))+(((-0.225)*x29)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,j9,cj9,sj9,htj9,j9mul,j3,cj3,sj3,htj3,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8,_ij9[2], _nj9,_ij3[2], _nj3;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1;  _ij3[0] = -1; _ij3[1] = -1; _nj3 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j3=pfree[0]; cj3=cos(pfree[0]); sj3=sin(pfree[0]), htj3=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r00);
new_r01=((-1.0)*r01);
new_r02=r02;
new_px=((-2.94198729810778)+(((-0.225)*r02))+(((0.866025403784439)*j3))+px);
new_r10=((-1.0)*r10);
new_r11=((-1.0)*r11);
new_r12=r12;
new_py=((((-0.225)*r12))+py);
new_r20=((-1.0)*r20);
new_r21=((-1.0)*r21);
new_r22=r22;
new_pz=((-0.324519052838329)+(((-0.5)*j3))+(((-0.225)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x55=((1.0)*px);
IkReal x56=((1.0)*pz);
IkReal x57=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x57))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x56)));
rxp0_2=((((-1.0)*r10*x55))+((py*r00)));
rxp1_0=((((-1.0)*r21*x57))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x56)));
rxp1_2=((((-1.0)*r11*x55))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x57)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x56)));
rxp2_2=((((-1.0)*r12*x55))+((py*r02)));
{
IkReal j4eval[1];
j4eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4, j5, j6]

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x59 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x59.valid){
continue;
}
IkReal x58=x59.value;
j4array[0]=((-1.0)*x58);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x58)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( (((1.03716905682941)+(((-0.205587634408891)*pp))+(((0.304269698925159)*cj4*px))+(((0.304269698925159)*py*sj4))+(((0.185028870968002)*pz)))) < -1-IKFAST_SINCOS_THRESH || (((1.03716905682941)+(((-0.205587634408891)*pp))+(((0.304269698925159)*cj4*px))+(((0.304269698925159)*py*sj4))+(((0.185028870968002)*pz)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x60=IKasin(((1.03716905682941)+(((-0.205587634408891)*pp))+(((0.304269698925159)*cj4*px))+(((0.304269698925159)*py*sj4))+(((0.185028870968002)*pz))));
j6array[0]=((-3.02310269443166)+(((-1.0)*x60)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((0.118489959158138)+x60);
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j5eval[2];
j5eval[0]=((-10.0782608695652)+(((8.4)*sj6))+(((-1.0)*cj6)));
j5eval[1]=IKsign(((-5.795)+(((4.83)*sj6))+(((-0.575)*cj6))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x61=(py*sj4);
IkReal x62=((0.25)*sj6);
IkReal x63=(cj6*pz);
IkReal x64=(cj4*px);
IkReal x65=(pz*sj6);
IkReal x66=((8.4)*cj6);
IkReal x67=((2.1)*cj6);
j5eval[0]=((2.07)+((sj6*x64))+((sj6*x61))+((x61*x66))+(((8.4)*x65))+(((-4.6)*pz))+(((-4.52)*sj6))+(((-5.766)*cj6))+((x64*x66))+(((-1.0)*x63)));
j5eval[1]=IKsign(((0.5175)+(((2.1)*x65))+((x62*x64))+((x61*x62))+((x61*x67))+(((-1.15)*pz))+(((-0.25)*x63))+(((-1.4415)*cj6))+(((-1.13)*sj6))+((x64*x67))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x68=(pz*sj6);
IkReal x69=(cj4*px);
IkReal x70=((2.1)*sj6);
IkReal x71=((8.4)*sj6);
IkReal x72=(py*sj4);
IkReal x73=((0.25)*cj6);
IkReal x74=(cj6*pz);
j5eval[0]=((-3.404)+(((5.766)*sj6))+(((-4.52)*cj6))+x68+((cj6*x72))+(((-1.0)*x71*x72))+(((4.6)*x69))+(((8.4)*x74))+(((-1.0)*x69*x71))+((cj6*x69))+(((4.6)*x72)));
j5eval[1]=IKsign(((-0.851)+(((1.15)*x69))+(((-1.0)*x70*x72))+((x69*x73))+(((1.15)*x72))+(((-1.13)*cj6))+(((1.4415)*sj6))+(((0.25)*x68))+(((2.1)*x74))+(((-1.0)*x69*x70))+((x72*x73))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x75=cj6*cj6;
IkReal x76=((2.1)*sj6);
IkReal x77=(py*sj4);
IkReal x78=(cj4*px);
IkReal x79=((0.25)*cj6);
IkReal x80=(cj6*sj6);
CheckValue<IkReal> x81=IKPowWithIntegerCheck(IKsign(((-0.851)+(((0.25)*pz*sj6))+((x78*x79))+(((1.15)*x77))+(((1.15)*x78))+(((-1.13)*cj6))+(((2.1)*cj6*pz))+(((1.4415)*sj6))+(((-1.0)*x76*x77))+(((-1.0)*x76*x78))+((x77*x79)))),-1);
if(!x81.valid){
continue;
}
CheckValue<IkReal> x82 = IKatan2WithCheck(IkReal(((5.53)+(((-1.05)*x80))+(((0.9)*pz))+(((-4.83)*sj6))+(((-1.0)*(pz*pz)))+(((-4.3475)*x75))+(((0.575)*cj6)))),IkReal(((-0.192)+((pz*x77))+((pz*x78))+(((1.05)*x75))+(((-4.3475)*x80))+(((-0.45)*x78))+(((-0.45)*x77))+(((2.415)*cj6))+(((0.2875)*sj6))+(((-0.74)*pz)))),IKFAST_ATAN2_MAGTHRESH);
if(!x82.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x81.value)))+(x82.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x83=IKsin(j5);
IkReal x84=IKcos(j5);
IkReal x85=((2.1)*cj6);
IkReal x86=(py*sj4);
IkReal x87=(cj4*px);
IkReal x88=((2.1)*sj6);
IkReal x89=((0.25)*sj6);
IkReal x90=((0.25)*cj6);
IkReal x91=(sj6*x83);
IkReal x92=((2.3)*x83);
IkReal x93=((1.0)*x83);
IkReal x94=((1.0)*x84);
evalcond[0]=((-0.45)+((x84*x88))+(((-1.15)*x84))+pz+(((-1.0)*x84*x90))+((x83*x89))+((x83*x85)));
evalcond[1]=(((pz*x83))+(((-1.0)*x87*x94))+(((-1.0)*x86*x94))+x89+x85+(((-0.45)*x83))+(((0.74)*x84)));
evalcond[2]=((1.15)+(((-1.0)*pz*x94))+(((-1.0)*x87*x93))+(((-1.0)*x86*x93))+(((0.45)*x84))+x90+(((-1.0)*x88))+(((0.74)*x83)));
evalcond[3]=((0.74)+((x84*x89))+((x84*x85))+(((1.15)*x83))+(((-1.0)*x83*x88))+(((-1.0)*x86))+(((-1.0)*x87))+((x83*x90)));
evalcond[4]=((2.3999)+((x87*x92))+(((1.48)*x86))+(((1.48)*x87))+(((2.3)*pz*x84))+((x86*x92))+(((0.9)*pz))+(((-1.702)*x83))+(((-1.0)*pp))+(((-1.035)*x84)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1503=cj6*cj6;
IkReal x1504=(cj4*px);
IkReal x1505=((2.1)*cj6);
IkReal x1506=(py*sj4);
IkReal x1507=((1.0)*pz);
IkReal x1508=((0.25)*sj6);
IkReal x1509=(cj6*sj6);
CheckValue<IkReal> x1510=IKPowWithIntegerCheck(IKsign(((0.5175)+((x1504*x1508))+((x1504*x1505))+((x1506*x1508))+(((-0.25)*cj6*pz))+(((-1.15)*pz))+(((-1.4415)*cj6))+(((-1.13)*sj6))+(((2.1)*pz*sj6))+((x1505*x1506)))),-1);
if(!x1510.valid){
continue;
}
CheckValue<IkReal> x1511 = IKatan2WithCheck(IkReal(((-0.858)+(((-1.0)*x1504*x1507))+(((0.74)*pz))+(((-1.0)*x1506*x1507))+(((2.415)*cj6))+(((0.45)*x1506))+(((0.45)*x1504))+(((-4.3475)*x1509))+(((0.2875)*sj6))+(((1.05)*x1503)))),IkReal(((-0.14)+(((4.3475)*x1503))+(((0.9)*pz))+(((-1.0)*pz*x1507))+(((1.05)*x1509)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1511.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1510.value)))+(x1511.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1512=IKsin(j5);
IkReal x1513=IKcos(j5);
IkReal x1514=((2.1)*cj6);
IkReal x1515=(py*sj4);
IkReal x1516=(cj4*px);
IkReal x1517=((2.1)*sj6);
IkReal x1518=((0.25)*sj6);
IkReal x1519=((0.25)*cj6);
IkReal x1520=(sj6*x1512);
IkReal x1521=((2.3)*x1512);
IkReal x1522=((1.0)*x1512);
IkReal x1523=((1.0)*x1513);
evalcond[0]=((-0.45)+((x1513*x1517))+(((-1.0)*x1513*x1519))+pz+(((-1.15)*x1513))+((x1512*x1514))+((x1512*x1518)));
evalcond[1]=((((-1.0)*x1515*x1523))+(((0.74)*x1513))+x1518+x1514+((pz*x1512))+(((-0.45)*x1512))+(((-1.0)*x1516*x1523)));
evalcond[2]=((1.15)+(((-1.0)*x1517))+(((-1.0)*x1515*x1522))+(((0.45)*x1513))+(((0.74)*x1512))+x1519+(((-1.0)*pz*x1523))+(((-1.0)*x1516*x1522)));
evalcond[3]=((0.74)+((x1513*x1514))+((x1513*x1518))+(((-1.0)*x1516))+(((-1.0)*x1515))+(((1.15)*x1512))+(((-1.0)*x1512*x1517))+((x1512*x1519)));
evalcond[4]=((2.3999)+(((-1.035)*x1513))+(((-1.702)*x1512))+(((0.9)*pz))+(((1.48)*x1515))+(((1.48)*x1516))+(((-1.0)*pp))+((x1516*x1521))+(((2.3)*pz*x1513))+((x1515*x1521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1524=(pz*sj6);
IkReal x1525=(py*sj4);
IkReal x1526=((2.1)*sj6);
IkReal x1527=((2.1)*cj6);
IkReal x1528=((0.25)*cj6);
IkReal x1529=(cj4*px);
IkReal x1530=((0.25)*sj6);
CheckValue<IkReal> x1531 = IKatan2WithCheck(IkReal(((0.851)+(((0.25)*x1524))+((x1525*x1526))+(((-0.76)*cj6))+(((-1.0)*x1525*x1528))+((x1526*x1529))+(((-1.6665)*sj6))+(((-1.0)*x1528*x1529))+((pz*x1527))+(((-1.15)*x1525))+(((-1.15)*x1529)))),IkReal(((0.5175)+(((-1.0)*x1529*x1530))+(((-1.0)*x1525*x1530))+(((-1.0)*x1525*x1527))+(((2.1)*x1524))+(((1.6665)*cj6))+(((-1.15)*pz))+(((-0.76)*sj6))+(((-1.0)*x1527*x1529))+(((-1.0)*pz*x1528)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1531.valid){
continue;
}
CheckValue<IkReal> x1532=IKPowWithIntegerCheck(IKsign(((-5.795)+(((4.83)*sj6))+(((-0.575)*cj6)))),-1);
if(!x1532.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1531.value)+(((1.5707963267949)*(x1532.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1533=IKsin(j5);
IkReal x1534=IKcos(j5);
IkReal x1535=((2.1)*cj6);
IkReal x1536=(py*sj4);
IkReal x1537=(cj4*px);
IkReal x1538=((2.1)*sj6);
IkReal x1539=((0.25)*sj6);
IkReal x1540=((0.25)*cj6);
IkReal x1541=(sj6*x1533);
IkReal x1542=((2.3)*x1533);
IkReal x1543=((1.0)*x1533);
IkReal x1544=((1.0)*x1534);
evalcond[0]=((-0.45)+pz+(((-1.0)*x1534*x1540))+((x1533*x1535))+((x1533*x1539))+((x1534*x1538))+(((-1.15)*x1534)));
evalcond[1]=((((0.74)*x1534))+x1535+x1539+(((-1.0)*x1536*x1544))+(((-1.0)*x1537*x1544))+(((-0.45)*x1533))+((pz*x1533)));
evalcond[2]=((1.15)+(((-1.0)*x1538))+(((-1.0)*pz*x1544))+(((0.45)*x1534))+(((0.74)*x1533))+x1540+(((-1.0)*x1536*x1543))+(((-1.0)*x1537*x1543)));
evalcond[3]=((0.74)+(((-1.0)*x1537))+(((-1.0)*x1536))+((x1533*x1540))+(((1.15)*x1533))+(((-1.0)*x1533*x1538))+((x1534*x1539))+((x1534*x1535)));
evalcond[4]=((2.3999)+((x1536*x1542))+((x1537*x1542))+(((1.48)*x1536))+(((1.48)*x1537))+(((0.9)*pz))+(((-1.035)*x1534))+(((-1.702)*x1533))+(((-1.0)*pp))+(((2.3)*pz*x1534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x95=((1.0)*sj5);
IkReal x96=(r12*sj4);
IkReal x97=(cj4*r01);
IkReal x98=(r10*sj4);
IkReal x99=((1.0)*cj4);
IkReal x100=(r11*sj4);
IkReal x101=(cj5*sj6);
IkReal x102=(((cj6*sj5))+x101);
IkReal x103=((((-1.0)*sj6*x95))+((cj5*cj6)));
IkReal x104=(sj4*x103);
IkReal x105=(cj4*x102);
IkReal x106=(cj4*x103);
IkReal x107=((((-1.0)*cj6*x95))+(((-1.0)*x101)));
new_r00=(((x102*x98))+((r20*x103))+((r00*x105)));
new_r01=(((x102*x97))+((r21*x103))+((x100*x102)));
new_r02=(((r02*x105))+((r22*x103))+((x102*x96)));
new_r10=(((r00*sj4))+(((-1.0)*r10*x99)));
new_r11=(((r01*sj4))+(((-1.0)*r11*x99)));
new_r12=((((-1.0)*r12*x99))+((r02*sj4)));
new_r20=(((x103*x98))+((r20*x107))+((r00*x106)));
new_r21=(((x103*x97))+((r21*x107))+((x100*x103)));
new_r22=(((r02*x106))+((r22*x107))+((x103*x96)));
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
cj8array[0]=new_r22;
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal j9eval[3];
j9eval[0]=sj8;
j9eval[1]=IKsign(sj8);
j9eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
j7eval[0]=sj8;
j7eval[1]=IKsign(sj8);
j7eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=new_r12;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j9mul = 1;
j9=0;
j7mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].fmul = j7mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].fmul = j9mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j9mul = 1;
j9=0;
j7mul=1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].fmul = j7mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].fmul = j9mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x108=new_r22*new_r22;
IkReal x109=((16.0)*new_r10);
IkReal x110=((16.0)*new_r01);
IkReal x111=((16.0)*new_r22);
IkReal x112=((8.0)*new_r11);
IkReal x113=((8.0)*new_r00);
IkReal x114=(x108*x109);
IkReal x115=(x108*x110);
j7eval[0]=((IKabs((((new_r22*x112))+(((-1.0)*x113)))))+(IKabs(((((-1.0)*x114))+x109)))+(IKabs(((((16.0)*new_r11*x108))+(((-32.0)*new_r11))+((new_r00*x111)))))+(IKabs((((new_r11*x111))+(((-32.0)*new_r00*x108))+(((16.0)*new_r00)))))+(IKabs(((((-1.0)*x110))+x115)))+(IKabs((((new_r22*x113))+(((-1.0)*x108*x112)))))+(IKabs(((((-1.0)*x115))+x110)))+(IKabs(((((-1.0)*x109))+x114))));
if( IKabs(j7eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j7, j9]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j7evalpoly[1];
IkReal x116=new_r22*new_r22;
IkReal x117=((16.0)*new_r10);
IkReal x118=(new_r11*new_r22);
IkReal x119=(x116*x117);
IkReal x120=((((8.0)*x118))+(((-8.0)*new_r00)));
op[0]=x120;
op[1]=((((-1.0)*x119))+x117);
op[2]=((((16.0)*x118))+(((16.0)*new_r00))+(((-32.0)*new_r00*x116)));
op[3]=((((-1.0)*x117))+x119);
op[4]=x120;
polyroots4(op,zeror,numroots);
IkReal j7array[4], cj7array[4], sj7array[4], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[4]={true,true,true,true};
_nj7 = 4;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

IkReal x121=new_r22*new_r22;
IkReal x122=((16.0)*new_r01);
IkReal x123=(new_r00*new_r22);
IkReal x124=((8.0)*x123);
IkReal x125=(new_r11*x121);
IkReal x126=(x121*x122);
IkReal x127=((8.0)*x125);
j7evalpoly[0]=((((htj7*htj7*htj7)*(((((-1.0)*x126))+x122))))+(((-1.0)*x127))+x124+((htj7*(((((-1.0)*x122))+x126))))+(((htj7*htj7)*(((((16.0)*x125))+(((16.0)*x123))+(((-32.0)*new_r11))))))+(((htj7*htj7*htj7*htj7)*(((((-1.0)*x127))+x124)))));
if( IKabs(j7evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j9eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x128=cj7*cj7;
IkReal x129=(cj7*new_r22);
IkReal x130=((-1.0)+(((-1.0)*x128*(new_r22*new_r22)))+x128);
j9eval[0]=x130;
j9eval[1]=IKsign(x130);
j9eval[2]=((IKabs((((new_r01*sj7))+(((-1.0)*new_r00*x129)))))+(IKabs((((new_r01*x129))+((new_r00*sj7))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j9eval[0]=new_r22;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j9eval[0]=sj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r10, new_r11);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x131=IKsin(j9);
IkReal x132=IKcos(j9);
evalcond[0]=x131;
evalcond[1]=((-1.0)*x132);
evalcond[2]=(x131+(((-1.0)*new_r10)));
evalcond[3]=(x132+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x133=IKsin(j9);
IkReal x134=IKcos(j9);
evalcond[0]=x133;
evalcond[1]=(x133+new_r10);
evalcond[2]=(x134+new_r11);
evalcond[3]=((-1.0)*x134);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x135=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x135.valid){
continue;
}
if((x135.value) < -0.00001)
continue;
IkReal gconst24=((-1.0)*(IKsqrt(x135.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj7+(((-1.0)*gconst24)))))+(IKabs(((-1.0)+(IKsign(sj7)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
sj7=IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24)))));
cj7=gconst24;
if( (gconst24) < -1-IKFAST_SINCOS_THRESH || (gconst24) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=IKacos(gconst24);
CheckValue<IkReal> x136=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x136.valid){
continue;
}
if((x136.value) < -0.00001)
continue;
IkReal gconst24=((-1.0)*(IKsqrt(x136.value)));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
CheckValue<IkReal> x137=IKPowWithIntegerCheck(gconst24,-1);
if(!x137.valid){
continue;
}
if( IKabs(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x137.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10))))+IKsqr((new_r11*(x137.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10))), (new_r11*(x137.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x138=IKcos(j9);
IkReal x139=IKsin(j9);
IkReal x140=((1.0)*gconst24);
if((((1.0)+(((-1.0)*gconst24*x140)))) < -0.00001)
continue;
IkReal x141=IKsqrt(((1.0)+(((-1.0)*gconst24*x140))));
evalcond[0]=x139;
evalcond[1]=((-1.0)*x138);
evalcond[2]=((((-1.0)*x138*x140))+new_r11);
evalcond[3]=((((-1.0)*x139*x140))+new_r10);
evalcond[4]=(((x138*x141))+new_r01);
evalcond[5]=(new_r00+((x139*x141)));
evalcond[6]=(((new_r00*x141))+x139+(((-1.0)*new_r10*x140)));
evalcond[7]=(((new_r01*x141))+(((-1.0)*new_r11*x140))+x138);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x142=IKPowWithIntegerCheck(IKsign(gconst24),-1);
if(!x142.valid){
continue;
}
CheckValue<IkReal> x143 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x143.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x142.value)))+(x143.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x144=IKcos(j9);
IkReal x145=IKsin(j9);
IkReal x146=((1.0)*gconst24);
if((((1.0)+(((-1.0)*gconst24*x146)))) < -0.00001)
continue;
IkReal x147=IKsqrt(((1.0)+(((-1.0)*gconst24*x146))));
evalcond[0]=x145;
evalcond[1]=((-1.0)*x144);
evalcond[2]=((((-1.0)*x144*x146))+new_r11);
evalcond[3]=((((-1.0)*x145*x146))+new_r10);
evalcond[4]=(((x144*x147))+new_r01);
evalcond[5]=(((x145*x147))+new_r00);
evalcond[6]=(((new_r00*x147))+x145+(((-1.0)*new_r10*x146)));
evalcond[7]=(((new_r01*x147))+(((-1.0)*new_r11*x146))+x144);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x148=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x148.valid){
continue;
}
if((x148.value) < -0.00001)
continue;
IkReal gconst24=((-1.0)*(IKsqrt(x148.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj7+(((-1.0)*gconst24)))))+(IKabs(((1.0)+(IKsign(sj7)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
sj7=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24)))))));
cj7=gconst24;
if( (gconst24) < -1-IKFAST_SINCOS_THRESH || (gconst24) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=((-1.0)*(IKacos(gconst24)));
CheckValue<IkReal> x149=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x149.valid){
continue;
}
if((x149.value) < -0.00001)
continue;
IkReal gconst24=((-1.0)*(IKsqrt(x149.value)));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
CheckValue<IkReal> x150=IKPowWithIntegerCheck(gconst24,-1);
if(!x150.valid){
continue;
}
if( IKabs((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x150.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10))))+IKsqr((new_r11*(x150.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10))), (new_r11*(x150.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x151=IKcos(j9);
IkReal x152=IKsin(j9);
IkReal x153=((1.0)*gconst24);
if((((1.0)+(((-1.0)*gconst24*x153)))) < -0.00001)
continue;
IkReal x154=IKsqrt(((1.0)+(((-1.0)*gconst24*x153))));
IkReal x155=((1.0)*x154);
evalcond[0]=x152;
evalcond[1]=((-1.0)*x151);
evalcond[2]=((((-1.0)*x151*x153))+new_r11);
evalcond[3]=((((-1.0)*x152*x153))+new_r10);
evalcond[4]=((((-1.0)*x151*x155))+new_r01);
evalcond[5]=((((-1.0)*x152*x155))+new_r00);
evalcond[6]=(x152+(((-1.0)*new_r10*x153))+(((-1.0)*new_r00*x155)));
evalcond[7]=(x151+(((-1.0)*new_r11*x153))+(((-1.0)*new_r01*x155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x156=IKPowWithIntegerCheck(IKsign(gconst24),-1);
if(!x156.valid){
continue;
}
CheckValue<IkReal> x157 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x157.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x156.value)))+(x157.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x158=IKcos(j9);
IkReal x159=IKsin(j9);
IkReal x160=((1.0)*gconst24);
if((((1.0)+(((-1.0)*gconst24*x160)))) < -0.00001)
continue;
IkReal x161=IKsqrt(((1.0)+(((-1.0)*gconst24*x160))));
IkReal x162=((1.0)*x161);
evalcond[0]=x159;
evalcond[1]=((-1.0)*x158);
evalcond[2]=((((-1.0)*x158*x160))+new_r11);
evalcond[3]=((((-1.0)*x159*x160))+new_r10);
evalcond[4]=((((-1.0)*x158*x162))+new_r01);
evalcond[5]=((((-1.0)*x159*x162))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x162))+(((-1.0)*new_r10*x160))+x159);
evalcond[7]=((((-1.0)*new_r11*x160))+x158+(((-1.0)*new_r01*x162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x163=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x163.valid){
continue;
}
if((x163.value) < -0.00001)
continue;
IkReal gconst25=IKsqrt(x163.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj7)))))+(IKabs((cj7+(((-1.0)*gconst25)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
sj7=IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))));
cj7=gconst25;
if( (gconst25) < -1-IKFAST_SINCOS_THRESH || (gconst25) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=IKacos(gconst25);
CheckValue<IkReal> x164=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x164.valid){
continue;
}
if((x164.value) < -0.00001)
continue;
IkReal gconst25=IKsqrt(x164.value);
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
CheckValue<IkReal> x165=IKPowWithIntegerCheck(gconst25,-1);
if(!x165.valid){
continue;
}
if( IKabs((((gconst25*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x165.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst25*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25))))))))))+IKsqr((new_r11*(x165.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((gconst25*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25))))))))), (new_r11*(x165.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x166=IKcos(j9);
IkReal x167=IKsin(j9);
IkReal x168=((1.0)*gconst25);
if((((1.0)+(((-1.0)*gconst25*x168)))) < -0.00001)
continue;
IkReal x169=IKsqrt(((1.0)+(((-1.0)*gconst25*x168))));
evalcond[0]=x167;
evalcond[1]=((-1.0)*x166);
evalcond[2]=((((-1.0)*x166*x168))+new_r11);
evalcond[3]=(new_r10+(((-1.0)*x167*x168)));
evalcond[4]=(((x166*x169))+new_r01);
evalcond[5]=(((x167*x169))+new_r00);
evalcond[6]=(((new_r00*x169))+(((-1.0)*new_r10*x168))+x167);
evalcond[7]=(((new_r01*x169))+(((-1.0)*new_r11*x168))+x166);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x170=IKPowWithIntegerCheck(IKsign(gconst25),-1);
if(!x170.valid){
continue;
}
CheckValue<IkReal> x171 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x171.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x170.value)))+(x171.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x172=IKcos(j9);
IkReal x173=IKsin(j9);
IkReal x174=((1.0)*gconst25);
if((((1.0)+(((-1.0)*gconst25*x174)))) < -0.00001)
continue;
IkReal x175=IKsqrt(((1.0)+(((-1.0)*gconst25*x174))));
evalcond[0]=x173;
evalcond[1]=((-1.0)*x172);
evalcond[2]=(new_r11+(((-1.0)*x172*x174)));
evalcond[3]=(new_r10+(((-1.0)*x173*x174)));
evalcond[4]=(((x172*x175))+new_r01);
evalcond[5]=(((x173*x175))+new_r00);
evalcond[6]=(((new_r00*x175))+(((-1.0)*new_r10*x174))+x173);
evalcond[7]=(((new_r01*x175))+(((-1.0)*new_r11*x174))+x172);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x176=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x176.valid){
continue;
}
if((x176.value) < -0.00001)
continue;
IkReal gconst25=IKsqrt(x176.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj7+(((-1.0)*gconst25)))))+(IKabs(((1.0)+(IKsign(sj7)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
sj7=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))))));
cj7=gconst25;
if( (gconst25) < -1-IKFAST_SINCOS_THRESH || (gconst25) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=((-1.0)*(IKacos(gconst25)));
CheckValue<IkReal> x177=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x177.valid){
continue;
}
if((x177.value) < -0.00001)
continue;
IkReal gconst25=IKsqrt(x177.value);
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
CheckValue<IkReal> x178=IKPowWithIntegerCheck(gconst25,-1);
if(!x178.valid){
continue;
}
if( IKabs((((gconst25*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x178.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst25*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25))))))))))+IKsqr((new_r11*(x178.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((gconst25*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25))))))))), (new_r11*(x178.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x179=IKcos(j9);
IkReal x180=IKsin(j9);
IkReal x181=((1.0)*gconst25);
if((((1.0)+(((-1.0)*gconst25*x181)))) < -0.00001)
continue;
IkReal x182=IKsqrt(((1.0)+(((-1.0)*gconst25*x181))));
IkReal x183=((1.0)*x182);
evalcond[0]=x180;
evalcond[1]=((-1.0)*x179);
evalcond[2]=(new_r11+(((-1.0)*x179*x181)));
evalcond[3]=((((-1.0)*x180*x181))+new_r10);
evalcond[4]=(new_r01+(((-1.0)*x179*x183)));
evalcond[5]=((((-1.0)*x180*x183))+new_r00);
evalcond[6]=(x180+(((-1.0)*new_r10*x181))+(((-1.0)*new_r00*x183)));
evalcond[7]=(x179+(((-1.0)*new_r11*x181))+(((-1.0)*new_r01*x183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x184=IKPowWithIntegerCheck(IKsign(gconst25),-1);
if(!x184.valid){
continue;
}
CheckValue<IkReal> x185 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x185.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x184.value)))+(x185.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x186=IKcos(j9);
IkReal x187=IKsin(j9);
IkReal x188=((1.0)*gconst25);
if((((1.0)+(((-1.0)*gconst25*x188)))) < -0.00001)
continue;
IkReal x189=IKsqrt(((1.0)+(((-1.0)*gconst25*x188))));
IkReal x190=((1.0)*x189);
evalcond[0]=x187;
evalcond[1]=((-1.0)*x186);
evalcond[2]=((((-1.0)*x186*x188))+new_r11);
evalcond[3]=((((-1.0)*x187*x188))+new_r10);
evalcond[4]=((((-1.0)*x186*x190))+new_r01);
evalcond[5]=((((-1.0)*x187*x190))+new_r00);
evalcond[6]=(x187+(((-1.0)*new_r10*x188))+(((-1.0)*new_r00*x190)));
evalcond[7]=(x186+(((-1.0)*new_r11*x188))+(((-1.0)*new_r01*x190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x191=(new_r00*sj7);
CheckValue<IkReal> x192=IKPowWithIntegerCheck(sj7,-1);
if(!x192.valid){
continue;
}
if( IKabs(((((-1.0)*x191))+((cj7*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x192.value)*((((cj7*new_r22*x191))+(((-1.0)*new_r10*new_r22*(cj7*cj7)))+(((-1.0)*new_r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x191))+((cj7*new_r10))))+IKsqr(((x192.value)*((((cj7*new_r22*x191))+(((-1.0)*new_r10*new_r22*(cj7*cj7)))+(((-1.0)*new_r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x191))+((cj7*new_r10))), ((x192.value)*((((cj7*new_r22*x191))+(((-1.0)*new_r10*new_r22*(cj7*cj7)))+(((-1.0)*new_r01))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x193=IKsin(j9);
IkReal x194=IKcos(j9);
IkReal x195=((1.0)*cj7);
IkReal x196=(cj7*new_r01);
IkReal x197=(cj7*new_r00);
IkReal x198=(new_r10*sj7);
IkReal x199=(new_r11*sj7);
IkReal x200=(new_r22*x193);
IkReal x201=(new_r22*x194);
evalcond[0]=(((new_r00*sj7))+x193+(((-1.0)*new_r10*x195)));
evalcond[1]=(((new_r01*sj7))+x194+(((-1.0)*new_r11*x195)));
evalcond[2]=(x199+x196+x200);
evalcond[3]=(x193+((new_r22*x196))+((new_r22*x199)));
evalcond[4]=(((sj7*x194))+new_r01+((cj7*x200)));
evalcond[5]=(x198+x197+(((-1.0)*x201)));
evalcond[6]=((((-1.0)*x195*x201))+((sj7*x193))+new_r00);
evalcond[7]=((((-1.0)*x194*x195))+new_r11+((sj7*x200)));
evalcond[8]=((((-1.0)*x194))+((new_r22*x197))+((new_r22*x198)));
evalcond[9]=((((-1.0)*sj7*x201))+new_r10+(((-1.0)*x193*x195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x202=((1.0)*new_r01);
CheckValue<IkReal> x203=IKPowWithIntegerCheck(new_r22,-1);
if(!x203.valid){
continue;
}
if( IKabs(((x203.value)*(((((-1.0)*cj7*x202))+(((-1.0)*new_r11*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj7*x202))+((cj7*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x203.value)*(((((-1.0)*cj7*x202))+(((-1.0)*new_r11*sj7))))))+IKsqr(((((-1.0)*sj7*x202))+((cj7*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x203.value)*(((((-1.0)*cj7*x202))+(((-1.0)*new_r11*sj7))))), ((((-1.0)*sj7*x202))+((cj7*new_r11))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x204=IKsin(j9);
IkReal x205=IKcos(j9);
IkReal x206=((1.0)*cj7);
IkReal x207=(cj7*new_r01);
IkReal x208=(cj7*new_r00);
IkReal x209=(new_r10*sj7);
IkReal x210=(new_r11*sj7);
IkReal x211=(new_r22*x204);
IkReal x212=(new_r22*x205);
evalcond[0]=(((new_r00*sj7))+x204+(((-1.0)*new_r10*x206)));
evalcond[1]=(((new_r01*sj7))+x205+(((-1.0)*new_r11*x206)));
evalcond[2]=(x210+x211+x207);
evalcond[3]=(((new_r22*x210))+x204+((new_r22*x207)));
evalcond[4]=(((cj7*x211))+new_r01+((sj7*x205)));
evalcond[5]=(x209+x208+(((-1.0)*x212)));
evalcond[6]=((((-1.0)*x206*x212))+new_r00+((sj7*x204)));
evalcond[7]=(((sj7*x211))+(((-1.0)*x205*x206))+new_r11);
evalcond[8]=(((new_r22*x208))+((new_r22*x209))+(((-1.0)*x205)));
evalcond[9]=((((-1.0)*x204*x206))+(((-1.0)*sj7*x212))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x213=cj7*cj7;
IkReal x214=(cj7*new_r22);
CheckValue<IkReal> x215=IKPowWithIntegerCheck(IKsign(((-1.0)+(((-1.0)*x213*(new_r22*new_r22)))+x213)),-1);
if(!x215.valid){
continue;
}
CheckValue<IkReal> x216 = IKatan2WithCheck(IkReal((((new_r00*sj7))+((new_r01*x214)))),IkReal((((new_r01*sj7))+(((-1.0)*new_r00*x214)))),IKFAST_ATAN2_MAGTHRESH);
if(!x216.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x215.value)))+(x216.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x217=IKsin(j9);
IkReal x218=IKcos(j9);
IkReal x219=((1.0)*cj7);
IkReal x220=(cj7*new_r01);
IkReal x221=(cj7*new_r00);
IkReal x222=(new_r10*sj7);
IkReal x223=(new_r11*sj7);
IkReal x224=(new_r22*x217);
IkReal x225=(new_r22*x218);
evalcond[0]=(((new_r00*sj7))+(((-1.0)*new_r10*x219))+x217);
evalcond[1]=((((-1.0)*new_r11*x219))+((new_r01*sj7))+x218);
evalcond[2]=(x220+x223+x224);
evalcond[3]=(x217+((new_r22*x223))+((new_r22*x220)));
evalcond[4]=(((cj7*x224))+((sj7*x218))+new_r01);
evalcond[5]=(x221+x222+(((-1.0)*x225)));
evalcond[6]=((((-1.0)*x219*x225))+((sj7*x217))+new_r00);
evalcond[7]=(((sj7*x224))+(((-1.0)*x218*x219))+new_r11);
evalcond[8]=((((-1.0)*x218))+((new_r22*x222))+((new_r22*x221)));
evalcond[9]=((((-1.0)*x217*x219))+new_r10+(((-1.0)*sj7*x225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7, j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x227=IKPowWithIntegerCheck(sj8,-1);
if(!x227.valid){
continue;
}
IkReal x226=x227.value;
CheckValue<IkReal> x228=IKPowWithIntegerCheck(new_r12,-1);
if(!x228.valid){
continue;
}
if( IKabs((x226*(x228.value)*(((-1.0)+(new_r02*new_r02)+(cj8*cj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x226)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x226*(x228.value)*(((-1.0)+(new_r02*new_r02)+(cj8*cj8)))))+IKsqr(((-1.0)*new_r02*x226))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x226*(x228.value)*(((-1.0)+(new_r02*new_r02)+(cj8*cj8)))), ((-1.0)*new_r02*x226));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x229=IKcos(j7);
IkReal x230=IKsin(j7);
IkReal x231=((1.0)*sj8);
IkReal x232=(new_r02*x229);
IkReal x233=(new_r12*x230);
IkReal x234=((1.0)*x230);
IkReal x235=(x229*x231);
evalcond[0]=(((sj8*x229))+new_r02);
evalcond[1]=(((sj8*x230))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x234))+((new_r12*x229)));
evalcond[3]=(sj8+x232+x233);
evalcond[4]=(((cj8*x233))+((cj8*x232))+((new_r22*sj8)));
evalcond[5]=((((-1.0)*new_r10*x230*x231))+((cj8*new_r20))+(((-1.0)*new_r00*x235)));
evalcond[6]=(((cj8*new_r21))+(((-1.0)*new_r11*x230*x231))+(((-1.0)*new_r01*x235)));
evalcond[7]=((-1.0)+((cj8*new_r22))+(((-1.0)*x231*x232))+(((-1.0)*x231*x233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[3];
j9eval[0]=sj8;
j9eval[1]=IKsign(sj8);
j9eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=sj8;
j9eval[1]=sj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=sj8;
j9eval[1]=cj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x236=((1.0)*sj7);
if( IKabs(((((-1.0)*cj7*new_r01))+(((-1.0)*new_r00*x236)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x236))+((cj7*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj7*new_r01))+(((-1.0)*new_r00*x236))))+IKsqr(((((-1.0)*new_r01*x236))+((cj7*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*cj7*new_r01))+(((-1.0)*new_r00*x236))), ((((-1.0)*new_r01*x236))+((cj7*new_r00))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x237=IKsin(j9);
IkReal x238=IKcos(j9);
IkReal x239=((1.0)*cj7);
IkReal x240=(sj7*x237);
IkReal x241=((1.0)*x238);
IkReal x242=(x238*x239);
evalcond[0]=(((new_r11*sj7))+x237+((cj7*new_r01)));
evalcond[1]=(((new_r00*sj7))+x237+(((-1.0)*new_r10*x239)));
evalcond[2]=(((new_r01*sj7))+x238+(((-1.0)*new_r11*x239)));
evalcond[3]=(new_r01+((sj7*x238))+((cj7*x237)));
evalcond[4]=(((new_r10*sj7))+(((-1.0)*x241))+((cj7*new_r00)));
evalcond[5]=(x240+(((-1.0)*x242))+new_r00);
evalcond[6]=(x240+(((-1.0)*x242))+new_r11);
evalcond[7]=((((-1.0)*sj7*x241))+new_r10+(((-1.0)*x237*x239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x243=((1.0)*sj7);
if( IKabs(((((-1.0)*new_r00*x243))+((cj7*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x243))+(((-1.0)*cj7*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x243))+((cj7*new_r01))))+IKsqr(((((-1.0)*new_r01*x243))+(((-1.0)*cj7*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*new_r00*x243))+((cj7*new_r01))), ((((-1.0)*new_r01*x243))+(((-1.0)*cj7*new_r00))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x244=IKcos(j9);
IkReal x245=IKsin(j9);
IkReal x246=((1.0)*cj7);
IkReal x247=(sj7*x244);
IkReal x248=(sj7*x245);
IkReal x249=(x245*x246);
evalcond[0]=(((new_r10*sj7))+x244+((cj7*new_r00)));
evalcond[1]=(((new_r00*sj7))+x245+(((-1.0)*new_r10*x246)));
evalcond[2]=(((new_r01*sj7))+x244+(((-1.0)*new_r11*x246)));
evalcond[3]=((((-1.0)*x245))+((new_r11*sj7))+((cj7*new_r01)));
evalcond[4]=(((cj7*x244))+x248+new_r00);
evalcond[5]=(x247+(((-1.0)*x249))+new_r01);
evalcond[6]=(x247+(((-1.0)*x249))+new_r10);
evalcond[7]=((((-1.0)*x248))+new_r11+(((-1.0)*x244*x246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x250=IKsin(j9);
IkReal x251=IKcos(j9);
IkReal x252=((1.0)*x251);
evalcond[0]=(x250+new_r00);
evalcond[1]=(x251+new_r01);
evalcond[2]=(((sj8*x250))+new_r21);
evalcond[3]=(((cj8*x250))+new_r11);
evalcond[4]=((((-1.0)*sj8*x252))+new_r20);
evalcond[5]=((((-1.0)*cj8*x252))+new_r10);
evalcond[6]=(((cj8*new_r11))+x250+((new_r21*sj8)));
evalcond[7]=(((new_r20*sj8))+((cj8*new_r10))+(((-1.0)*x252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r00, new_r01);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x253=IKsin(j9);
IkReal x254=IKcos(j9);
IkReal x255=((1.0)*cj8);
IkReal x256=((1.0)*x254);
evalcond[0]=(((sj8*x253))+new_r21);
evalcond[1]=(x253+(((-1.0)*new_r00)));
evalcond[2]=(x254+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*sj8*x256))+new_r20);
evalcond[4]=(((cj8*x253))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*x254*x255))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r11*x255))+x253+((new_r21*sj8)));
evalcond[7]=((((-1.0)*new_r10*x255))+((new_r20*sj8))+(((-1.0)*x256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r10, new_r11);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x257=IKsin(j9);
IkReal x258=IKcos(j9);
IkReal x259=((1.0)*x258);
evalcond[0]=(((sj8*x257))+new_r21);
evalcond[1]=(x257+(((-1.0)*new_r10)));
evalcond[2]=(x258+(((-1.0)*new_r11)));
evalcond[3]=(((cj8*x257))+new_r01);
evalcond[4]=((((-1.0)*sj8*x259))+new_r20);
evalcond[5]=((((-1.0)*cj8*x259))+new_r00);
evalcond[6]=(x257+((cj8*new_r01))+((new_r21*sj8)));
evalcond[7]=(((new_r20*sj8))+((cj8*new_r00))+(((-1.0)*x259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x260=IKsin(j9);
IkReal x261=IKcos(j9);
IkReal x262=((1.0)*cj8);
IkReal x263=((1.0)*x261);
evalcond[0]=(x260+new_r10);
evalcond[1]=(x261+new_r11);
evalcond[2]=(new_r21+((sj8*x260)));
evalcond[3]=((((-1.0)*sj8*x263))+new_r20);
evalcond[4]=(((cj8*x260))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*x261*x262))+(((-1.0)*new_r00)));
evalcond[6]=((((-1.0)*new_r01*x262))+x260+((new_r21*sj8)));
evalcond[7]=(((new_r20*sj8))+(((-1.0)*new_r00*x262))+(((-1.0)*x263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j9eval[0]=1.0;
if( IKabs(j9eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j9]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j9array[2], cj9array[2], sj9array[2], tempj9array[1];
int numsolutions = 0;
for(int ij9 = 0; ij9 < numroots; ++ij9)
{
IkReal htj9 = zeror[ij9];
tempj9array[0]=((2.0)*(atan(htj9)));
for(int kj9 = 0; kj9 < 1; ++kj9)
{
j9array[numsolutions] = tempj9array[kj9];
if( j9array[numsolutions] > IKPI )
{
    j9array[numsolutions]-=IK2PI;
}
else if( j9array[numsolutions] < -IKPI )
{
    j9array[numsolutions]+=IK2PI;
}
sj9array[numsolutions] = IKsin(j9array[numsolutions]);
cj9array[numsolutions] = IKcos(j9array[numsolutions]);
numsolutions++;
}
}
bool j9valid[2]={true,true};
_nj9 = 2;
for(int ij9 = 0; ij9 < numsolutions; ++ij9)
    {
if( !j9valid[ij9] )
{
    continue;
}
    j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
htj9 = IKtan(j9/2);

_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < numsolutions; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x265=IKPowWithIntegerCheck(sj8,-1);
if(!x265.valid){
continue;
}
IkReal x264=x265.value;
CheckValue<IkReal> x266=IKPowWithIntegerCheck(cj7,-1);
if(!x266.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x264)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x264*(x266.value)*((((new_r11*sj8))+(((-1.0)*cj8*new_r21*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x264))+IKsqr((x264*(x266.value)*((((new_r11*sj8))+(((-1.0)*cj8*new_r21*sj7))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r21*x264), (x264*(x266.value)*((((new_r11*sj8))+(((-1.0)*cj8*new_r21*sj7))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x267=IKsin(j9);
IkReal x268=IKcos(j9);
IkReal x269=(cj7*new_r01);
IkReal x270=(cj8*sj7);
IkReal x271=((1.0)*cj7);
IkReal x272=(cj7*cj8);
IkReal x273=(cj7*x267);
IkReal x274=((1.0)*x268);
evalcond[0]=(new_r21+((sj8*x267)));
evalcond[1]=(new_r20+(((-1.0)*sj8*x274)));
evalcond[2]=(((new_r00*sj7))+x267+(((-1.0)*new_r10*x271)));
evalcond[3]=(((new_r01*sj7))+x268+(((-1.0)*new_r11*x271)));
evalcond[4]=(((new_r11*sj7))+((cj8*x267))+x269);
evalcond[5]=(((sj7*x268))+new_r01+((x267*x272)));
evalcond[6]=(((new_r10*sj7))+(((-1.0)*cj8*x274))+((cj7*new_r00)));
evalcond[7]=((((-1.0)*cj8*x268*x271))+((sj7*x267))+new_r00);
evalcond[8]=((((-1.0)*x268*x271))+new_r11+((x267*x270)));
evalcond[9]=((((-1.0)*x270*x274))+new_r10+(((-1.0)*x267*x271)));
evalcond[10]=(((cj8*x269))+x267+((new_r21*sj8))+((new_r11*x270)));
evalcond[11]=(((new_r20*sj8))+((new_r00*x272))+(((-1.0)*x274))+((new_r10*x270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x276=IKPowWithIntegerCheck(sj8,-1);
if(!x276.valid){
continue;
}
IkReal x275=x276.value;
CheckValue<IkReal> x277=IKPowWithIntegerCheck(sj7,-1);
if(!x277.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x275)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x275*(x277.value)*(((((-1.0)*new_r01*sj8))+((cj7*cj8*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x275))+IKsqr((x275*(x277.value)*(((((-1.0)*new_r01*sj8))+((cj7*cj8*new_r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r21*x275), (x275*(x277.value)*(((((-1.0)*new_r01*sj8))+((cj7*cj8*new_r21))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x278=IKsin(j9);
IkReal x279=IKcos(j9);
IkReal x280=(cj7*new_r01);
IkReal x281=(cj8*sj7);
IkReal x282=((1.0)*cj7);
IkReal x283=(cj7*cj8);
IkReal x284=(cj7*x278);
IkReal x285=((1.0)*x279);
evalcond[0]=(((sj8*x278))+new_r21);
evalcond[1]=((((-1.0)*sj8*x285))+new_r20);
evalcond[2]=(((new_r00*sj7))+x278+(((-1.0)*new_r10*x282)));
evalcond[3]=(((new_r01*sj7))+x279+(((-1.0)*new_r11*x282)));
evalcond[4]=(((new_r11*sj7))+x280+((cj8*x278)));
evalcond[5]=(((x278*x283))+((sj7*x279))+new_r01);
evalcond[6]=(((new_r10*sj7))+(((-1.0)*cj8*x285))+((cj7*new_r00)));
evalcond[7]=((((-1.0)*cj8*x279*x282))+((sj7*x278))+new_r00);
evalcond[8]=(((x278*x281))+new_r11+(((-1.0)*x279*x282)));
evalcond[9]=((((-1.0)*x281*x285))+new_r10+(((-1.0)*x278*x282)));
evalcond[10]=(x278+((cj8*x280))+((new_r21*sj8))+((new_r11*x281)));
evalcond[11]=(((new_r20*sj8))+(((-1.0)*x285))+((new_r00*x283))+((new_r10*x281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x286=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x286.valid){
continue;
}
CheckValue<IkReal> x287 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x287.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x286.value)))+(x287.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x288=IKsin(j9);
IkReal x289=IKcos(j9);
IkReal x290=(cj7*new_r01);
IkReal x291=(cj8*sj7);
IkReal x292=((1.0)*cj7);
IkReal x293=(cj7*cj8);
IkReal x294=(cj7*x288);
IkReal x295=((1.0)*x289);
evalcond[0]=(((sj8*x288))+new_r21);
evalcond[1]=(new_r20+(((-1.0)*sj8*x295)));
evalcond[2]=((((-1.0)*new_r10*x292))+((new_r00*sj7))+x288);
evalcond[3]=((((-1.0)*new_r11*x292))+((new_r01*sj7))+x289);
evalcond[4]=(((new_r11*sj7))+x290+((cj8*x288)));
evalcond[5]=(((sj7*x289))+new_r01+((x288*x293)));
evalcond[6]=((((-1.0)*cj8*x295))+((new_r10*sj7))+((cj7*new_r00)));
evalcond[7]=((((-1.0)*cj8*x289*x292))+((sj7*x288))+new_r00);
evalcond[8]=((((-1.0)*x289*x292))+new_r11+((x288*x291)));
evalcond[9]=((((-1.0)*x291*x295))+(((-1.0)*x288*x292))+new_r10);
evalcond[10]=(((cj8*x290))+((new_r11*x291))+x288+((new_r21*sj8)));
evalcond[11]=(((new_r20*sj8))+(((-1.0)*x295))+((new_r10*x291))+((new_r00*x293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x296=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x296.valid){
continue;
}
CheckValue<IkReal> x297 = IKatan2WithCheck(IkReal(((-1.0)*new_r12)),IkReal(((-1.0)*new_r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x297.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x296.value)))+(x297.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x298=IKcos(j7);
IkReal x299=IKsin(j7);
IkReal x300=((1.0)*sj8);
IkReal x301=(new_r02*x298);
IkReal x302=(new_r12*x299);
IkReal x303=((1.0)*x299);
IkReal x304=(x298*x300);
evalcond[0]=(((sj8*x298))+new_r02);
evalcond[1]=(((sj8*x299))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x303))+((new_r12*x298)));
evalcond[3]=(sj8+x302+x301);
evalcond[4]=(((cj8*x302))+((cj8*x301))+((new_r22*sj8)));
evalcond[5]=(((cj8*new_r20))+(((-1.0)*new_r10*x299*x300))+(((-1.0)*new_r00*x304)));
evalcond[6]=((((-1.0)*new_r11*x299*x300))+((cj8*new_r21))+(((-1.0)*new_r01*x304)));
evalcond[7]=((-1.0)+((cj8*new_r22))+(((-1.0)*x300*x301))+(((-1.0)*x300*x302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[3];
j9eval[0]=sj8;
j9eval[1]=IKsign(sj8);
j9eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=sj8;
j9eval[1]=sj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=sj8;
j9eval[1]=cj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x305=((1.0)*sj7);
if( IKabs(((((-1.0)*cj7*new_r01))+(((-1.0)*new_r00*x305)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x305))+((cj7*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj7*new_r01))+(((-1.0)*new_r00*x305))))+IKsqr(((((-1.0)*new_r01*x305))+((cj7*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*cj7*new_r01))+(((-1.0)*new_r00*x305))), ((((-1.0)*new_r01*x305))+((cj7*new_r00))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x306=IKsin(j9);
IkReal x307=IKcos(j9);
IkReal x308=((1.0)*cj7);
IkReal x309=(sj7*x306);
IkReal x310=((1.0)*x307);
IkReal x311=(x307*x308);
evalcond[0]=(((new_r11*sj7))+x306+((cj7*new_r01)));
evalcond[1]=(((new_r00*sj7))+x306+(((-1.0)*new_r10*x308)));
evalcond[2]=(((new_r01*sj7))+x307+(((-1.0)*new_r11*x308)));
evalcond[3]=(((sj7*x307))+((cj7*x306))+new_r01);
evalcond[4]=(((new_r10*sj7))+(((-1.0)*x310))+((cj7*new_r00)));
evalcond[5]=(x309+(((-1.0)*x311))+new_r00);
evalcond[6]=(x309+(((-1.0)*x311))+new_r11);
evalcond[7]=((((-1.0)*sj7*x310))+(((-1.0)*x306*x308))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x312=((1.0)*sj7);
if( IKabs(((((-1.0)*new_r00*x312))+((cj7*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*new_r00))+(((-1.0)*new_r01*x312)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x312))+((cj7*new_r01))))+IKsqr(((((-1.0)*cj7*new_r00))+(((-1.0)*new_r01*x312))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*new_r00*x312))+((cj7*new_r01))), ((((-1.0)*cj7*new_r00))+(((-1.0)*new_r01*x312))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x313=IKcos(j9);
IkReal x314=IKsin(j9);
IkReal x315=((1.0)*cj7);
IkReal x316=(sj7*x313);
IkReal x317=(sj7*x314);
IkReal x318=(x314*x315);
evalcond[0]=(((new_r10*sj7))+x313+((cj7*new_r00)));
evalcond[1]=(((new_r00*sj7))+x314+(((-1.0)*new_r10*x315)));
evalcond[2]=(((new_r01*sj7))+(((-1.0)*new_r11*x315))+x313);
evalcond[3]=(((new_r11*sj7))+(((-1.0)*x314))+((cj7*new_r01)));
evalcond[4]=(x317+new_r00+((cj7*x313)));
evalcond[5]=(x316+(((-1.0)*x318))+new_r01);
evalcond[6]=(x316+(((-1.0)*x318))+new_r10);
evalcond[7]=((((-1.0)*x313*x315))+(((-1.0)*x317))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x319=IKsin(j9);
IkReal x320=IKcos(j9);
IkReal x321=((1.0)*x320);
evalcond[0]=(x319+new_r00);
evalcond[1]=(x320+new_r01);
evalcond[2]=(((sj8*x319))+new_r21);
evalcond[3]=(((cj8*x319))+new_r11);
evalcond[4]=((((-1.0)*sj8*x321))+new_r20);
evalcond[5]=((((-1.0)*cj8*x321))+new_r10);
evalcond[6]=(((cj8*new_r11))+x319+((new_r21*sj8)));
evalcond[7]=(((new_r20*sj8))+(((-1.0)*x321))+((cj8*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r00, new_r01);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x322=IKsin(j9);
IkReal x323=IKcos(j9);
IkReal x324=((1.0)*cj8);
IkReal x325=((1.0)*x323);
evalcond[0]=(((sj8*x322))+new_r21);
evalcond[1]=(x322+(((-1.0)*new_r00)));
evalcond[2]=(x323+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*sj8*x325))+new_r20);
evalcond[4]=(((cj8*x322))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*x323*x324))+(((-1.0)*new_r10)));
evalcond[6]=(x322+((new_r21*sj8))+(((-1.0)*new_r11*x324)));
evalcond[7]=(((new_r20*sj8))+(((-1.0)*x325))+(((-1.0)*new_r10*x324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r10, new_r11);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x326=IKsin(j9);
IkReal x327=IKcos(j9);
IkReal x328=((1.0)*x327);
evalcond[0]=(((sj8*x326))+new_r21);
evalcond[1]=(x326+(((-1.0)*new_r10)));
evalcond[2]=(x327+(((-1.0)*new_r11)));
evalcond[3]=(((cj8*x326))+new_r01);
evalcond[4]=((((-1.0)*sj8*x328))+new_r20);
evalcond[5]=((((-1.0)*cj8*x328))+new_r00);
evalcond[6]=(x326+((cj8*new_r01))+((new_r21*sj8)));
evalcond[7]=(((new_r20*sj8))+(((-1.0)*x328))+((cj8*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x329=IKsin(j9);
IkReal x330=IKcos(j9);
IkReal x331=((1.0)*cj8);
IkReal x332=((1.0)*x330);
evalcond[0]=(x329+new_r10);
evalcond[1]=(x330+new_r11);
evalcond[2]=(((sj8*x329))+new_r21);
evalcond[3]=((((-1.0)*sj8*x332))+new_r20);
evalcond[4]=(((cj8*x329))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*x330*x331))+(((-1.0)*new_r00)));
evalcond[6]=(x329+((new_r21*sj8))+(((-1.0)*new_r01*x331)));
evalcond[7]=(((new_r20*sj8))+(((-1.0)*new_r00*x331))+(((-1.0)*x332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j9eval[0]=1.0;
if( IKabs(j9eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j9]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j9array[2], cj9array[2], sj9array[2], tempj9array[1];
int numsolutions = 0;
for(int ij9 = 0; ij9 < numroots; ++ij9)
{
IkReal htj9 = zeror[ij9];
tempj9array[0]=((2.0)*(atan(htj9)));
for(int kj9 = 0; kj9 < 1; ++kj9)
{
j9array[numsolutions] = tempj9array[kj9];
if( j9array[numsolutions] > IKPI )
{
    j9array[numsolutions]-=IK2PI;
}
else if( j9array[numsolutions] < -IKPI )
{
    j9array[numsolutions]+=IK2PI;
}
sj9array[numsolutions] = IKsin(j9array[numsolutions]);
cj9array[numsolutions] = IKcos(j9array[numsolutions]);
numsolutions++;
}
}
bool j9valid[2]={true,true};
_nj9 = 2;
for(int ij9 = 0; ij9 < numsolutions; ++ij9)
    {
if( !j9valid[ij9] )
{
    continue;
}
    j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
htj9 = IKtan(j9/2);

_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < numsolutions; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x334=IKPowWithIntegerCheck(sj8,-1);
if(!x334.valid){
continue;
}
IkReal x333=x334.value;
CheckValue<IkReal> x335=IKPowWithIntegerCheck(cj7,-1);
if(!x335.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x333)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x333*(x335.value)*((((new_r11*sj8))+(((-1.0)*cj8*new_r21*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x333))+IKsqr((x333*(x335.value)*((((new_r11*sj8))+(((-1.0)*cj8*new_r21*sj7))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r21*x333), (x333*(x335.value)*((((new_r11*sj8))+(((-1.0)*cj8*new_r21*sj7))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x336=IKsin(j9);
IkReal x337=IKcos(j9);
IkReal x338=(cj7*new_r01);
IkReal x339=(cj8*sj7);
IkReal x340=((1.0)*cj7);
IkReal x341=(cj7*cj8);
IkReal x342=(cj7*x336);
IkReal x343=((1.0)*x337);
evalcond[0]=(new_r21+((sj8*x336)));
evalcond[1]=((((-1.0)*sj8*x343))+new_r20);
evalcond[2]=((((-1.0)*new_r10*x340))+((new_r00*sj7))+x336);
evalcond[3]=((((-1.0)*new_r11*x340))+((new_r01*sj7))+x337);
evalcond[4]=(((cj8*x336))+((new_r11*sj7))+x338);
evalcond[5]=(((x336*x341))+new_r01+((sj7*x337)));
evalcond[6]=((((-1.0)*cj8*x343))+((new_r10*sj7))+((cj7*new_r00)));
evalcond[7]=((((-1.0)*cj8*x337*x340))+new_r00+((sj7*x336)));
evalcond[8]=(((x336*x339))+(((-1.0)*x337*x340))+new_r11);
evalcond[9]=((((-1.0)*x336*x340))+new_r10+(((-1.0)*x339*x343)));
evalcond[10]=(((cj8*x338))+((new_r11*x339))+x336+((new_r21*sj8)));
evalcond[11]=(((new_r20*sj8))+((new_r00*x341))+((new_r10*x339))+(((-1.0)*x343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x345=IKPowWithIntegerCheck(sj8,-1);
if(!x345.valid){
continue;
}
IkReal x344=x345.value;
CheckValue<IkReal> x346=IKPowWithIntegerCheck(sj7,-1);
if(!x346.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x344)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x344*(x346.value)*(((((-1.0)*new_r01*sj8))+((cj7*cj8*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x344))+IKsqr((x344*(x346.value)*(((((-1.0)*new_r01*sj8))+((cj7*cj8*new_r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r21*x344), (x344*(x346.value)*(((((-1.0)*new_r01*sj8))+((cj7*cj8*new_r21))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x347=IKsin(j9);
IkReal x348=IKcos(j9);
IkReal x349=(cj7*new_r01);
IkReal x350=(cj8*sj7);
IkReal x351=((1.0)*cj7);
IkReal x352=(cj7*cj8);
IkReal x353=(cj7*x347);
IkReal x354=((1.0)*x348);
evalcond[0]=(((sj8*x347))+new_r21);
evalcond[1]=((((-1.0)*sj8*x354))+new_r20);
evalcond[2]=(((new_r00*sj7))+x347+(((-1.0)*new_r10*x351)));
evalcond[3]=(((new_r01*sj7))+x348+(((-1.0)*new_r11*x351)));
evalcond[4]=(((new_r11*sj7))+((cj8*x347))+x349);
evalcond[5]=(((x347*x352))+new_r01+((sj7*x348)));
evalcond[6]=(((new_r10*sj7))+(((-1.0)*cj8*x354))+((cj7*new_r00)));
evalcond[7]=((((-1.0)*cj8*x348*x351))+new_r00+((sj7*x347)));
evalcond[8]=((((-1.0)*x348*x351))+((x347*x350))+new_r11);
evalcond[9]=((((-1.0)*x347*x351))+new_r10+(((-1.0)*x350*x354)));
evalcond[10]=(((cj8*x349))+x347+((new_r21*sj8))+((new_r11*x350)));
evalcond[11]=(((new_r20*sj8))+(((-1.0)*x354))+((new_r10*x350))+((new_r00*x352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x355=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x355.valid){
continue;
}
CheckValue<IkReal> x356 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x356.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x355.value)))+(x356.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x357=IKsin(j9);
IkReal x358=IKcos(j9);
IkReal x359=(cj7*new_r01);
IkReal x360=(cj8*sj7);
IkReal x361=((1.0)*cj7);
IkReal x362=(cj7*cj8);
IkReal x363=(cj7*x357);
IkReal x364=((1.0)*x358);
evalcond[0]=(new_r21+((sj8*x357)));
evalcond[1]=((((-1.0)*sj8*x364))+new_r20);
evalcond[2]=(((new_r00*sj7))+x357+(((-1.0)*new_r10*x361)));
evalcond[3]=(((new_r01*sj7))+x358+(((-1.0)*new_r11*x361)));
evalcond[4]=(((cj8*x357))+((new_r11*sj7))+x359);
evalcond[5]=(((sj7*x358))+new_r01+((x357*x362)));
evalcond[6]=(((new_r10*sj7))+(((-1.0)*cj8*x364))+((cj7*new_r00)));
evalcond[7]=(((sj7*x357))+new_r00+(((-1.0)*cj8*x358*x361)));
evalcond[8]=((((-1.0)*x358*x361))+new_r11+((x357*x360)));
evalcond[9]=((((-1.0)*x360*x364))+new_r10+(((-1.0)*x357*x361)));
evalcond[10]=(((cj8*x359))+x357+((new_r21*sj8))+((new_r11*x360)));
evalcond[11]=(((new_r20*sj8))+(((-1.0)*x364))+((new_r00*x362))+((new_r10*x360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x365=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x365.valid){
continue;
}
CheckValue<IkReal> x366 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x366.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x365.value)))+(x366.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
evalcond[0]=(((sj8*(IKsin(j9))))+new_r21);
evalcond[1]=((((-1.0)*sj8*(IKcos(j9))))+new_r20);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
j7eval[0]=sj8;
j7eval[1]=IKsign(sj8);
j7eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=new_r12;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=0;
cj8=1.0;
j8=0;
IkReal x367=((1.0)*new_r11);
IkReal x368=((((-1.0)*new_r10*x367))+(((-1.0)*new_r00*new_r01)));
j7eval[0]=x368;
j7eval[1]=((IKabs((((new_r00*sj9))+(((-1.0)*sj9*x367)))))+(IKabs((((new_r10*sj9))+((new_r01*sj9))))));
j7eval[2]=IKsign(x368);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=0;
cj8=1.0;
j8=0;
IkReal x369=((((-1.0)*(new_r01*new_r01)))+(((-1.0)*(new_r11*new_r11))));
j7eval[0]=x369;
j7eval[1]=IKsign(x369);
j7eval[2]=((IKabs((((new_r11*sj9))+((cj9*new_r01)))))+(IKabs((((new_r01*sj9))+(((-1.0)*cj9*new_r11))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=0;
cj8=1.0;
j8=0;
IkReal x370=((1.0)*new_r11);
IkReal x371=((((-1.0)*new_r01*sj9))+(((-1.0)*cj9*x370)));
j7eval[0]=x371;
j7eval[1]=IKsign(x371);
j7eval[2]=((IKabs(((1.0)+(((-1.0)*new_r00*x370))+(((-1.0)*(cj9*cj9))))))+(IKabs((((cj9*sj9))+((new_r00*new_r01))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x372=((-1.0)*new_r01);
IkReal x374 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x374)==0){
continue;
}
IkReal x373=pow(x374,-0.5);
CheckValue<IkReal> x375 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x372),IKFAST_ATAN2_MAGTHRESH);
if(!x375.valid){
continue;
}
IkReal gconst6=((-1.0)*(x375.value));
IkReal gconst7=(new_r11*x373);
IkReal gconst8=(x372*x373);
CheckValue<IkReal> x376 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x376.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x376.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x377=((-1.0)*new_r01);
CheckValue<IkReal> x380 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x377),IKFAST_ATAN2_MAGTHRESH);
if(!x380.valid){
continue;
}
IkReal x378=((-1.0)*(x380.value));
IkReal x379=x373;
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst7;
cj9=gconst8;
j9=x378;
IkReal gconst6=x378;
IkReal gconst7=(new_r11*x379);
IkReal gconst8=(x377*x379);
IkReal x381=new_r11*new_r11;
IkReal x382=(new_r10*new_r11);
IkReal x383=((((-1.0)*x382))+(((-1.0)*new_r00*new_r01)));
IkReal x384=x373;
IkReal x385=(new_r11*x384);
j7eval[0]=x383;
j7eval[1]=((IKabs((((new_r01*x385))+((x382*x384)))))+(IKabs((((new_r00*x385))+(((-1.0)*x381*x384))))));
j7eval[2]=IKsign(x383);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x386=((-1.0)*new_r01);
CheckValue<IkReal> x389 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x386),IKFAST_ATAN2_MAGTHRESH);
if(!x389.valid){
continue;
}
IkReal x387=((-1.0)*(x389.value));
IkReal x388=x373;
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst7;
cj9=gconst8;
j9=x387;
IkReal gconst6=x387;
IkReal gconst7=(new_r11*x388);
IkReal gconst8=(x386*x388);
IkReal x390=new_r11*new_r11;
CheckValue<IkReal> x393=IKPowWithIntegerCheck(((new_r01*new_r01)+x390),-1);
if(!x393.valid){
continue;
}
IkReal x391=x393.value;
IkReal x392=(x390*x391);
j7eval[0]=((IKabs((((new_r00*new_r01*x392))+((new_r00*x391*(new_r01*new_r01*new_r01)))+((new_r01*new_r11*x391)))))+(IKabs((((new_r01*new_r10))+x392))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x394=((-1.0)*new_r01);
CheckValue<IkReal> x397 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x394),IKFAST_ATAN2_MAGTHRESH);
if(!x397.valid){
continue;
}
IkReal x395=((-1.0)*(x397.value));
IkReal x396=x373;
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst7;
cj9=gconst8;
j9=x395;
IkReal gconst6=x395;
IkReal gconst7=(new_r11*x396);
IkReal gconst8=(x394*x396);
IkReal x398=new_r01*new_r01;
IkReal x399=new_r11*new_r11;
CheckValue<IkReal> x406=IKPowWithIntegerCheck((x399+x398),-1);
if(!x406.valid){
continue;
}
IkReal x400=x406.value;
IkReal x401=(x399*x400);
CheckValue<IkReal> x407=IKPowWithIntegerCheck(((((-1.0)*x399))+(((-1.0)*x398))),-1);
if(!x407.valid){
continue;
}
IkReal x402=x407.value;
IkReal x403=((1.0)*x402);
IkReal x404=(new_r11*x403);
IkReal x405=(new_r01*x403);
j7eval[0]=((IKabs(((((-1.0)*new_r01*x404*(new_r11*new_r11)))+(((-1.0)*new_r01*x404))+(((-1.0)*x404*(new_r01*new_r01*new_r01))))))+(IKabs((((x400*(x398*x398)))+((x398*x401))+(((-1.0)*x401))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x408=IKPowWithIntegerCheck(gconst8,-1);
if(!x408.valid){
continue;
}
sj7array[0]=(new_r10*(x408.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x409=IKcos(j7);
IkReal x410=IKsin(j7);
IkReal x411=((-1.0)*x409);
evalcond[0]=(new_r01*x409);
evalcond[1]=(new_r10*x411);
evalcond[2]=(gconst8*x411);
evalcond[3]=(gconst8+((new_r01*x410)));
evalcond[4]=(((gconst8*x410))+new_r01);
evalcond[5]=((((-1.0)*gconst8))+((new_r10*x410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst7;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x412=((-1.0)*new_r01);
CheckValue<IkReal> x414 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x412),IKFAST_ATAN2_MAGTHRESH);
if(!x414.valid){
continue;
}
IkReal x413=((-1.0)*(x414.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst7;
cj9=gconst8;
j9=x413;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst6=x413;
IkReal gconst7=new_r11;
IkReal gconst8=x412;
j7eval[0]=-1.0;
j7eval[1]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
j7eval[2]=-1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x415=((-1.0)*new_r01);
CheckValue<IkReal> x417 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x415),IKFAST_ATAN2_MAGTHRESH);
if(!x417.valid){
continue;
}
IkReal x416=((-1.0)*(x417.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst7;
cj9=gconst8;
j9=x416;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst6=x416;
IkReal gconst7=new_r11;
IkReal gconst8=x415;
j7eval[0]=-1.0;
j7eval[1]=-1.0;
j7eval[2]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x418=((-1.0)*new_r01);
CheckValue<IkReal> x420 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x418),IKFAST_ATAN2_MAGTHRESH);
if(!x420.valid){
continue;
}
IkReal x419=((-1.0)*(x420.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst7;
cj9=gconst8;
j9=x419;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst6=x419;
IkReal gconst7=new_r11;
IkReal gconst8=x418;
j7eval[0]=1.0;
j7eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j7eval[2]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x421=((1.0)*new_r01);
CheckValue<IkReal> x422=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*x421))+((gconst7*new_r11)))),-1);
if(!x422.valid){
continue;
}
CheckValue<IkReal> x423 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst7*gconst7)))+(new_r01*new_r01))),IkReal(((((-1.0)*new_r11*x421))+((gconst7*gconst8)))),IKFAST_ATAN2_MAGTHRESH);
if(!x423.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x422.value)))+(x423.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x424=IKsin(j7);
IkReal x425=IKcos(j7);
IkReal x426=((1.0)*gconst8);
IkReal x427=(gconst7*x424);
IkReal x428=(gconst7*x425);
IkReal x429=(x425*x426);
evalcond[0]=(gconst7+((new_r11*x424))+((new_r01*x425)));
evalcond[1]=(((gconst8*x424))+x428+new_r01);
evalcond[2]=((((-1.0)*x429))+x427);
evalcond[3]=(gconst8+(((-1.0)*new_r11*x425))+((new_r01*x424)));
evalcond[4]=((((-1.0)*x429))+x427+new_r11);
evalcond[5]=((((-1.0)*x428))+(((-1.0)*x424*x426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x430=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst8*gconst8)))+(((-1.0)*(gconst7*gconst7))))),-1);
if(!x430.valid){
continue;
}
CheckValue<IkReal> x431 = IKatan2WithCheck(IkReal((gconst8*new_r01)),IkReal((gconst7*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x431.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x430.value)))+(x431.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x432=IKsin(j7);
IkReal x433=IKcos(j7);
IkReal x434=((1.0)*gconst8);
IkReal x435=(gconst7*x432);
IkReal x436=(gconst7*x433);
IkReal x437=(x433*x434);
evalcond[0]=(((new_r01*x433))+gconst7+((new_r11*x432)));
evalcond[1]=(((gconst8*x432))+x436+new_r01);
evalcond[2]=((((-1.0)*x437))+x435);
evalcond[3]=(((new_r01*x432))+gconst8+(((-1.0)*new_r11*x433)));
evalcond[4]=((((-1.0)*x437))+x435+new_r11);
evalcond[5]=((((-1.0)*x436))+(((-1.0)*x432*x434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x438=IKPowWithIntegerCheck(IKsign((((gconst8*new_r01))+(((-1.0)*gconst7*new_r11)))),-1);
if(!x438.valid){
continue;
}
CheckValue<IkReal> x439 = IKatan2WithCheck(IkReal(gconst7*gconst7),IkReal(((-1.0)*gconst7*gconst8)),IKFAST_ATAN2_MAGTHRESH);
if(!x439.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x438.value)))+(x439.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x440=IKsin(j7);
IkReal x441=IKcos(j7);
IkReal x442=((1.0)*gconst8);
IkReal x443=(gconst7*x440);
IkReal x444=(gconst7*x441);
IkReal x445=(x441*x442);
evalcond[0]=(((new_r01*x441))+gconst7+((new_r11*x440)));
evalcond[1]=(((gconst8*x440))+x444+new_r01);
evalcond[2]=((((-1.0)*x445))+x443);
evalcond[3]=(((new_r01*x440))+gconst8+(((-1.0)*new_r11*x441)));
evalcond[4]=((((-1.0)*x445))+x443+new_r11);
evalcond[5]=((((-1.0)*x444))+(((-1.0)*x440*x442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x447 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x447.valid){
continue;
}
IkReal x446=((-1.0)*(x447.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst7;
cj9=gconst8;
j9=x446;
new_r01=0;
new_r10=0;
IkReal gconst6=x446;
IkReal x448 = new_r11*new_r11;
if(IKabs(x448)==0){
continue;
}
IkReal gconst7=(new_r11*(pow(x448,-0.5)));
IkReal gconst8=0;
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x450 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x450.valid){
continue;
}
IkReal x449=((-1.0)*(x450.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst7;
cj9=gconst8;
j9=x449;
new_r01=0;
new_r10=0;
IkReal gconst6=x449;
IkReal x451 = new_r11*new_r11;
if(IKabs(x451)==0){
continue;
}
IkReal gconst7=(new_r11*(pow(x451,-0.5)));
IkReal gconst8=0;
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x452=IKPowWithIntegerCheck(gconst7,-1);
if(!x452.valid){
continue;
}
sj7array[0]=((-1.0)*new_r00*(x452.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x453=IKcos(j7);
IkReal x454=IKsin(j7);
evalcond[0]=(gconst7*x453);
evalcond[1]=(new_r00*x453);
evalcond[2]=((-1.0)*new_r11*x453);
evalcond[3]=(((new_r00*x454))+gconst7);
evalcond[4]=(((new_r11*x454))+gconst7);
evalcond[5]=(((gconst7*x454))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x455=IKPowWithIntegerCheck(new_r11,-1);
if(!x455.valid){
continue;
}
sj7array[0]=((-1.0)*gconst7*(x455.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x456=IKcos(j7);
IkReal x457=IKsin(j7);
IkReal x458=(gconst7*x457);
evalcond[0]=(gconst7*x456);
evalcond[1]=(new_r00*x456);
evalcond[2]=((-1.0)*new_r11*x456);
evalcond[3]=(((new_r00*x457))+gconst7);
evalcond[4]=(x458+new_r00);
evalcond[5]=(x458+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x459=IKPowWithIntegerCheck(new_r00,-1);
if(!x459.valid){
continue;
}
sj7array[0]=((-1.0)*gconst7*(x459.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x460=IKcos(j7);
IkReal x461=IKsin(j7);
IkReal x462=(gconst7*x461);
evalcond[0]=(gconst7*x460);
evalcond[1]=(new_r00*x460);
evalcond[2]=((-1.0)*new_r11*x460);
evalcond[3]=(((new_r11*x461))+gconst7);
evalcond[4]=(x462+new_r00);
evalcond[5]=(x462+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r11);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
IkReal x463=((-1.0)*new_r01);
CheckValue<IkReal> x465 = IKatan2WithCheck(IkReal(0),IkReal(x463),IKFAST_ATAN2_MAGTHRESH);
if(!x465.valid){
continue;
}
IkReal x464=((-1.0)*(x465.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst7;
cj9=gconst8;
j9=x464;
new_r11=0;
IkReal gconst6=x464;
IkReal gconst7=0;
IkReal x466 = new_r01*new_r01;
if(IKabs(x466)==0){
continue;
}
IkReal gconst8=(x463*(pow(x466,-0.5)));
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x467=((-1.0)*new_r01);
CheckValue<IkReal> x469 = IKatan2WithCheck(IkReal(0),IkReal(x467),IKFAST_ATAN2_MAGTHRESH);
if(!x469.valid){
continue;
}
IkReal x468=((-1.0)*(x469.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst7;
cj9=gconst8;
j9=x468;
new_r11=0;
IkReal gconst6=x468;
IkReal gconst7=0;
IkReal x470 = new_r01*new_r01;
if(IKabs(x470)==0){
continue;
}
IkReal gconst8=(x467*(pow(x470,-0.5)));
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x471=((-1.0)*new_r01);
CheckValue<IkReal> x473 = IKatan2WithCheck(IkReal(0),IkReal(x471),IKFAST_ATAN2_MAGTHRESH);
if(!x473.valid){
continue;
}
IkReal x472=((-1.0)*(x473.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst7;
cj9=gconst8;
j9=x472;
new_r11=0;
IkReal gconst6=x472;
IkReal gconst7=0;
IkReal x474 = new_r01*new_r01;
if(IKabs(x474)==0){
continue;
}
IkReal gconst8=(x471*(pow(x474,-0.5)));
j7eval[0]=new_r01;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x475=IKPowWithIntegerCheck(new_r01,-1);
if(!x475.valid){
continue;
}
CheckValue<IkReal> x476=IKPowWithIntegerCheck(gconst8,-1);
if(!x476.valid){
continue;
}
if( IKabs(((-1.0)*gconst8*(x475.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x476.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst8*(x475.value)))+IKsqr((new_r00*(x476.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst8*(x475.value)), (new_r00*(x476.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x477=IKcos(j7);
IkReal x478=IKsin(j7);
IkReal x479=((1.0)*gconst8);
evalcond[0]=(new_r01*x477);
evalcond[1]=((-1.0)*gconst8*x477);
evalcond[2]=(((new_r01*x478))+gconst8);
evalcond[3]=(((gconst8*x478))+new_r01);
evalcond[4]=((((-1.0)*x477*x479))+new_r00);
evalcond[5]=((((-1.0)*x478*x479))+new_r10);
evalcond[6]=((((-1.0)*new_r10*x477))+((new_r00*x478)));
evalcond[7]=(((new_r10*x478))+(((-1.0)*x479))+((new_r00*x477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x480 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x480.valid){
continue;
}
CheckValue<IkReal> x481=IKPowWithIntegerCheck(IKsign(gconst8),-1);
if(!x481.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x480.value)+(((1.5707963267949)*(x481.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x482=IKcos(j7);
IkReal x483=IKsin(j7);
IkReal x484=((1.0)*gconst8);
evalcond[0]=(new_r01*x482);
evalcond[1]=((-1.0)*gconst8*x482);
evalcond[2]=(gconst8+((new_r01*x483)));
evalcond[3]=(new_r01+((gconst8*x483)));
evalcond[4]=((((-1.0)*x482*x484))+new_r00);
evalcond[5]=((((-1.0)*x483*x484))+new_r10);
evalcond[6]=((((-1.0)*new_r10*x482))+((new_r00*x483)));
evalcond[7]=((((-1.0)*x484))+((new_r10*x483))+((new_r00*x482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x485=IKPowWithIntegerCheck(IKsign(gconst8),-1);
if(!x485.valid){
continue;
}
CheckValue<IkReal> x486 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x486.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x485.value)))+(x486.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x487=IKcos(j7);
IkReal x488=IKsin(j7);
IkReal x489=((1.0)*gconst8);
evalcond[0]=(new_r01*x487);
evalcond[1]=((-1.0)*gconst8*x487);
evalcond[2]=(gconst8+((new_r01*x488)));
evalcond[3]=(new_r01+((gconst8*x488)));
evalcond[4]=((((-1.0)*x487*x489))+new_r00);
evalcond[5]=((((-1.0)*x488*x489))+new_r10);
evalcond[6]=((((-1.0)*new_r10*x487))+((new_r00*x488)));
evalcond[7]=((((-1.0)*x489))+((new_r10*x488))+((new_r00*x487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x490=((1.0)*new_r01);
CheckValue<IkReal> x491 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst7*gconst7)))+(new_r01*new_r01))),IkReal(((((-1.0)*new_r11*x490))+((gconst7*gconst8)))),IKFAST_ATAN2_MAGTHRESH);
if(!x491.valid){
continue;
}
CheckValue<IkReal> x492=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*x490))+((gconst7*new_r11)))),-1);
if(!x492.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x491.value)+(((1.5707963267949)*(x492.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x493=IKsin(j7);
IkReal x494=IKcos(j7);
IkReal x495=(gconst7*x493);
IkReal x496=(gconst7*x494);
IkReal x497=((1.0)*x494);
IkReal x498=(gconst8*x493);
IkReal x499=(gconst8*x497);
evalcond[0]=(gconst7+((new_r11*x493))+((new_r01*x494)));
evalcond[1]=(x498+x496+new_r01);
evalcond[2]=((((-1.0)*new_r10*x497))+gconst7+((new_r00*x493)));
evalcond[3]=(gconst8+(((-1.0)*new_r11*x497))+((new_r01*x493)));
evalcond[4]=((((-1.0)*x499))+x495+new_r00);
evalcond[5]=((((-1.0)*x499))+x495+new_r11);
evalcond[6]=((((-1.0)*gconst8))+((new_r10*x493))+((new_r00*x494)));
evalcond[7]=((((-1.0)*x496))+(((-1.0)*x498))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x500=((1.0)*gconst7);
CheckValue<IkReal> x501 = IKatan2WithCheck(IkReal(((gconst7*gconst7)+((new_r01*new_r10)))),IkReal((((new_r00*new_r01))+(((-1.0)*gconst8*x500)))),IKFAST_ATAN2_MAGTHRESH);
if(!x501.valid){
continue;
}
CheckValue<IkReal> x502=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r00*x500))+(((-1.0)*gconst8*new_r10)))),-1);
if(!x502.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x501.value)+(((1.5707963267949)*(x502.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x503=IKsin(j7);
IkReal x504=IKcos(j7);
IkReal x505=(gconst7*x503);
IkReal x506=(gconst7*x504);
IkReal x507=((1.0)*x504);
IkReal x508=(gconst8*x503);
IkReal x509=(gconst8*x507);
evalcond[0]=(gconst7+((new_r11*x503))+((new_r01*x504)));
evalcond[1]=(x508+x506+new_r01);
evalcond[2]=(gconst7+((new_r00*x503))+(((-1.0)*new_r10*x507)));
evalcond[3]=(gconst8+(((-1.0)*new_r11*x507))+((new_r01*x503)));
evalcond[4]=((((-1.0)*x509))+x505+new_r00);
evalcond[5]=((((-1.0)*x509))+x505+new_r11);
evalcond[6]=((((-1.0)*gconst8))+((new_r10*x503))+((new_r00*x504)));
evalcond[7]=(new_r10+(((-1.0)*x506))+(((-1.0)*x508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x510=((1.0)*new_r11);
CheckValue<IkReal> x511=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x510))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x511.valid){
continue;
}
CheckValue<IkReal> x512 = IKatan2WithCheck(IkReal((((gconst7*new_r01))+((gconst7*new_r10)))),IkReal(((((-1.0)*gconst7*x510))+((gconst7*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x512.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x511.value)))+(x512.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x513=IKsin(j7);
IkReal x514=IKcos(j7);
IkReal x515=(gconst7*x513);
IkReal x516=(gconst7*x514);
IkReal x517=((1.0)*x514);
IkReal x518=(gconst8*x513);
IkReal x519=(gconst8*x517);
evalcond[0]=(((new_r01*x514))+((new_r11*x513))+gconst7);
evalcond[1]=(x518+x516+new_r01);
evalcond[2]=(((new_r00*x513))+(((-1.0)*new_r10*x517))+gconst7);
evalcond[3]=(((new_r01*x513))+(((-1.0)*new_r11*x517))+gconst8);
evalcond[4]=(x515+new_r00+(((-1.0)*x519)));
evalcond[5]=(x515+new_r11+(((-1.0)*x519)));
evalcond[6]=(((new_r00*x514))+((new_r10*x513))+(((-1.0)*gconst8)));
evalcond[7]=((((-1.0)*x518))+(((-1.0)*x516))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x520=((-1.0)*new_r11);
IkReal x522 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x522)==0){
continue;
}
IkReal x521=pow(x522,-0.5);
CheckValue<IkReal> x523 = IKatan2WithCheck(IkReal(x520),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x523.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x523.value))));
IkReal gconst10=(x520*x521);
IkReal gconst11=((1.0)*new_r01*x521);
CheckValue<IkReal> x524 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x524.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x524.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x525=((-1.0)*new_r11);
CheckValue<IkReal> x528 = IKatan2WithCheck(IkReal(x525),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x528.valid){
continue;
}
IkReal x526=((1.0)*(x528.value));
IkReal x527=x521;
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x526)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x526)));
IkReal gconst10=(x525*x527);
IkReal gconst11=((1.0)*new_r01*x527);
IkReal x529=new_r11*new_r11;
IkReal x530=((1.0)*new_r01);
IkReal x531=((1.0)*new_r10);
IkReal x532=((((-1.0)*new_r00*x530))+(((-1.0)*new_r11*x531)));
IkReal x533=x521;
IkReal x534=(new_r11*x533);
j7eval[0]=x532;
j7eval[1]=((IKabs(((((-1.0)*new_r00*x534))+((x529*x533)))))+(IKabs(((((-1.0)*x530*x534))+(((-1.0)*x531*x534))))));
j7eval[2]=IKsign(x532);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x535=((-1.0)*new_r11);
CheckValue<IkReal> x538 = IKatan2WithCheck(IkReal(x535),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x538.valid){
continue;
}
IkReal x536=((1.0)*(x538.value));
IkReal x537=x521;
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x536)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x536)));
IkReal gconst10=(x535*x537);
IkReal gconst11=((1.0)*new_r01*x537);
IkReal x539=new_r11*new_r11;
IkReal x540=new_r01*new_r01*new_r01;
CheckValue<IkReal> x544=IKPowWithIntegerCheck(((new_r01*new_r01)+x539),-1);
if(!x544.valid){
continue;
}
IkReal x541=x544.value;
IkReal x542=(x539*x541);
IkReal x543=(x540*x541);
j7eval[0]=((IKabs((((new_r00*x543))+((new_r01*new_r11*x541))+((new_r00*new_r01*x542)))))+(IKabs((((new_r10*x543))+((new_r01*new_r10*x542))+x542))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x545=((-1.0)*new_r11);
CheckValue<IkReal> x548 = IKatan2WithCheck(IkReal(x545),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x548.valid){
continue;
}
IkReal x546=((1.0)*(x548.value));
IkReal x547=x521;
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x546)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x546)));
IkReal gconst10=(x545*x547);
IkReal gconst11=((1.0)*new_r01*x547);
IkReal x549=new_r01*new_r01;
IkReal x550=new_r11*new_r11;
CheckValue<IkReal> x557=IKPowWithIntegerCheck((x550+x549),-1);
if(!x557.valid){
continue;
}
IkReal x551=x557.value;
IkReal x552=(x550*x551);
CheckValue<IkReal> x558=IKPowWithIntegerCheck(((((-1.0)*x550))+(((-1.0)*x549))),-1);
if(!x558.valid){
continue;
}
IkReal x553=x558.value;
IkReal x554=((1.0)*x553);
IkReal x555=(new_r11*x554);
IkReal x556=(new_r01*x554);
j7eval[0]=((IKabs(((((-1.0)*x552))+((x549*x552))+((x551*(x549*x549))))))+(IKabs(((((-1.0)*new_r01*x555*(new_r11*new_r11)))+(((-1.0)*new_r01*x555))+(((-1.0)*x555*(new_r01*new_r01*new_r01)))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x559=IKPowWithIntegerCheck(gconst11,-1);
if(!x559.valid){
continue;
}
sj7array[0]=(new_r10*(x559.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x560=IKcos(j7);
IkReal x561=IKsin(j7);
IkReal x562=((-1.0)*x560);
evalcond[0]=(new_r01*x560);
evalcond[1]=(new_r10*x562);
evalcond[2]=(gconst11*x562);
evalcond[3]=(gconst11+((new_r01*x561)));
evalcond[4]=(((gconst11*x561))+new_r01);
evalcond[5]=((((-1.0)*gconst11))+((new_r10*x561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x563=((-1.0)*new_r11);
CheckValue<IkReal> x565 = IKatan2WithCheck(IkReal(x563),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x565.valid){
continue;
}
IkReal x564=((1.0)*(x565.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x564)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x564)));
IkReal gconst10=x563;
IkReal gconst11=((1.0)*new_r01);
j7eval[0]=1.0;
j7eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r01*new_r01))))))+(IKabs(((1.0)*new_r01*new_r11))));
j7eval[2]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[4];
IkReal x566=((-1.0)*new_r11);
CheckValue<IkReal> x568 = IKatan2WithCheck(IkReal(x566),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x568.valid){
continue;
}
IkReal x567=((1.0)*(x568.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x567)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x567)));
IkReal gconst10=x566;
IkReal gconst11=((1.0)*new_r01);
j7eval[0]=-1.0;
j7eval[1]=-1.0;
j7eval[2]=new_r01;
j7eval[3]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  || IKabs(j7eval[3]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x569=((-1.0)*new_r11);
CheckValue<IkReal> x571 = IKatan2WithCheck(IkReal(x569),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x571.valid){
continue;
}
IkReal x570=((1.0)*(x571.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x570)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x570)));
IkReal gconst10=x569;
IkReal gconst11=((1.0)*new_r01);
j7eval[0]=-1.0;
j7eval[1]=-1.0;
j7eval[2]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01)))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x572=((1.0)*new_r01);
CheckValue<IkReal> x573 = IKatan2WithCheck(IkReal(((new_r01*new_r01)+(((-1.0)*(gconst10*gconst10))))),IkReal((((gconst10*gconst11))+(((-1.0)*new_r11*x572)))),IKFAST_ATAN2_MAGTHRESH);
if(!x573.valid){
continue;
}
CheckValue<IkReal> x574=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*x572))+((gconst10*new_r11)))),-1);
if(!x574.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x573.value)+(((1.5707963267949)*(x574.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x575=IKcos(j7);
IkReal x576=IKsin(j7);
IkReal x577=(gconst10*x576);
IkReal x578=((1.0)*x575);
IkReal x579=(gconst11*x576);
IkReal x580=(gconst11*x578);
evalcond[0]=(((new_r11*x576))+((new_r01*x575))+gconst10);
evalcond[1]=(x579+((gconst10*x575))+new_r01);
evalcond[2]=(x577+(((-1.0)*x580)));
evalcond[3]=(((new_r01*x576))+gconst11+(((-1.0)*new_r11*x578)));
evalcond[4]=(x577+new_r11+(((-1.0)*x580)));
evalcond[5]=((((-1.0)*x579))+(((-1.0)*gconst10*x578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x581=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst11*gconst11)))+(((-1.0)*(gconst10*gconst10))))),-1);
if(!x581.valid){
continue;
}
CheckValue<IkReal> x582 = IKatan2WithCheck(IkReal((gconst11*new_r01)),IkReal((gconst10*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x582.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x581.value)))+(x582.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x583=IKcos(j7);
IkReal x584=IKsin(j7);
IkReal x585=(gconst10*x584);
IkReal x586=((1.0)*x583);
IkReal x587=(gconst11*x584);
IkReal x588=(gconst11*x586);
evalcond[0]=(gconst10+((new_r01*x583))+((new_r11*x584)));
evalcond[1]=(x587+new_r01+((gconst10*x583)));
evalcond[2]=(x585+(((-1.0)*x588)));
evalcond[3]=(gconst11+(((-1.0)*new_r11*x586))+((new_r01*x584)));
evalcond[4]=(x585+new_r11+(((-1.0)*x588)));
evalcond[5]=((((-1.0)*gconst10*x586))+(((-1.0)*x587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x589=IKPowWithIntegerCheck(IKsign((((gconst11*new_r01))+(((-1.0)*gconst10*new_r11)))),-1);
if(!x589.valid){
continue;
}
CheckValue<IkReal> x590 = IKatan2WithCheck(IkReal(gconst10*gconst10),IkReal(((-1.0)*gconst10*gconst11)),IKFAST_ATAN2_MAGTHRESH);
if(!x590.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x589.value)))+(x590.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x591=IKcos(j7);
IkReal x592=IKsin(j7);
IkReal x593=(gconst10*x592);
IkReal x594=((1.0)*x591);
IkReal x595=(gconst11*x592);
IkReal x596=(gconst11*x594);
evalcond[0]=(((new_r11*x592))+gconst10+((new_r01*x591)));
evalcond[1]=(((gconst10*x591))+x595+new_r01);
evalcond[2]=((((-1.0)*x596))+x593);
evalcond[3]=((((-1.0)*new_r11*x594))+gconst11+((new_r01*x592)));
evalcond[4]=((((-1.0)*x596))+x593+new_r11);
evalcond[5]=((((-1.0)*x595))+(((-1.0)*gconst10*x594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
IkReal x597=((-1.0)*new_r11);
CheckValue<IkReal> x599 = IKatan2WithCheck(IkReal(x597),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x599.valid){
continue;
}
IkReal x598=((1.0)*(x599.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x598)));
new_r01=0;
new_r10=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x598)));
IkReal x600 = new_r11*new_r11;
if(IKabs(x600)==0){
continue;
}
IkReal gconst10=(x597*(pow(x600,-0.5)));
IkReal gconst11=0;
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x601=((-1.0)*new_r11);
CheckValue<IkReal> x603 = IKatan2WithCheck(IkReal(x601),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x603.valid){
continue;
}
IkReal x602=((1.0)*(x603.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x602)));
new_r01=0;
new_r10=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x602)));
IkReal x604 = new_r11*new_r11;
if(IKabs(x604)==0){
continue;
}
IkReal gconst10=(x601*(pow(x604,-0.5)));
IkReal gconst11=0;
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x605=IKPowWithIntegerCheck(gconst10,-1);
if(!x605.valid){
continue;
}
sj7array[0]=((-1.0)*new_r00*(x605.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x606=IKcos(j7);
IkReal x607=IKsin(j7);
evalcond[0]=(gconst10*x606);
evalcond[1]=(new_r00*x606);
evalcond[2]=((-1.0)*new_r11*x606);
evalcond[3]=(gconst10+((new_r00*x607)));
evalcond[4]=(gconst10+((new_r11*x607)));
evalcond[5]=(new_r11+((gconst10*x607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x608=IKPowWithIntegerCheck(new_r11,-1);
if(!x608.valid){
continue;
}
sj7array[0]=((-1.0)*gconst10*(x608.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x609=IKcos(j7);
IkReal x610=IKsin(j7);
IkReal x611=(gconst10*x610);
evalcond[0]=(gconst10*x609);
evalcond[1]=(new_r00*x609);
evalcond[2]=((-1.0)*new_r11*x609);
evalcond[3]=(gconst10+((new_r00*x610)));
evalcond[4]=(x611+new_r00);
evalcond[5]=(x611+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x612=IKPowWithIntegerCheck(new_r00,-1);
if(!x612.valid){
continue;
}
sj7array[0]=((-1.0)*gconst10*(x612.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x613=IKcos(j7);
IkReal x614=IKsin(j7);
IkReal x615=(gconst10*x614);
evalcond[0]=(gconst10*x613);
evalcond[1]=(new_r00*x613);
evalcond[2]=((-1.0)*new_r11*x613);
evalcond[3]=(gconst10+((new_r11*x614)));
evalcond[4]=(x615+new_r00);
evalcond[5]=(x615+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r11);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x617 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x617.valid){
continue;
}
IkReal x616=((1.0)*(x617.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x616)));
new_r11=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x616)));
IkReal gconst10=0;
IkReal x618 = new_r01*new_r01;
if(IKabs(x618)==0){
continue;
}
IkReal gconst11=((1.0)*new_r01*(pow(x618,-0.5)));
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x620 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x620.valid){
continue;
}
IkReal x619=((1.0)*(x620.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x619)));
new_r11=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x619)));
IkReal gconst10=0;
IkReal x621 = new_r01*new_r01;
if(IKabs(x621)==0){
continue;
}
IkReal gconst11=((1.0)*new_r01*(pow(x621,-0.5)));
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x623 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x623.valid){
continue;
}
IkReal x622=((1.0)*(x623.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x622)));
new_r11=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x622)));
IkReal gconst10=0;
IkReal x624 = new_r01*new_r01;
if(IKabs(x624)==0){
continue;
}
IkReal gconst11=((1.0)*new_r01*(pow(x624,-0.5)));
j7eval[0]=new_r01;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x625=IKPowWithIntegerCheck(new_r01,-1);
if(!x625.valid){
continue;
}
CheckValue<IkReal> x626=IKPowWithIntegerCheck(gconst11,-1);
if(!x626.valid){
continue;
}
if( IKabs(((-1.0)*gconst11*(x625.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x626.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst11*(x625.value)))+IKsqr((new_r00*(x626.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst11*(x625.value)), (new_r00*(x626.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x627=IKcos(j7);
IkReal x628=IKsin(j7);
IkReal x629=(gconst11*x628);
IkReal x630=((1.0)*x627);
evalcond[0]=(new_r01*x627);
evalcond[1]=((-1.0)*gconst11*x627);
evalcond[2]=(gconst11+((new_r01*x628)));
evalcond[3]=(x629+new_r01);
evalcond[4]=(new_r00+(((-1.0)*gconst11*x630)));
evalcond[5]=((((-1.0)*x629))+new_r10);
evalcond[6]=(((new_r00*x628))+(((-1.0)*new_r10*x630)));
evalcond[7]=(((new_r00*x627))+((new_r10*x628))+(((-1.0)*gconst11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x631=IKPowWithIntegerCheck(IKsign(gconst11),-1);
if(!x631.valid){
continue;
}
CheckValue<IkReal> x632 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x632.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x631.value)))+(x632.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x633=IKcos(j7);
IkReal x634=IKsin(j7);
IkReal x635=(gconst11*x634);
IkReal x636=((1.0)*x633);
evalcond[0]=(new_r01*x633);
evalcond[1]=((-1.0)*gconst11*x633);
evalcond[2]=(gconst11+((new_r01*x634)));
evalcond[3]=(x635+new_r01);
evalcond[4]=(new_r00+(((-1.0)*gconst11*x636)));
evalcond[5]=((((-1.0)*x635))+new_r10);
evalcond[6]=(((new_r00*x634))+(((-1.0)*new_r10*x636)));
evalcond[7]=(((new_r00*x633))+((new_r10*x634))+(((-1.0)*gconst11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x637=IKPowWithIntegerCheck(IKsign(gconst11),-1);
if(!x637.valid){
continue;
}
CheckValue<IkReal> x638 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x638.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x637.value)))+(x638.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x639=IKcos(j7);
IkReal x640=IKsin(j7);
IkReal x641=(gconst11*x640);
IkReal x642=((1.0)*x639);
evalcond[0]=(new_r01*x639);
evalcond[1]=((-1.0)*gconst11*x639);
evalcond[2]=(gconst11+((new_r01*x640)));
evalcond[3]=(x641+new_r01);
evalcond[4]=((((-1.0)*gconst11*x642))+new_r00);
evalcond[5]=((((-1.0)*x641))+new_r10);
evalcond[6]=((((-1.0)*new_r10*x642))+((new_r00*x640)));
evalcond[7]=(((new_r00*x639))+((new_r10*x640))+(((-1.0)*gconst11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x643=((1.0)*new_r01);
CheckValue<IkReal> x644 = IKatan2WithCheck(IkReal(((new_r01*new_r01)+(((-1.0)*(gconst10*gconst10))))),IkReal((((gconst10*gconst11))+(((-1.0)*new_r11*x643)))),IKFAST_ATAN2_MAGTHRESH);
if(!x644.valid){
continue;
}
CheckValue<IkReal> x645=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*x643))+((gconst10*new_r11)))),-1);
if(!x645.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x644.value)+(((1.5707963267949)*(x645.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x646=IKcos(j7);
IkReal x647=IKsin(j7);
IkReal x648=(gconst10*x647);
IkReal x649=(gconst11*x647);
IkReal x650=((1.0)*x646);
IkReal x651=(gconst11*x650);
evalcond[0]=(gconst10+((new_r11*x647))+((new_r01*x646)));
evalcond[1]=(((gconst10*x646))+x649+new_r01);
evalcond[2]=(gconst10+(((-1.0)*new_r10*x650))+((new_r00*x647)));
evalcond[3]=(gconst11+(((-1.0)*new_r11*x650))+((new_r01*x647)));
evalcond[4]=((((-1.0)*x651))+x648+new_r00);
evalcond[5]=((((-1.0)*x651))+x648+new_r11);
evalcond[6]=(((new_r10*x647))+((new_r00*x646))+(((-1.0)*gconst11)));
evalcond[7]=((((-1.0)*x649))+(((-1.0)*gconst10*x650))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x652=((1.0)*gconst10);
CheckValue<IkReal> x653=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r00*x652))+(((-1.0)*gconst11*new_r10)))),-1);
if(!x653.valid){
continue;
}
CheckValue<IkReal> x654 = IKatan2WithCheck(IkReal(((gconst10*gconst10)+((new_r01*new_r10)))),IkReal(((((-1.0)*gconst11*x652))+((new_r00*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x654.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x653.value)))+(x654.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x655=IKcos(j7);
IkReal x656=IKsin(j7);
IkReal x657=(gconst10*x656);
IkReal x658=(gconst11*x656);
IkReal x659=((1.0)*x655);
IkReal x660=(gconst11*x659);
evalcond[0]=(gconst10+((new_r01*x655))+((new_r11*x656)));
evalcond[1]=(((gconst10*x655))+x658+new_r01);
evalcond[2]=(gconst10+(((-1.0)*new_r10*x659))+((new_r00*x656)));
evalcond[3]=(gconst11+(((-1.0)*new_r11*x659))+((new_r01*x656)));
evalcond[4]=((((-1.0)*x660))+x657+new_r00);
evalcond[5]=((((-1.0)*x660))+x657+new_r11);
evalcond[6]=(((new_r10*x656))+((new_r00*x655))+(((-1.0)*gconst11)));
evalcond[7]=((((-1.0)*gconst10*x659))+(((-1.0)*x658))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x661=((1.0)*new_r11);
CheckValue<IkReal> x662 = IKatan2WithCheck(IkReal((((gconst10*new_r01))+((gconst10*new_r10)))),IkReal(((((-1.0)*gconst10*x661))+((gconst10*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x662.valid){
continue;
}
CheckValue<IkReal> x663=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x661))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x663.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x662.value)+(((1.5707963267949)*(x663.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x664=IKcos(j7);
IkReal x665=IKsin(j7);
IkReal x666=(gconst10*x665);
IkReal x667=(gconst11*x665);
IkReal x668=((1.0)*x664);
IkReal x669=(gconst11*x668);
evalcond[0]=(gconst10+((new_r11*x665))+((new_r01*x664)));
evalcond[1]=(x667+new_r01+((gconst10*x664)));
evalcond[2]=(gconst10+(((-1.0)*new_r10*x668))+((new_r00*x665)));
evalcond[3]=((((-1.0)*new_r11*x668))+gconst11+((new_r01*x665)));
evalcond[4]=((((-1.0)*x669))+x666+new_r00);
evalcond[5]=((((-1.0)*x669))+x666+new_r11);
evalcond[6]=(((new_r10*x665))+(((-1.0)*gconst11))+((new_r00*x664)));
evalcond[7]=((((-1.0)*gconst10*x668))+(((-1.0)*x667))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x670=IKsin(j7);
IkReal x671=IKcos(j7);
IkReal x672=((1.0)*x671);
evalcond[0]=(x670+new_r01);
evalcond[1]=(new_r00+(((-1.0)*x672)));
evalcond[2]=(new_r11+(((-1.0)*x672)));
evalcond[3]=((((-1.0)*x670))+new_r10);
evalcond[4]=(((new_r11*x670))+((new_r01*x671)));
evalcond[5]=(((new_r00*x670))+(((-1.0)*new_r10*x672)));
evalcond[6]=((-1.0)+((new_r00*x671))+((new_r10*x670)));
evalcond[7]=((1.0)+((new_r01*x670))+(((-1.0)*new_r11*x672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r00));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x673=IKcos(j7);
IkReal x674=IKsin(j7);
IkReal x675=((1.0)*x673);
evalcond[0]=(x673+new_r00);
evalcond[1]=(x673+new_r11);
evalcond[2]=(x674+new_r10);
evalcond[3]=((((-1.0)*x674))+new_r01);
evalcond[4]=(((new_r11*x674))+((new_r01*x673)));
evalcond[5]=(((new_r00*x674))+(((-1.0)*new_r10*x675)));
evalcond[6]=((1.0)+((new_r00*x673))+((new_r10*x674)));
evalcond[7]=((-1.0)+((new_r01*x674))+(((-1.0)*new_r11*x675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=0;
cj8=1.0;
j8=0;
new_r11=0;
new_r00=0;
j7eval[0]=new_r01;
j7eval[1]=IKsign(new_r01);
j7eval[2]=((IKabs(cj9))+(IKabs(sj9)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj8=0;
cj8=1.0;
j8=0;
new_r11=0;
new_r00=0;
j7eval[0]=new_r01;
j7eval[1]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj8=0;
cj8=1.0;
j8=0;
new_r11=0;
new_r00=0;
j7eval[0]=new_r01;
j7eval[1]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
sj7array[0]=new_r10;
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x676=IKcos(j7);
IkReal x677=IKsin(j7);
IkReal x678=((-1.0)*x676);
evalcond[0]=(new_r01*x676);
evalcond[1]=(x677+new_r01);
evalcond[2]=x678;
evalcond[3]=(new_r10*x678);
evalcond[4]=((1.0)+((new_r01*x677)));
evalcond[5]=((-1.0)+((new_r10*x677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
sj7array[0]=new_r01;
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x679=IKcos(j7);
IkReal x680=IKsin(j7);
evalcond[0]=x679;
evalcond[1]=(new_r01*x679);
evalcond[2]=(x680+new_r10);
evalcond[3]=((-1.0)*new_r10*x679);
evalcond[4]=((-1.0)+((new_r01*x680)));
evalcond[5]=((1.0)+((new_r10*x680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x682=IKPowWithIntegerCheck(new_r01,-1);
if(!x682.valid){
continue;
}
IkReal x681=x682.value;
CheckValue<IkReal> x683=IKPowWithIntegerCheck(sj9,-1);
if(!x683.valid){
continue;
}
CheckValue<IkReal> x684=IKPowWithIntegerCheck(x681,-2);
if(!x684.valid){
continue;
}
if( IKabs(((-1.0)*cj9*x681)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x681*(x683.value)*(((cj9*cj9)+(((-1.0)*(x684.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj9*x681))+IKsqr((x681*(x683.value)*(((cj9*cj9)+(((-1.0)*(x684.value)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*cj9*x681), (x681*(x683.value)*(((cj9*cj9)+(((-1.0)*(x684.value)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x685=IKcos(j7);
IkReal x686=IKsin(j7);
IkReal x687=((1.0)*cj9);
IkReal x688=((1.0)*x685);
evalcond[0]=(cj9+((new_r01*x686)));
evalcond[1]=(sj9+((new_r01*x685)));
evalcond[2]=((((-1.0)*new_r10*x688))+sj9);
evalcond[3]=((((-1.0)*x687))+((new_r10*x686)));
evalcond[4]=(((cj9*x686))+((sj9*x685))+new_r01);
evalcond[5]=((((-1.0)*x685*x687))+((sj9*x686)));
evalcond[6]=((((-1.0)*sj9*x688))+(((-1.0)*x686*x687))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x689=IKPowWithIntegerCheck(new_r01,-1);
if(!x689.valid){
continue;
}
CheckValue<IkReal> x690=IKPowWithIntegerCheck(new_r10,-1);
if(!x690.valid){
continue;
}
if( IKabs(((-1.0)*cj9*(x689.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj9*(x690.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj9*(x689.value)))+IKsqr((sj9*(x690.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*cj9*(x689.value)), (sj9*(x690.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x691=IKcos(j7);
IkReal x692=IKsin(j7);
IkReal x693=((1.0)*cj9);
IkReal x694=((1.0)*x691);
evalcond[0]=(cj9+((new_r01*x692)));
evalcond[1]=(sj9+((new_r01*x691)));
evalcond[2]=(sj9+(((-1.0)*new_r10*x694)));
evalcond[3]=(((new_r10*x692))+(((-1.0)*x693)));
evalcond[4]=(((cj9*x692))+new_r01+((sj9*x691)));
evalcond[5]=((((-1.0)*x691*x693))+((sj9*x692)));
evalcond[6]=((((-1.0)*x692*x693))+new_r10+(((-1.0)*sj9*x694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x695=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x695.valid){
continue;
}
CheckValue<IkReal> x696 = IKatan2WithCheck(IkReal(((-1.0)*cj9)),IkReal(((-1.0)*sj9)),IKFAST_ATAN2_MAGTHRESH);
if(!x696.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x695.value)))+(x696.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x697=IKcos(j7);
IkReal x698=IKsin(j7);
IkReal x699=((1.0)*cj9);
IkReal x700=((1.0)*x697);
evalcond[0]=(cj9+((new_r01*x698)));
evalcond[1]=(sj9+((new_r01*x697)));
evalcond[2]=(sj9+(((-1.0)*new_r10*x700)));
evalcond[3]=(((new_r10*x698))+(((-1.0)*x699)));
evalcond[4]=(((cj9*x698))+new_r01+((sj9*x697)));
evalcond[5]=((((-1.0)*x697*x699))+((sj9*x698)));
evalcond[6]=((((-1.0)*sj9*x700))+(((-1.0)*x698*x699))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=1.0;
j8=0;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x702 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x702.valid){
continue;
}
IkReal x701=x702.value;
j7array[0]=((-1.0)*x701);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x701)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r10*(IKcos(j7))))+((new_r00*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=1.0;
j8=0;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x704 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x704.valid){
continue;
}
IkReal x703=x704.value;
j7array[0]=((-1.0)*x703);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x703)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r11*(IKcos(j7))))+((new_r01*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=0;
cj8=1.0;
j8=0;
new_r01=0;
new_r10=0;
j7eval[0]=new_r11;
j7eval[1]=IKsign(new_r11);
j7eval[2]=((IKabs(cj9))+(IKabs(sj9)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=0;
cj8=1.0;
j8=0;
new_r01=0;
new_r10=0;
j7eval[0]=new_r00;
j7eval[1]=IKsign(new_r00);
j7eval[2]=((IKabs(cj9))+(IKabs(sj9)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj8=0;
cj8=1.0;
j8=0;
new_r01=0;
new_r10=0;
j7eval[0]=new_r00;
j7eval[1]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x705=IKPowWithIntegerCheck(new_r00,-1);
if(!x705.valid){
continue;
}
CheckValue<IkReal> x706=IKPowWithIntegerCheck(new_r11,-1);
if(!x706.valid){
continue;
}
if( IKabs(((-1.0)*sj9*(x705.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj9*(x706.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj9*(x705.value)))+IKsqr((cj9*(x706.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*sj9*(x705.value)), (cj9*(x706.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x707=IKsin(j7);
IkReal x708=IKcos(j7);
IkReal x709=(sj9*x707);
IkReal x710=((1.0)*x708);
IkReal x711=(cj9*x710);
evalcond[0]=(sj9+((new_r00*x707)));
evalcond[1]=(sj9+((new_r11*x707)));
evalcond[2]=(cj9+(((-1.0)*new_r11*x710)));
evalcond[3]=(((new_r00*x708))+(((-1.0)*cj9)));
evalcond[4]=(((sj9*x708))+((cj9*x707)));
evalcond[5]=((((-1.0)*x711))+x709+new_r00);
evalcond[6]=((((-1.0)*x711))+x709+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x712=IKPowWithIntegerCheck(IKsign(new_r00),-1);
if(!x712.valid){
continue;
}
CheckValue<IkReal> x713 = IKatan2WithCheck(IkReal(((-1.0)*sj9)),IkReal(cj9),IKFAST_ATAN2_MAGTHRESH);
if(!x713.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x712.value)))+(x713.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x714=IKsin(j7);
IkReal x715=IKcos(j7);
IkReal x716=(sj9*x714);
IkReal x717=((1.0)*x715);
IkReal x718=(cj9*x717);
evalcond[0]=(sj9+((new_r00*x714)));
evalcond[1]=(sj9+((new_r11*x714)));
evalcond[2]=(cj9+(((-1.0)*new_r11*x717)));
evalcond[3]=(((new_r00*x715))+(((-1.0)*cj9)));
evalcond[4]=(((sj9*x715))+((cj9*x714)));
evalcond[5]=((((-1.0)*x718))+x716+new_r00);
evalcond[6]=((((-1.0)*x718))+x716+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x719=IKPowWithIntegerCheck(IKsign(new_r11),-1);
if(!x719.valid){
continue;
}
CheckValue<IkReal> x720 = IKatan2WithCheck(IkReal(((-1.0)*sj9)),IkReal(cj9),IKFAST_ATAN2_MAGTHRESH);
if(!x720.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x719.value)))+(x720.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x721=IKsin(j7);
IkReal x722=IKcos(j7);
IkReal x723=(sj9*x721);
IkReal x724=((1.0)*x722);
IkReal x725=(cj9*x724);
evalcond[0]=(sj9+((new_r00*x721)));
evalcond[1]=(sj9+((new_r11*x721)));
evalcond[2]=(cj9+(((-1.0)*new_r11*x724)));
evalcond[3]=(((new_r00*x722))+(((-1.0)*cj9)));
evalcond[4]=(((sj9*x722))+((cj9*x721)));
evalcond[5]=((((-1.0)*x725))+x723+new_r00);
evalcond[6]=((((-1.0)*x725))+x723+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x726=((1.0)*new_r11);
CheckValue<IkReal> x727=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r01*sj9))+(((-1.0)*cj9*x726)))),-1);
if(!x727.valid){
continue;
}
CheckValue<IkReal> x728 = IKatan2WithCheck(IkReal((((cj9*sj9))+((new_r00*new_r01)))),IkReal(((1.0)+(((-1.0)*(cj9*cj9)))+(((-1.0)*new_r00*x726)))),IKFAST_ATAN2_MAGTHRESH);
if(!x728.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x727.value)))+(x728.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x729=IKcos(j7);
IkReal x730=IKsin(j7);
IkReal x731=((1.0)*cj9);
IkReal x732=(sj9*x730);
IkReal x733=((1.0)*x729);
IkReal x734=(x729*x731);
evalcond[0]=(sj9+((new_r01*x729))+((new_r11*x730)));
evalcond[1]=(((cj9*x730))+((sj9*x729))+new_r01);
evalcond[2]=(sj9+((new_r00*x730))+(((-1.0)*new_r10*x733)));
evalcond[3]=(cj9+((new_r01*x730))+(((-1.0)*new_r11*x733)));
evalcond[4]=((((-1.0)*x734))+x732+new_r00);
evalcond[5]=((((-1.0)*x734))+x732+new_r11);
evalcond[6]=(((new_r00*x729))+(((-1.0)*x731))+((new_r10*x730)));
evalcond[7]=((((-1.0)*sj9*x733))+(((-1.0)*x730*x731))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x735 = IKatan2WithCheck(IkReal((((new_r11*sj9))+((cj9*new_r01)))),IkReal((((new_r01*sj9))+(((-1.0)*cj9*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x735.valid){
continue;
}
CheckValue<IkReal> x736=IKPowWithIntegerCheck(IKsign(((((-1.0)*(new_r01*new_r01)))+(((-1.0)*(new_r11*new_r11))))),-1);
if(!x736.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x735.value)+(((1.5707963267949)*(x736.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x737=IKcos(j7);
IkReal x738=IKsin(j7);
IkReal x739=((1.0)*cj9);
IkReal x740=(sj9*x738);
IkReal x741=((1.0)*x737);
IkReal x742=(x737*x739);
evalcond[0]=(sj9+((new_r01*x737))+((new_r11*x738)));
evalcond[1]=(((cj9*x738))+((sj9*x737))+new_r01);
evalcond[2]=(sj9+((new_r00*x738))+(((-1.0)*new_r10*x741)));
evalcond[3]=(cj9+((new_r01*x738))+(((-1.0)*new_r11*x741)));
evalcond[4]=(x740+new_r00+(((-1.0)*x742)));
evalcond[5]=(x740+new_r11+(((-1.0)*x742)));
evalcond[6]=(((new_r00*x737))+(((-1.0)*x739))+((new_r10*x738)));
evalcond[7]=((((-1.0)*sj9*x741))+new_r10+(((-1.0)*x738*x739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x743=((1.0)*new_r11);
CheckValue<IkReal> x744 = IKatan2WithCheck(IkReal((((new_r10*sj9))+((new_r01*sj9)))),IkReal(((((-1.0)*sj9*x743))+((new_r00*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x744.valid){
continue;
}
CheckValue<IkReal> x745=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x743))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x745.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x744.value)+(((1.5707963267949)*(x745.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x746=IKcos(j7);
IkReal x747=IKsin(j7);
IkReal x748=((1.0)*cj9);
IkReal x749=(sj9*x747);
IkReal x750=((1.0)*x746);
IkReal x751=(x746*x748);
evalcond[0]=(sj9+((new_r01*x746))+((new_r11*x747)));
evalcond[1]=(((sj9*x746))+((cj9*x747))+new_r01);
evalcond[2]=(sj9+(((-1.0)*new_r10*x750))+((new_r00*x747)));
evalcond[3]=(cj9+(((-1.0)*new_r11*x750))+((new_r01*x747)));
evalcond[4]=(x749+new_r00+(((-1.0)*x751)));
evalcond[5]=(x749+new_r11+(((-1.0)*x751)));
evalcond[6]=(((new_r10*x747))+((new_r00*x746))+(((-1.0)*x748)));
evalcond[7]=((((-1.0)*x747*x748))+new_r10+(((-1.0)*sj9*x750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x752=((1.0)*new_r10);
IkReal x753=((((-1.0)*new_r11*x752))+(((-1.0)*new_r00*new_r01)));
j7eval[0]=x753;
j7eval[1]=((IKabs((((cj9*new_r01))+(((-1.0)*cj9*x752)))))+(IKabs((((cj9*new_r00))+((cj9*new_r11))))));
j7eval[2]=IKsign(x753);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x754=((1.0)*new_r10);
IkReal x755=((((-1.0)*cj9*new_r00))+(((-1.0)*sj9*x754)));
j7eval[0]=x755;
j7eval[1]=((IKabs(((((-1.0)*new_r01*x754))+(cj9*cj9))))+(IKabs((((cj9*sj9))+((new_r00*new_r01))))));
j7eval[2]=IKsign(x755);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x756=((1.0)*new_r00);
IkReal x757=(((cj9*new_r10))+(((-1.0)*sj9*x756)));
j7eval[0]=x757;
j7eval[1]=IKsign(x757);
j7eval[2]=((IKabs(((((-1.0)*(cj9*cj9)))+(new_r00*new_r00))))+(IKabs((((cj9*sj9))+(((-1.0)*new_r10*x756))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x758=((-1.0)*new_r00);
IkReal x760 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x760)==0){
continue;
}
IkReal x759=pow(x760,-0.5);
CheckValue<IkReal> x761 = IKatan2WithCheck(IkReal(new_r10),IkReal(x758),IKFAST_ATAN2_MAGTHRESH);
if(!x761.valid){
continue;
}
IkReal gconst12=((-1.0)*(x761.value));
IkReal gconst13=((-1.0)*new_r10*x759);
IkReal gconst14=(x758*x759);
CheckValue<IkReal> x762 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x762.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j9+(x762.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x763=((-1.0)*new_r00);
CheckValue<IkReal> x766 = IKatan2WithCheck(IkReal(new_r10),IkReal(x763),IKFAST_ATAN2_MAGTHRESH);
if(!x766.valid){
continue;
}
IkReal x764=((-1.0)*(x766.value));
IkReal x765=x759;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst13;
cj9=gconst14;
j9=x764;
IkReal gconst12=x764;
IkReal gconst13=((-1.0)*new_r10*x765);
IkReal gconst14=(x763*x765);
IkReal x767=new_r00*new_r00;
IkReal x768=((1.0)*new_r11);
IkReal x769=((1.0)*new_r00*new_r01);
IkReal x770=((((-1.0)*new_r10*x768))+(((-1.0)*x769)));
IkReal x771=x759;
IkReal x772=(new_r00*x771);
j7eval[0]=x770;
j7eval[1]=((IKabs(((((-1.0)*x768*x772))+(((-1.0)*x767*x771)))))+(IKabs(((((-1.0)*x769*x771))+((new_r10*x772))))));
j7eval[2]=IKsign(x770);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x773=((-1.0)*new_r00);
CheckValue<IkReal> x776 = IKatan2WithCheck(IkReal(new_r10),IkReal(x773),IKFAST_ATAN2_MAGTHRESH);
if(!x776.valid){
continue;
}
IkReal x774=((-1.0)*(x776.value));
IkReal x775=x759;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst13;
cj9=gconst14;
j9=x774;
IkReal gconst12=x774;
IkReal gconst13=((-1.0)*new_r10*x775);
IkReal gconst14=(x773*x775);
IkReal x777=new_r10*new_r10;
IkReal x778=new_r00*new_r00;
CheckValue<IkReal> x781=IKPowWithIntegerCheck((x777+x778),-1);
if(!x781.valid){
continue;
}
IkReal x779=x781.value;
IkReal x780=(new_r00*x779);
j7eval[0]=((IKabs((((x778*x779))+(((-1.0)*new_r01*new_r10)))))+(IKabs((((new_r01*x777*x780))+((new_r10*x780))+((new_r01*x780*(new_r00*new_r00)))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x782=((-1.0)*new_r00);
CheckValue<IkReal> x785 = IKatan2WithCheck(IkReal(new_r10),IkReal(x782),IKFAST_ATAN2_MAGTHRESH);
if(!x785.valid){
continue;
}
IkReal x783=((-1.0)*(x785.value));
IkReal x784=x759;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst13;
cj9=gconst14;
j9=x783;
IkReal gconst12=x783;
IkReal gconst13=((-1.0)*new_r10*x784);
IkReal gconst14=(x782*x784);
IkReal x786=new_r00*new_r00;
IkReal x787=new_r10*new_r10;
CheckValue<IkReal> x791=IKPowWithIntegerCheck((x786+x787),-1);
if(!x791.valid){
continue;
}
IkReal x788=x791.value;
IkReal x789=(new_r10*x788);
IkReal x790=((1.0)*x788);
j7eval[0]=((IKabs((((new_r00*x789*(new_r10*new_r10)))+((new_r00*x789))+((x789*(new_r00*new_r00*new_r00))))))+(IKabs((((x786*x788))+(((-1.0)*x786*x787*x790))+(((-1.0)*x790*(x787*x787)))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x793 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x793.valid){
continue;
}
IkReal x792=((-1.0)*(x793.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst13;
cj9=gconst14;
j9=x792;
new_r11=0;
new_r00=0;
IkReal gconst12=x792;
IkReal x794 = new_r10*new_r10;
if(IKabs(x794)==0){
continue;
}
IkReal gconst13=((-1.0)*new_r10*(pow(x794,-0.5)));
IkReal gconst14=0;
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x795=IKPowWithIntegerCheck(gconst13,-1);
if(!x795.valid){
continue;
}
cj7array[0]=(new_r01*(x795.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x796=IKsin(j7);
IkReal x797=IKcos(j7);
IkReal x798=((1.0)*x797);
evalcond[0]=(new_r01*x796);
evalcond[1]=(new_r10*x796);
evalcond[2]=(gconst13*x796);
evalcond[3]=(gconst13+(((-1.0)*new_r10*x798)));
evalcond[4]=(new_r10+(((-1.0)*gconst13*x798)));
evalcond[5]=(((new_r01*x797))+(((-1.0)*gconst13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x799=IKPowWithIntegerCheck(new_r10,-1);
if(!x799.valid){
continue;
}
cj7array[0]=(gconst13*(x799.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x800=IKsin(j7);
IkReal x801=IKcos(j7);
IkReal x802=((1.0)*gconst13);
IkReal x803=(x801*x802);
evalcond[0]=(new_r01*x800);
evalcond[1]=(new_r10*x800);
evalcond[2]=(gconst13*x800);
evalcond[3]=(new_r01+(((-1.0)*x803)));
evalcond[4]=(new_r10+(((-1.0)*x803)));
evalcond[5]=(((new_r01*x801))+(((-1.0)*x802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst14;
evalcond[2]=gconst13;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x804=((-1.0)*new_r00);
CheckValue<IkReal> x806 = IKatan2WithCheck(IkReal(new_r10),IkReal(x804),IKFAST_ATAN2_MAGTHRESH);
if(!x806.valid){
continue;
}
IkReal x805=((-1.0)*(x806.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst13;
cj9=gconst14;
j9=x805;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst12=x805;
IkReal gconst13=((-1.0)*new_r10);
IkReal gconst14=x804;
j7eval[0]=1.0;
j7eval[1]=1.0;
j7eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs((new_r00*new_r10))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x807=((-1.0)*new_r00);
CheckValue<IkReal> x809 = IKatan2WithCheck(IkReal(new_r10),IkReal(x807),IKFAST_ATAN2_MAGTHRESH);
if(!x809.valid){
continue;
}
IkReal x808=((-1.0)*(x809.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst13;
cj9=gconst14;
j9=x808;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst12=x808;
IkReal gconst13=((-1.0)*new_r10);
IkReal gconst14=x807;
j7eval[0]=-1.0;
j7eval[1]=-1.0;
j7eval[2]=((IKabs(((-1.0)+(new_r10*new_r10))))+(IKabs((new_r00*new_r10))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x810=((-1.0)*new_r00);
CheckValue<IkReal> x812 = IKatan2WithCheck(IkReal(new_r10),IkReal(x810),IKFAST_ATAN2_MAGTHRESH);
if(!x812.valid){
continue;
}
IkReal x811=((-1.0)*(x812.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst13;
cj9=gconst14;
j9=x811;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst12=x811;
IkReal gconst13=((-1.0)*new_r10);
IkReal gconst14=x810;
j7eval[0]=1.0;
j7eval[1]=((((0.5)*(IKabs(((1.0)+(((-2.0)*(new_r10*new_r10))))))))+(IKabs((new_r00*new_r10))));
j7eval[2]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x813 = IKatan2WithCheck(IkReal((((gconst13*gconst14))+((new_r00*new_r10)))),IkReal(((gconst14*gconst14)+(((-1.0)*(new_r10*new_r10))))),IKFAST_ATAN2_MAGTHRESH);
if(!x813.valid){
continue;
}
CheckValue<IkReal> x814=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*new_r10))+(((-1.0)*gconst14*new_r00)))),-1);
if(!x814.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x813.value)+(((1.5707963267949)*(x814.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x815=IKcos(j7);
IkReal x816=IKsin(j7);
IkReal x817=(gconst14*x816);
IkReal x818=(gconst13*x816);
IkReal x819=((1.0)*x815);
IkReal x820=(gconst13*x819);
evalcond[0]=((((-1.0)*x820))+x817);
evalcond[1]=(((new_r00*x815))+((new_r10*x816))+gconst14);
evalcond[2]=(((gconst14*x815))+new_r00+x818);
evalcond[3]=(((new_r00*x816))+gconst13+(((-1.0)*new_r10*x819)));
evalcond[4]=((((-1.0)*x818))+(((-1.0)*gconst14*x819)));
evalcond[5]=((((-1.0)*x820))+new_r10+x817);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x821=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst14*gconst14)))+(((-1.0)*(gconst13*gconst13))))),-1);
if(!x821.valid){
continue;
}
CheckValue<IkReal> x822 = IKatan2WithCheck(IkReal((gconst13*new_r00)),IkReal((gconst14*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x822.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x821.value)))+(x822.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x823=IKcos(j7);
IkReal x824=IKsin(j7);
IkReal x825=(gconst14*x824);
IkReal x826=(gconst13*x824);
IkReal x827=((1.0)*x823);
IkReal x828=(gconst13*x827);
evalcond[0]=((((-1.0)*x828))+x825);
evalcond[1]=(((new_r10*x824))+gconst14+((new_r00*x823)));
evalcond[2]=(((gconst14*x823))+new_r00+x826);
evalcond[3]=(gconst13+((new_r00*x824))+(((-1.0)*new_r10*x827)));
evalcond[4]=((((-1.0)*x826))+(((-1.0)*gconst14*x827)));
evalcond[5]=((((-1.0)*x828))+new_r10+x825);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x829=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*new_r10))+(((-1.0)*gconst14*new_r00)))),-1);
if(!x829.valid){
continue;
}
CheckValue<IkReal> x830 = IKatan2WithCheck(IkReal((gconst13*gconst14)),IkReal(gconst14*gconst14),IKFAST_ATAN2_MAGTHRESH);
if(!x830.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x829.value)))+(x830.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x831=IKcos(j7);
IkReal x832=IKsin(j7);
IkReal x833=(gconst14*x832);
IkReal x834=(gconst13*x832);
IkReal x835=((1.0)*x831);
IkReal x836=(gconst13*x835);
evalcond[0]=((((-1.0)*x836))+x833);
evalcond[1]=(gconst14+((new_r00*x831))+((new_r10*x832)));
evalcond[2]=(((gconst14*x831))+new_r00+x834);
evalcond[3]=((((-1.0)*new_r10*x835))+gconst13+((new_r00*x832)));
evalcond[4]=((((-1.0)*x834))+(((-1.0)*gconst14*x835)));
evalcond[5]=((((-1.0)*x836))+new_r10+x833);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
IkReal x837=((-1.0)*new_r00);
CheckValue<IkReal> x839 = IKatan2WithCheck(IkReal(0),IkReal(x837),IKFAST_ATAN2_MAGTHRESH);
if(!x839.valid){
continue;
}
IkReal x838=((-1.0)*(x839.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst13;
cj9=gconst14;
j9=x838;
new_r01=0;
new_r10=0;
IkReal gconst12=x838;
IkReal gconst13=0;
IkReal x840 = new_r00*new_r00;
if(IKabs(x840)==0){
continue;
}
IkReal gconst14=(x837*(pow(x840,-0.5)));
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x841=IKPowWithIntegerCheck(gconst14,-1);
if(!x841.valid){
continue;
}
cj7array[0]=(new_r11*(x841.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x842=IKsin(j7);
IkReal x843=IKcos(j7);
evalcond[0]=(new_r00*x842);
evalcond[1]=(new_r11*x842);
evalcond[2]=(gconst14*x842);
evalcond[3]=(((new_r00*x843))+gconst14);
evalcond[4]=(((gconst14*x843))+new_r00);
evalcond[5]=(gconst14+(((-1.0)*new_r11*x843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x844=IKPowWithIntegerCheck(new_r11,-1);
if(!x844.valid){
continue;
}
cj7array[0]=(gconst14*(x844.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x845=IKsin(j7);
IkReal x846=IKcos(j7);
IkReal x847=(gconst14*x846);
evalcond[0]=(new_r00*x845);
evalcond[1]=(new_r11*x845);
evalcond[2]=(gconst14*x845);
evalcond[3]=(((new_r00*x846))+gconst14);
evalcond[4]=(new_r00+x847);
evalcond[5]=((((-1.0)*x847))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r00);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x849 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x849.valid){
continue;
}
IkReal x848=((-1.0)*(x849.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst13;
cj9=gconst14;
j9=x848;
new_r00=0;
IkReal gconst12=x848;
IkReal x850 = new_r10*new_r10;
if(IKabs(x850)==0){
continue;
}
IkReal gconst13=((-1.0)*new_r10*(pow(x850,-0.5)));
IkReal gconst14=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x852 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x852.valid){
continue;
}
IkReal x851=((-1.0)*(x852.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst13;
cj9=gconst14;
j9=x851;
new_r00=0;
IkReal gconst12=x851;
IkReal x853 = new_r10*new_r10;
if(IKabs(x853)==0){
continue;
}
IkReal gconst13=((-1.0)*new_r10*(pow(x853,-0.5)));
IkReal gconst14=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x855 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x855.valid){
continue;
}
IkReal x854=((-1.0)*(x855.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst13;
cj9=gconst14;
j9=x854;
new_r00=0;
IkReal gconst12=x854;
IkReal x856 = new_r10*new_r10;
if(IKabs(x856)==0){
continue;
}
IkReal gconst13=((-1.0)*new_r10*(pow(x856,-0.5)));
IkReal gconst14=0;
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x857=IKPowWithIntegerCheck(gconst13,-1);
if(!x857.valid){
continue;
}
CheckValue<IkReal> x858=IKPowWithIntegerCheck(new_r10,-1);
if(!x858.valid){
continue;
}
if( IKabs((new_r11*(x857.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst13*(x858.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r11*(x857.value)))+IKsqr((gconst13*(x858.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r11*(x857.value)), (gconst13*(x858.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x859=IKsin(j7);
IkReal x860=IKcos(j7);
IkReal x861=((1.0)*gconst13);
IkReal x862=((1.0)*x860);
IkReal x863=(x860*x861);
evalcond[0]=(new_r10*x859);
evalcond[1]=(gconst13*x859);
evalcond[2]=(gconst13+(((-1.0)*new_r10*x862)));
evalcond[3]=((((-1.0)*x863))+new_r01);
evalcond[4]=((((-1.0)*x859*x861))+new_r11);
evalcond[5]=((((-1.0)*x863))+new_r10);
evalcond[6]=((((-1.0)*new_r11*x862))+((new_r01*x859)));
evalcond[7]=(((new_r01*x860))+(((-1.0)*x861))+((new_r11*x859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x864 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x864.valid){
continue;
}
CheckValue<IkReal> x865=IKPowWithIntegerCheck(IKsign(gconst13),-1);
if(!x865.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x864.value)+(((1.5707963267949)*(x865.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x866=IKsin(j7);
IkReal x867=IKcos(j7);
IkReal x868=((1.0)*gconst13);
IkReal x869=((1.0)*x867);
IkReal x870=(x867*x868);
evalcond[0]=(new_r10*x866);
evalcond[1]=(gconst13*x866);
evalcond[2]=(gconst13+(((-1.0)*new_r10*x869)));
evalcond[3]=(new_r01+(((-1.0)*x870)));
evalcond[4]=((((-1.0)*x866*x868))+new_r11);
evalcond[5]=(new_r10+(((-1.0)*x870)));
evalcond[6]=(((new_r01*x866))+(((-1.0)*new_r11*x869)));
evalcond[7]=(((new_r01*x867))+(((-1.0)*x868))+((new_r11*x866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x871 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x871.valid){
continue;
}
CheckValue<IkReal> x872=IKPowWithIntegerCheck(IKsign(gconst13),-1);
if(!x872.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x871.value)+(((1.5707963267949)*(x872.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x873=IKsin(j7);
IkReal x874=IKcos(j7);
IkReal x875=((1.0)*gconst13);
IkReal x876=((1.0)*x874);
IkReal x877=(x874*x875);
evalcond[0]=(new_r10*x873);
evalcond[1]=(gconst13*x873);
evalcond[2]=(gconst13+(((-1.0)*new_r10*x876)));
evalcond[3]=(new_r01+(((-1.0)*x877)));
evalcond[4]=((((-1.0)*x873*x875))+new_r11);
evalcond[5]=(new_r10+(((-1.0)*x877)));
evalcond[6]=(((new_r01*x873))+(((-1.0)*new_r11*x876)));
evalcond[7]=(((new_r01*x874))+((new_r11*x873))+(((-1.0)*x875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x878 = IKatan2WithCheck(IkReal((((gconst13*gconst14))+((new_r00*new_r10)))),IkReal(((gconst14*gconst14)+(((-1.0)*(new_r10*new_r10))))),IKFAST_ATAN2_MAGTHRESH);
if(!x878.valid){
continue;
}
CheckValue<IkReal> x879=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*new_r10))+(((-1.0)*gconst14*new_r00)))),-1);
if(!x879.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x878.value)+(((1.5707963267949)*(x879.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x880=IKcos(j7);
IkReal x881=IKsin(j7);
IkReal x882=(gconst14*x881);
IkReal x883=(gconst13*x881);
IkReal x884=((1.0)*x880);
IkReal x885=(gconst13*x884);
evalcond[0]=(((new_r10*x881))+((new_r00*x880))+gconst14);
evalcond[1]=(((gconst14*x880))+new_r00+x883);
evalcond[2]=((((-1.0)*new_r10*x884))+((new_r00*x881))+gconst13);
evalcond[3]=(((new_r01*x881))+gconst14+(((-1.0)*new_r11*x884)));
evalcond[4]=((((-1.0)*x885))+new_r01+x882);
evalcond[5]=((((-1.0)*x885))+new_r10+x882);
evalcond[6]=(((new_r01*x880))+((new_r11*x881))+(((-1.0)*gconst13)));
evalcond[7]=((((-1.0)*x883))+new_r11+(((-1.0)*gconst14*x884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x886=((1.0)*new_r10);
CheckValue<IkReal> x887=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*x886))+(((-1.0)*gconst14*new_r00)))),-1);
if(!x887.valid){
continue;
}
CheckValue<IkReal> x888 = IKatan2WithCheck(IkReal((((gconst13*gconst14))+((new_r00*new_r01)))),IkReal(((gconst14*gconst14)+(((-1.0)*new_r01*x886)))),IKFAST_ATAN2_MAGTHRESH);
if(!x888.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x887.value)))+(x888.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x889=IKcos(j7);
IkReal x890=IKsin(j7);
IkReal x891=(gconst14*x890);
IkReal x892=(gconst13*x890);
IkReal x893=((1.0)*x889);
IkReal x894=(gconst13*x893);
evalcond[0]=(((new_r10*x890))+((new_r00*x889))+gconst14);
evalcond[1]=(((gconst14*x889))+new_r00+x892);
evalcond[2]=(((new_r00*x890))+(((-1.0)*new_r10*x893))+gconst13);
evalcond[3]=(((new_r01*x890))+(((-1.0)*new_r11*x893))+gconst14);
evalcond[4]=((((-1.0)*x894))+new_r01+x891);
evalcond[5]=((((-1.0)*x894))+new_r10+x891);
evalcond[6]=(((new_r11*x890))+((new_r01*x889))+(((-1.0)*gconst13)));
evalcond[7]=((((-1.0)*x892))+new_r11+(((-1.0)*gconst14*x893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x895=((1.0)*new_r10);
CheckValue<IkReal> x896=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r11*x895))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x896.valid){
continue;
}
CheckValue<IkReal> x897 = IKatan2WithCheck(IkReal((((gconst14*new_r00))+((gconst14*new_r11)))),IkReal((((gconst14*new_r01))+(((-1.0)*gconst14*x895)))),IKFAST_ATAN2_MAGTHRESH);
if(!x897.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x896.value)))+(x897.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x898=IKcos(j7);
IkReal x899=IKsin(j7);
IkReal x900=(gconst14*x899);
IkReal x901=(gconst13*x899);
IkReal x902=((1.0)*x898);
IkReal x903=(gconst13*x902);
evalcond[0]=(((new_r00*x898))+((new_r10*x899))+gconst14);
evalcond[1]=(((gconst14*x898))+new_r00+x901);
evalcond[2]=(((new_r00*x899))+gconst13+(((-1.0)*new_r10*x902)));
evalcond[3]=((((-1.0)*new_r11*x902))+((new_r01*x899))+gconst14);
evalcond[4]=((((-1.0)*x903))+new_r01+x900);
evalcond[5]=((((-1.0)*x903))+new_r10+x900);
evalcond[6]=(((new_r11*x899))+((new_r01*x898))+(((-1.0)*gconst13)));
evalcond[7]=((((-1.0)*gconst14*x902))+(((-1.0)*x901))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x906 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x906)==0){
continue;
}
IkReal x904=pow(x906,-0.5);
IkReal x905=((1.0)*x904);
CheckValue<IkReal> x907 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x907.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x907.value))));
IkReal gconst16=(new_r10*x905);
IkReal gconst17=(new_r00*x905);
CheckValue<IkReal> x908 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x908.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9+(x908.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x912 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x912.valid){
continue;
}
IkReal x909=((1.0)*(x912.value));
IkReal x910=x904;
IkReal x911=((1.0)*x910);
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x909)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x909)));
IkReal gconst16=(new_r10*x911);
IkReal gconst17=(new_r00*x911);
IkReal x913=new_r00*new_r00;
IkReal x914=((1.0)*new_r00);
IkReal x915=((((-1.0)*new_r01*x914))+(((-1.0)*new_r10*new_r11)));
IkReal x916=x904;
IkReal x917=(new_r00*x916);
j7eval[0]=x915;
j7eval[1]=((IKabs((((new_r01*x917))+(((-1.0)*new_r10*x914*x916)))))+(IKabs((((new_r11*x917))+((x913*x916))))));
j7eval[2]=IKsign(x915);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x921 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x921.valid){
continue;
}
IkReal x918=((1.0)*(x921.value));
IkReal x919=x904;
IkReal x920=((1.0)*x919);
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x918)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x918)));
IkReal gconst16=(new_r10*x920);
IkReal gconst17=(new_r00*x920);
IkReal x922=new_r10*new_r10;
IkReal x923=new_r00*new_r00;
IkReal x924=((1.0)*new_r01);
CheckValue<IkReal> x928=IKPowWithIntegerCheck((x922+x923),-1);
if(!x928.valid){
continue;
}
IkReal x925=x928.value;
IkReal x926=(new_r10*x925);
IkReal x927=(new_r01*x925);
j7eval[0]=((IKabs((((new_r00*x926))+((x927*(new_r00*new_r00*new_r00)))+((new_r00*x922*x927)))))+(IKabs(((((-1.0)*x923*x924*x926))+((x923*x925))+(((-1.0)*x924*x926*(new_r10*new_r10)))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x932 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x932.valid){
continue;
}
IkReal x929=((1.0)*(x932.value));
IkReal x930=x904;
IkReal x931=((1.0)*x930);
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x929)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x929)));
IkReal gconst16=(new_r10*x931);
IkReal gconst17=(new_r00*x931);
IkReal x933=new_r00*new_r00;
IkReal x934=new_r10*new_r10;
CheckValue<IkReal> x938=IKPowWithIntegerCheck((x934+x933),-1);
if(!x938.valid){
continue;
}
IkReal x935=x938.value;
IkReal x936=(new_r10*x935);
IkReal x937=((1.0)*x935);
j7eval[0]=((IKabs((((new_r00*x936*(new_r10*new_r10)))+((new_r00*x936))+((x936*(new_r00*new_r00*new_r00))))))+(IKabs(((((-1.0)*x933*x934*x937))+((x933*x935))+(((-1.0)*x937*(x934*x934)))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x940 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x940.valid){
continue;
}
IkReal x939=((1.0)*(x940.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x939)));
new_r11=0;
new_r00=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x939)));
IkReal x941 = new_r10*new_r10;
if(IKabs(x941)==0){
continue;
}
IkReal gconst16=((1.0)*new_r10*(pow(x941,-0.5)));
IkReal gconst17=0;
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x942=IKPowWithIntegerCheck(gconst16,-1);
if(!x942.valid){
continue;
}
cj7array[0]=(new_r01*(x942.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x943=IKsin(j7);
IkReal x944=IKcos(j7);
IkReal x945=((1.0)*x944);
evalcond[0]=(new_r01*x943);
evalcond[1]=(new_r10*x943);
evalcond[2]=(gconst16*x943);
evalcond[3]=(gconst16+(((-1.0)*new_r10*x945)));
evalcond[4]=((((-1.0)*gconst16*x945))+new_r10);
evalcond[5]=(((new_r01*x944))+(((-1.0)*gconst16)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x946=IKPowWithIntegerCheck(new_r10,-1);
if(!x946.valid){
continue;
}
cj7array[0]=(gconst16*(x946.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x947=IKsin(j7);
IkReal x948=IKcos(j7);
IkReal x949=((1.0)*gconst16);
IkReal x950=(x948*x949);
evalcond[0]=(new_r01*x947);
evalcond[1]=(new_r10*x947);
evalcond[2]=(gconst16*x947);
evalcond[3]=(new_r01+(((-1.0)*x950)));
evalcond[4]=(new_r10+(((-1.0)*x950)));
evalcond[5]=((((-1.0)*x949))+((new_r01*x948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst17;
evalcond[2]=gconst16;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x952 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x952.valid){
continue;
}
IkReal x951=((1.0)*(x952.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x951)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x951)));
IkReal gconst16=((1.0)*new_r10);
IkReal gconst17=((1.0)*new_r00);
j7eval[0]=-1.0;
j7eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs(((1.0)*new_r00*new_r10))));
j7eval[2]=-1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x954 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x954.valid){
continue;
}
IkReal x953=((1.0)*(x954.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x953)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x953)));
IkReal gconst16=((1.0)*new_r10);
IkReal gconst17=((1.0)*new_r00);
j7eval[0]=-1.0;
j7eval[1]=-1.0;
j7eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs(((1.0)*new_r00*new_r10))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x956 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x956.valid){
continue;
}
IkReal x955=((1.0)*(x956.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x955)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x955)));
IkReal gconst16=((1.0)*new_r10);
IkReal gconst17=((1.0)*new_r00);
j7eval[0]=-1.0;
j7eval[1]=((IKabs(((1.0)+(((-2.0)*(new_r10*new_r10))))))+(IKabs(((2.0)*new_r00*new_r10))));
j7eval[2]=-1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x957 = IKatan2WithCheck(IkReal((((new_r00*new_r10))+((gconst16*gconst17)))),IkReal(((gconst17*gconst17)+(((-1.0)*(new_r10*new_r10))))),IKFAST_ATAN2_MAGTHRESH);
if(!x957.valid){
continue;
}
CheckValue<IkReal> x958=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*new_r10))+(((-1.0)*gconst17*new_r00)))),-1);
if(!x958.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x957.value)+(((1.5707963267949)*(x958.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x959=IKcos(j7);
IkReal x960=IKsin(j7);
IkReal x961=(gconst17*x960);
IkReal x962=((1.0)*x959);
IkReal x963=(gconst16*x960);
IkReal x964=(gconst16*x962);
evalcond[0]=(x961+(((-1.0)*x964)));
evalcond[1]=(((new_r00*x959))+gconst17+((new_r10*x960)));
evalcond[2]=(((gconst17*x959))+new_r00+x963);
evalcond[3]=(((new_r00*x960))+gconst16+(((-1.0)*new_r10*x962)));
evalcond[4]=((((-1.0)*gconst17*x962))+(((-1.0)*x963)));
evalcond[5]=(new_r10+x961+(((-1.0)*x964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x965=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst17*gconst17)))+(((-1.0)*(gconst16*gconst16))))),-1);
if(!x965.valid){
continue;
}
CheckValue<IkReal> x966 = IKatan2WithCheck(IkReal((gconst16*new_r00)),IkReal((gconst17*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x966.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x965.value)))+(x966.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x967=IKcos(j7);
IkReal x968=IKsin(j7);
IkReal x969=(gconst17*x968);
IkReal x970=((1.0)*x967);
IkReal x971=(gconst16*x968);
IkReal x972=(gconst16*x970);
evalcond[0]=(x969+(((-1.0)*x972)));
evalcond[1]=(((new_r00*x967))+gconst17+((new_r10*x968)));
evalcond[2]=(((gconst17*x967))+new_r00+x971);
evalcond[3]=(((new_r00*x968))+gconst16+(((-1.0)*new_r10*x970)));
evalcond[4]=((((-1.0)*x971))+(((-1.0)*gconst17*x970)));
evalcond[5]=(new_r10+x969+(((-1.0)*x972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x973 = IKatan2WithCheck(IkReal((gconst16*gconst17)),IkReal(gconst17*gconst17),IKFAST_ATAN2_MAGTHRESH);
if(!x973.valid){
continue;
}
CheckValue<IkReal> x974=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*new_r10))+(((-1.0)*gconst17*new_r00)))),-1);
if(!x974.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x973.value)+(((1.5707963267949)*(x974.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x975=IKcos(j7);
IkReal x976=IKsin(j7);
IkReal x977=(gconst17*x976);
IkReal x978=((1.0)*x975);
IkReal x979=(gconst16*x976);
IkReal x980=(gconst16*x978);
evalcond[0]=((((-1.0)*x980))+x977);
evalcond[1]=(gconst17+((new_r10*x976))+((new_r00*x975)));
evalcond[2]=(((gconst17*x975))+new_r00+x979);
evalcond[3]=(gconst16+(((-1.0)*new_r10*x978))+((new_r00*x976)));
evalcond[4]=((((-1.0)*x979))+(((-1.0)*gconst17*x978)));
evalcond[5]=((((-1.0)*x980))+new_r10+x977);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x982 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x982.valid){
continue;
}
IkReal x981=((1.0)*(x982.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x981)));
new_r01=0;
new_r10=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x981)));
IkReal gconst16=0;
IkReal x983 = new_r00*new_r00;
if(IKabs(x983)==0){
continue;
}
IkReal gconst17=((1.0)*new_r00*(pow(x983,-0.5)));
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x984=IKPowWithIntegerCheck(gconst17,-1);
if(!x984.valid){
continue;
}
cj7array[0]=(new_r11*(x984.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x985=IKsin(j7);
IkReal x986=IKcos(j7);
evalcond[0]=(new_r00*x985);
evalcond[1]=(new_r11*x985);
evalcond[2]=(gconst17*x985);
evalcond[3]=(((new_r00*x986))+gconst17);
evalcond[4]=(((gconst17*x986))+new_r00);
evalcond[5]=(gconst17+(((-1.0)*new_r11*x986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x987=IKPowWithIntegerCheck(new_r11,-1);
if(!x987.valid){
continue;
}
cj7array[0]=(gconst17*(x987.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x988=IKsin(j7);
IkReal x989=IKcos(j7);
IkReal x990=(gconst17*x989);
evalcond[0]=(new_r00*x988);
evalcond[1]=(new_r11*x988);
evalcond[2]=(gconst17*x988);
evalcond[3]=(((new_r00*x989))+gconst17);
evalcond[4]=(new_r00+x990);
evalcond[5]=((((-1.0)*x990))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r00);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x992 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x992.valid){
continue;
}
IkReal x991=((1.0)*(x992.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x991)));
new_r00=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x991)));
IkReal x993 = new_r10*new_r10;
if(IKabs(x993)==0){
continue;
}
IkReal gconst16=((1.0)*new_r10*(pow(x993,-0.5)));
IkReal gconst17=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x995 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x995.valid){
continue;
}
IkReal x994=((1.0)*(x995.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x994)));
new_r00=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x994)));
IkReal x996 = new_r10*new_r10;
if(IKabs(x996)==0){
continue;
}
IkReal gconst16=((1.0)*new_r10*(pow(x996,-0.5)));
IkReal gconst17=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x998 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x998.valid){
continue;
}
IkReal x997=((1.0)*(x998.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x997)));
new_r00=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x997)));
IkReal x999 = new_r10*new_r10;
if(IKabs(x999)==0){
continue;
}
IkReal gconst16=((1.0)*new_r10*(pow(x999,-0.5)));
IkReal gconst17=0;
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1000=IKPowWithIntegerCheck(gconst16,-1);
if(!x1000.valid){
continue;
}
CheckValue<IkReal> x1001=IKPowWithIntegerCheck(new_r10,-1);
if(!x1001.valid){
continue;
}
if( IKabs((new_r11*(x1000.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst16*(x1001.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r11*(x1000.value)))+IKsqr((gconst16*(x1001.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r11*(x1000.value)), (gconst16*(x1001.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1002=IKsin(j7);
IkReal x1003=IKcos(j7);
IkReal x1004=((1.0)*x1003);
IkReal x1005=(gconst16*x1002);
IkReal x1006=(gconst16*x1004);
evalcond[0]=(new_r10*x1002);
evalcond[1]=x1005;
evalcond[2]=(gconst16+(((-1.0)*new_r10*x1004)));
evalcond[3]=((((-1.0)*x1006))+new_r01);
evalcond[4]=((((-1.0)*x1005))+new_r11);
evalcond[5]=((((-1.0)*x1006))+new_r10);
evalcond[6]=((((-1.0)*new_r11*x1004))+((new_r01*x1002)));
evalcond[7]=(((new_r11*x1002))+(((-1.0)*gconst16))+((new_r01*x1003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1007=IKPowWithIntegerCheck(IKsign(gconst16),-1);
if(!x1007.valid){
continue;
}
CheckValue<IkReal> x1008 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1008.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1007.value)))+(x1008.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1009=IKsin(j7);
IkReal x1010=IKcos(j7);
IkReal x1011=((1.0)*x1010);
IkReal x1012=(gconst16*x1009);
IkReal x1013=(gconst16*x1011);
evalcond[0]=(new_r10*x1009);
evalcond[1]=x1012;
evalcond[2]=(gconst16+(((-1.0)*new_r10*x1011)));
evalcond[3]=((((-1.0)*x1013))+new_r01);
evalcond[4]=(new_r11+(((-1.0)*x1012)));
evalcond[5]=((((-1.0)*x1013))+new_r10);
evalcond[6]=((((-1.0)*new_r11*x1011))+((new_r01*x1009)));
evalcond[7]=(((new_r11*x1009))+((new_r01*x1010))+(((-1.0)*gconst16)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1014=IKPowWithIntegerCheck(IKsign(gconst16),-1);
if(!x1014.valid){
continue;
}
CheckValue<IkReal> x1015 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1015.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1014.value)))+(x1015.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1016=IKsin(j7);
IkReal x1017=IKcos(j7);
IkReal x1018=((1.0)*x1017);
IkReal x1019=(gconst16*x1016);
IkReal x1020=(gconst16*x1018);
evalcond[0]=(new_r10*x1016);
evalcond[1]=x1019;
evalcond[2]=(gconst16+(((-1.0)*new_r10*x1018)));
evalcond[3]=((((-1.0)*x1020))+new_r01);
evalcond[4]=(new_r11+(((-1.0)*x1019)));
evalcond[5]=((((-1.0)*x1020))+new_r10);
evalcond[6]=((((-1.0)*new_r11*x1018))+((new_r01*x1016)));
evalcond[7]=(((new_r11*x1016))+((new_r01*x1017))+(((-1.0)*gconst16)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1021 = IKatan2WithCheck(IkReal((((new_r00*new_r10))+((gconst16*gconst17)))),IkReal(((gconst17*gconst17)+(((-1.0)*(new_r10*new_r10))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1021.valid){
continue;
}
CheckValue<IkReal> x1022=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*new_r10))+(((-1.0)*gconst17*new_r00)))),-1);
if(!x1022.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1021.value)+(((1.5707963267949)*(x1022.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1023=IKsin(j7);
IkReal x1024=IKcos(j7);
IkReal x1025=((1.0)*gconst16);
IkReal x1026=(gconst17*x1023);
IkReal x1027=((1.0)*x1024);
IkReal x1028=(x1024*x1025);
evalcond[0]=(((new_r10*x1023))+gconst17+((new_r00*x1024)));
evalcond[1]=(((gconst17*x1024))+((gconst16*x1023))+new_r00);
evalcond[2]=(gconst16+(((-1.0)*new_r10*x1027))+((new_r00*x1023)));
evalcond[3]=(gconst17+(((-1.0)*new_r11*x1027))+((new_r01*x1023)));
evalcond[4]=(x1026+(((-1.0)*x1028))+new_r01);
evalcond[5]=(x1026+(((-1.0)*x1028))+new_r10);
evalcond[6]=(((new_r11*x1023))+(((-1.0)*x1025))+((new_r01*x1024)));
evalcond[7]=((((-1.0)*x1023*x1025))+(((-1.0)*gconst17*x1027))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1029=((1.0)*new_r10);
CheckValue<IkReal> x1030 = IKatan2WithCheck(IkReal((((new_r00*new_r01))+((gconst16*gconst17)))),IkReal(((gconst17*gconst17)+(((-1.0)*new_r01*x1029)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1030.valid){
continue;
}
CheckValue<IkReal> x1031=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*new_r00))+(((-1.0)*gconst16*x1029)))),-1);
if(!x1031.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1030.value)+(((1.5707963267949)*(x1031.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1032=IKsin(j7);
IkReal x1033=IKcos(j7);
IkReal x1034=((1.0)*gconst16);
IkReal x1035=(gconst17*x1032);
IkReal x1036=((1.0)*x1033);
IkReal x1037=(x1033*x1034);
evalcond[0]=(gconst17+((new_r10*x1032))+((new_r00*x1033)));
evalcond[1]=(((gconst16*x1032))+((gconst17*x1033))+new_r00);
evalcond[2]=(gconst16+(((-1.0)*new_r10*x1036))+((new_r00*x1032)));
evalcond[3]=(gconst17+(((-1.0)*new_r11*x1036))+((new_r01*x1032)));
evalcond[4]=((((-1.0)*x1037))+x1035+new_r01);
evalcond[5]=((((-1.0)*x1037))+x1035+new_r10);
evalcond[6]=((((-1.0)*x1034))+((new_r11*x1032))+((new_r01*x1033)));
evalcond[7]=((((-1.0)*x1032*x1034))+(((-1.0)*gconst17*x1036))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1038=((1.0)*new_r10);
CheckValue<IkReal> x1039 = IKatan2WithCheck(IkReal((((gconst17*new_r11))+((gconst17*new_r00)))),IkReal(((((-1.0)*gconst17*x1038))+((gconst17*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1039.valid){
continue;
}
CheckValue<IkReal> x1040=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r11*x1038))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x1040.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1039.value)+(((1.5707963267949)*(x1040.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1041=IKsin(j7);
IkReal x1042=IKcos(j7);
IkReal x1043=((1.0)*gconst16);
IkReal x1044=(gconst17*x1041);
IkReal x1045=((1.0)*x1042);
IkReal x1046=(x1042*x1043);
evalcond[0]=(gconst17+((new_r00*x1042))+((new_r10*x1041)));
evalcond[1]=(((gconst17*x1042))+new_r00+((gconst16*x1041)));
evalcond[2]=(gconst16+((new_r00*x1041))+(((-1.0)*new_r10*x1045)));
evalcond[3]=(gconst17+((new_r01*x1041))+(((-1.0)*new_r11*x1045)));
evalcond[4]=(x1044+new_r01+(((-1.0)*x1046)));
evalcond[5]=(x1044+new_r10+(((-1.0)*x1046)));
evalcond[6]=(((new_r11*x1041))+((new_r01*x1042))+(((-1.0)*x1043)));
evalcond[7]=((((-1.0)*gconst17*x1045))+(((-1.0)*x1041*x1043))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1047=((-1.0)*new_r10);
IkReal x1049 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x1049)==0){
continue;
}
IkReal x1048=pow(x1049,-0.5);
CheckValue<IkReal> x1050 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1047),IKFAST_ATAN2_MAGTHRESH);
if(!x1050.valid){
continue;
}
IkReal gconst18=((-1.0)*(x1050.value));
IkReal gconst19=(new_r00*x1048);
IkReal gconst20=(x1047*x1048);
CheckValue<IkReal> x1051 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1051.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1051.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x1052=((-1.0)*new_r10);
CheckValue<IkReal> x1055 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1052),IKFAST_ATAN2_MAGTHRESH);
if(!x1055.valid){
continue;
}
IkReal x1053=((-1.0)*(x1055.value));
IkReal x1054=x1048;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1053;
IkReal gconst18=x1053;
IkReal gconst19=(new_r00*x1054);
IkReal gconst20=(x1052*x1054);
IkReal x1056=new_r10*new_r10;
IkReal x1057=((1.0)*new_r00);
IkReal x1058=((1.0)*new_r10*new_r11);
IkReal x1059=((((-1.0)*x1058))+(((-1.0)*new_r01*x1057)));
IkReal x1060=x1048;
IkReal x1061=(new_r10*x1060);
j7eval[0]=x1059;
j7eval[1]=((IKabs(((((-1.0)*x1058*x1060))+(((-1.0)*x1057*x1061)))))+(IKabs((((x1056*x1060))+(((-1.0)*new_r01*x1061))))));
j7eval[2]=IKsign(x1059);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1062=((-1.0)*new_r10);
CheckValue<IkReal> x1065 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1062),IKFAST_ATAN2_MAGTHRESH);
if(!x1065.valid){
continue;
}
IkReal x1063=((-1.0)*(x1065.value));
IkReal x1064=x1048;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1063;
IkReal gconst18=x1063;
IkReal gconst19=(new_r00*x1064);
IkReal gconst20=(x1062*x1064);
IkReal x1066=new_r10*new_r10;
CheckValue<IkReal> x1069=IKPowWithIntegerCheck((x1066+(new_r00*new_r00)),-1);
if(!x1069.valid){
continue;
}
IkReal x1067=x1069.value;
IkReal x1068=(new_r00*x1067);
j7eval[0]=((IKabs((((x1066*x1067))+((new_r00*new_r11)))))+(IKabs((((new_r10*x1068))+((new_r01*x1066*x1068))+((new_r01*x1068*(new_r00*new_r00)))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1070=((-1.0)*new_r10);
CheckValue<IkReal> x1073 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1070),IKFAST_ATAN2_MAGTHRESH);
if(!x1073.valid){
continue;
}
IkReal x1071=((-1.0)*(x1073.value));
IkReal x1072=x1048;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1071;
IkReal gconst18=x1071;
IkReal gconst19=(new_r00*x1072);
IkReal gconst20=(x1070*x1072);
IkReal x1074=new_r10*new_r10;
IkReal x1075=new_r00*new_r00;
CheckValue<IkReal> x1079=IKPowWithIntegerCheck((x1074+x1075),-1);
if(!x1079.valid){
continue;
}
IkReal x1076=x1079.value;
IkReal x1077=(new_r10*x1076);
IkReal x1078=(x1074*x1076);
j7eval[0]=((IKabs((((new_r00*x1077*(new_r10*new_r10)))+((new_r00*x1077))+((x1077*(new_r00*new_r00*new_r00))))))+(IKabs((x1078+(((-1.0)*x1076*(x1075*x1075)))+(((-1.0)*x1075*x1078))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
IkReal x1080=((-1.0)*new_r10);
CheckValue<IkReal> x1082 = IKatan2WithCheck(IkReal(0),IkReal(x1080),IKFAST_ATAN2_MAGTHRESH);
if(!x1082.valid){
continue;
}
IkReal x1081=((-1.0)*(x1082.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1081;
new_r11=0;
new_r00=0;
IkReal gconst18=x1081;
IkReal gconst19=0;
IkReal x1083 = new_r10*new_r10;
if(IKabs(x1083)==0){
continue;
}
IkReal gconst20=(x1080*(pow(x1083,-0.5)));
j7eval[0]=new_r01;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1084=IKPowWithIntegerCheck(gconst20,-1);
if(!x1084.valid){
continue;
}
sj7array[0]=((-1.0)*new_r01*(x1084.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1085=IKcos(j7);
IkReal x1086=IKsin(j7);
evalcond[0]=(new_r01*x1085);
evalcond[1]=(gconst20*x1085);
evalcond[2]=((-1.0)*new_r10*x1085);
evalcond[3]=(((new_r01*x1086))+gconst20);
evalcond[4]=(gconst20+((new_r10*x1086)));
evalcond[5]=(((gconst20*x1086))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1087=IKPowWithIntegerCheck(new_r01,-1);
if(!x1087.valid){
continue;
}
sj7array[0]=((-1.0)*gconst20*(x1087.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1088=IKcos(j7);
IkReal x1089=IKsin(j7);
IkReal x1090=(gconst20*x1089);
evalcond[0]=(new_r01*x1088);
evalcond[1]=(gconst20*x1088);
evalcond[2]=((-1.0)*new_r10*x1088);
evalcond[3]=(x1090+new_r01);
evalcond[4]=(gconst20+((new_r10*x1089)));
evalcond[5]=(x1090+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst20;
evalcond[2]=gconst19;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x1091=((-1.0)*new_r10);
CheckValue<IkReal> x1093 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1091),IKFAST_ATAN2_MAGTHRESH);
if(!x1093.valid){
continue;
}
IkReal x1092=((-1.0)*(x1093.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1092;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst18=x1092;
IkReal gconst19=new_r00;
IkReal gconst20=x1091;
j7eval[0]=-1.0;
j7eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs((new_r00*new_r10))));
j7eval[2]=-1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x1094=((-1.0)*new_r10);
CheckValue<IkReal> x1096 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1094),IKFAST_ATAN2_MAGTHRESH);
if(!x1096.valid){
continue;
}
IkReal x1095=((-1.0)*(x1096.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1095;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst18=x1095;
IkReal gconst19=new_r00;
IkReal gconst20=x1094;
j7eval[0]=-1.0;
j7eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs((new_r00*new_r10))));
j7eval[2]=-1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x1097=((-1.0)*new_r10);
CheckValue<IkReal> x1099 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1097),IKFAST_ATAN2_MAGTHRESH);
if(!x1099.valid){
continue;
}
IkReal x1098=((-1.0)*(x1099.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1098;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst18=x1098;
IkReal gconst19=new_r00;
IkReal gconst20=x1097;
j7eval[0]=1.0;
j7eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r10*new_r10))))))))+(IKabs((new_r00*new_r10))));
j7eval[2]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1100=((1.0)*gconst20);
CheckValue<IkReal> x1101 = IKatan2WithCheck(IkReal(((((-1.0)*(new_r00*new_r00)))+(gconst20*gconst20))),IkReal(((((-1.0)*gconst19*x1100))+((new_r00*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1101.valid){
continue;
}
CheckValue<IkReal> x1102=IKPowWithIntegerCheck(IKsign((((gconst19*new_r00))+(((-1.0)*new_r10*x1100)))),-1);
if(!x1102.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1101.value)+(((1.5707963267949)*(x1102.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1103=IKcos(j7);
IkReal x1104=IKsin(j7);
IkReal x1105=(gconst20*x1104);
IkReal x1106=((1.0)*x1103);
IkReal x1107=(gconst19*x1104);
IkReal x1108=(gconst19*x1106);
evalcond[0]=(x1105+(((-1.0)*x1108)));
evalcond[1]=(gconst20+((new_r00*x1103))+((new_r10*x1104)));
evalcond[2]=(x1107+((gconst20*x1103))+new_r00);
evalcond[3]=(gconst19+((new_r00*x1104))+(((-1.0)*new_r10*x1106)));
evalcond[4]=((((-1.0)*gconst20*x1106))+(((-1.0)*x1107)));
evalcond[5]=(x1105+new_r10+(((-1.0)*x1108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1109 = IKatan2WithCheck(IkReal((gconst19*new_r00)),IkReal((gconst20*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1109.valid){
continue;
}
CheckValue<IkReal> x1110=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst20*gconst20)))+(((-1.0)*(gconst19*gconst19))))),-1);
if(!x1110.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1109.value)+(((1.5707963267949)*(x1110.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1111=IKcos(j7);
IkReal x1112=IKsin(j7);
IkReal x1113=(gconst20*x1112);
IkReal x1114=((1.0)*x1111);
IkReal x1115=(gconst19*x1112);
IkReal x1116=(gconst19*x1114);
evalcond[0]=(x1113+(((-1.0)*x1116)));
evalcond[1]=(gconst20+((new_r00*x1111))+((new_r10*x1112)));
evalcond[2]=(x1115+((gconst20*x1111))+new_r00);
evalcond[3]=(gconst19+((new_r00*x1112))+(((-1.0)*new_r10*x1114)));
evalcond[4]=((((-1.0)*gconst20*x1114))+(((-1.0)*x1115)));
evalcond[5]=(x1113+new_r10+(((-1.0)*x1116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1117=IKPowWithIntegerCheck(IKsign((((gconst20*new_r10))+(((-1.0)*gconst19*new_r00)))),-1);
if(!x1117.valid){
continue;
}
CheckValue<IkReal> x1118 = IKatan2WithCheck(IkReal(gconst19*gconst19),IkReal((gconst19*gconst20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1118.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1117.value)))+(x1118.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1119=IKcos(j7);
IkReal x1120=IKsin(j7);
IkReal x1121=(gconst20*x1120);
IkReal x1122=((1.0)*x1119);
IkReal x1123=(gconst19*x1120);
IkReal x1124=(gconst19*x1122);
evalcond[0]=(x1121+(((-1.0)*x1124)));
evalcond[1]=(gconst20+((new_r00*x1119))+((new_r10*x1120)));
evalcond[2]=(x1123+((gconst20*x1119))+new_r00);
evalcond[3]=((((-1.0)*new_r10*x1122))+gconst19+((new_r00*x1120)));
evalcond[4]=((((-1.0)*x1123))+(((-1.0)*gconst20*x1122)));
evalcond[5]=(x1121+(((-1.0)*x1124))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1125=IKPowWithIntegerCheck(gconst19,-1);
if(!x1125.valid){
continue;
}
sj7array[0]=(new_r11*(x1125.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1126=IKcos(j7);
IkReal x1127=IKsin(j7);
IkReal x1128=((-1.0)*x1126);
evalcond[0]=(new_r00*x1126);
evalcond[1]=(new_r11*x1128);
evalcond[2]=(gconst19*x1128);
evalcond[3]=(gconst19+((new_r00*x1127)));
evalcond[4]=(((gconst19*x1127))+new_r00);
evalcond[5]=(((new_r11*x1127))+(((-1.0)*gconst19)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1130 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1130.valid){
continue;
}
IkReal x1129=((-1.0)*(x1130.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1129;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst18=x1129;
IkReal x1131 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x1131)==0){
continue;
}
IkReal gconst19=(new_r00*(pow(x1131,-0.5)));
IkReal gconst20=0;
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1133 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1133.valid){
continue;
}
IkReal x1132=((-1.0)*(x1133.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1132;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst18=x1132;
IkReal x1134 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x1134)==0){
continue;
}
IkReal gconst19=(new_r00*(pow(x1134,-0.5)));
IkReal gconst20=0;
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
CheckValue<IkReal> x1136 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1136.valid){
continue;
}
IkReal x1135=((-1.0)*(x1136.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1135;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst18=x1135;
IkReal x1137 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x1137)==0){
continue;
}
IkReal gconst19=(new_r00*(pow(x1137,-0.5)));
IkReal gconst20=0;
j7eval[0]=new_r00;
j7eval[1]=new_r01;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1138=IKPowWithIntegerCheck(new_r00,-1);
if(!x1138.valid){
continue;
}
CheckValue<IkReal> x1139=IKPowWithIntegerCheck(new_r01,-1);
if(!x1139.valid){
continue;
}
if( IKabs(((-1.0)*gconst19*(x1138.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst19*(x1139.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst19*(x1138.value)))+IKsqr((gconst19*(x1139.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst19*(x1138.value)), (gconst19*(x1139.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1140=IKsin(j7);
IkReal x1141=IKcos(j7);
IkReal x1142=((1.0)*gconst19);
IkReal x1143=(gconst19*x1140);
evalcond[0]=(new_r01*x1140);
evalcond[1]=(new_r00*x1141);
evalcond[2]=((-1.0)*x1143);
evalcond[3]=((-1.0)*gconst19*x1141);
evalcond[4]=(((new_r00*x1140))+gconst19);
evalcond[5]=(x1143+new_r00);
evalcond[6]=((((-1.0)*x1141*x1142))+new_r01);
evalcond[7]=((((-1.0)*x1142))+((new_r01*x1141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1144=IKPowWithIntegerCheck(new_r00,-1);
if(!x1144.valid){
continue;
}
CheckValue<IkReal> x1145=IKPowWithIntegerCheck(gconst19,-1);
if(!x1145.valid){
continue;
}
if( IKabs(((-1.0)*gconst19*(x1144.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x1145.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst19*(x1144.value)))+IKsqr((new_r01*(x1145.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst19*(x1144.value)), (new_r01*(x1145.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1146=IKsin(j7);
IkReal x1147=IKcos(j7);
IkReal x1148=((1.0)*gconst19);
IkReal x1149=(gconst19*x1146);
evalcond[0]=(new_r01*x1146);
evalcond[1]=(new_r00*x1147);
evalcond[2]=((-1.0)*x1149);
evalcond[3]=((-1.0)*gconst19*x1147);
evalcond[4]=(((new_r00*x1146))+gconst19);
evalcond[5]=(x1149+new_r00);
evalcond[6]=((((-1.0)*x1147*x1148))+new_r01);
evalcond[7]=((((-1.0)*x1148))+((new_r01*x1147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1150=IKPowWithIntegerCheck(IKsign(gconst19),-1);
if(!x1150.valid){
continue;
}
CheckValue<IkReal> x1151 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1151.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1150.value)))+(x1151.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1152=IKsin(j7);
IkReal x1153=IKcos(j7);
IkReal x1154=((1.0)*gconst19);
IkReal x1155=(gconst19*x1152);
evalcond[0]=(new_r01*x1152);
evalcond[1]=(new_r00*x1153);
evalcond[2]=((-1.0)*x1155);
evalcond[3]=((-1.0)*gconst19*x1153);
evalcond[4]=(gconst19+((new_r00*x1152)));
evalcond[5]=(x1155+new_r00);
evalcond[6]=(new_r01+(((-1.0)*x1153*x1154)));
evalcond[7]=((((-1.0)*x1154))+((new_r01*x1153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r10);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1157 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1157.valid){
continue;
}
IkReal x1156=((-1.0)*(x1157.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1156;
new_r10=0;
IkReal gconst18=x1156;
IkReal x1158 = new_r00*new_r00;
if(IKabs(x1158)==0){
continue;
}
IkReal gconst19=(new_r00*(pow(x1158,-0.5)));
IkReal gconst20=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1160 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1160.valid){
continue;
}
IkReal x1159=((-1.0)*(x1160.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1159;
new_r10=0;
IkReal gconst18=x1159;
IkReal x1161 = new_r00*new_r00;
if(IKabs(x1161)==0){
continue;
}
IkReal gconst19=(new_r00*(pow(x1161,-0.5)));
IkReal gconst20=0;
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1163 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1163.valid){
continue;
}
IkReal x1162=((-1.0)*(x1163.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1162;
new_r10=0;
IkReal gconst18=x1162;
IkReal x1164 = new_r00*new_r00;
if(IKabs(x1164)==0){
continue;
}
IkReal gconst19=(new_r00*(pow(x1164,-0.5)));
IkReal gconst20=0;
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1165=IKPowWithIntegerCheck(new_r00,-1);
if(!x1165.valid){
continue;
}
CheckValue<IkReal> x1166=IKPowWithIntegerCheck(gconst19,-1);
if(!x1166.valid){
continue;
}
if( IKabs(((-1.0)*gconst19*(x1165.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x1166.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst19*(x1165.value)))+IKsqr((new_r01*(x1166.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst19*(x1165.value)), (new_r01*(x1166.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1167=IKcos(j7);
IkReal x1168=IKsin(j7);
IkReal x1169=((1.0)*gconst19);
evalcond[0]=(new_r00*x1167);
evalcond[1]=((-1.0)*gconst19*x1167);
evalcond[2]=(gconst19+((new_r00*x1168)));
evalcond[3]=(((gconst19*x1168))+new_r00);
evalcond[4]=((((-1.0)*x1167*x1169))+new_r01);
evalcond[5]=((((-1.0)*x1168*x1169))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x1167))+((new_r01*x1168)));
evalcond[7]=(((new_r11*x1168))+((new_r01*x1167))+(((-1.0)*x1169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1170=IKPowWithIntegerCheck(IKsign(gconst19),-1);
if(!x1170.valid){
continue;
}
CheckValue<IkReal> x1171 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1171.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1170.value)))+(x1171.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1172=IKcos(j7);
IkReal x1173=IKsin(j7);
IkReal x1174=((1.0)*gconst19);
evalcond[0]=(new_r00*x1172);
evalcond[1]=((-1.0)*gconst19*x1172);
evalcond[2]=(gconst19+((new_r00*x1173)));
evalcond[3]=(((gconst19*x1173))+new_r00);
evalcond[4]=((((-1.0)*x1172*x1174))+new_r01);
evalcond[5]=((((-1.0)*x1173*x1174))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x1172))+((new_r01*x1173)));
evalcond[7]=(((new_r11*x1173))+(((-1.0)*x1174))+((new_r01*x1172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1175=IKPowWithIntegerCheck(IKsign(gconst19),-1);
if(!x1175.valid){
continue;
}
CheckValue<IkReal> x1176 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1176.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1175.value)))+(x1176.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1177=IKcos(j7);
IkReal x1178=IKsin(j7);
IkReal x1179=((1.0)*gconst19);
evalcond[0]=(new_r00*x1177);
evalcond[1]=((-1.0)*gconst19*x1177);
evalcond[2]=(gconst19+((new_r00*x1178)));
evalcond[3]=(((gconst19*x1178))+new_r00);
evalcond[4]=(new_r01+(((-1.0)*x1177*x1179)));
evalcond[5]=((((-1.0)*x1178*x1179))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x1177))+((new_r01*x1178)));
evalcond[7]=(((new_r11*x1178))+(((-1.0)*x1179))+((new_r01*x1177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1180=((1.0)*gconst20);
CheckValue<IkReal> x1181=IKPowWithIntegerCheck(IKsign((((gconst19*new_r00))+(((-1.0)*new_r10*x1180)))),-1);
if(!x1181.valid){
continue;
}
CheckValue<IkReal> x1182 = IKatan2WithCheck(IkReal(((((-1.0)*(new_r00*new_r00)))+(gconst20*gconst20))),IkReal(((((-1.0)*gconst19*x1180))+((new_r00*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1182.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1181.value)))+(x1182.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1183=IKsin(j7);
IkReal x1184=IKcos(j7);
IkReal x1185=((1.0)*gconst19);
IkReal x1186=(gconst20*x1183);
IkReal x1187=((1.0)*x1184);
IkReal x1188=(x1184*x1185);
evalcond[0]=(gconst20+((new_r10*x1183))+((new_r00*x1184)));
evalcond[1]=(((gconst19*x1183))+((gconst20*x1184))+new_r00);
evalcond[2]=(gconst19+(((-1.0)*new_r10*x1187))+((new_r00*x1183)));
evalcond[3]=(gconst20+(((-1.0)*new_r11*x1187))+((new_r01*x1183)));
evalcond[4]=(x1186+(((-1.0)*x1188))+new_r01);
evalcond[5]=(x1186+(((-1.0)*x1188))+new_r10);
evalcond[6]=((((-1.0)*x1185))+((new_r01*x1184))+((new_r11*x1183)));
evalcond[7]=((((-1.0)*x1183*x1185))+(((-1.0)*gconst20*x1187))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1189=((1.0)*gconst19);
CheckValue<IkReal> x1190 = IKatan2WithCheck(IkReal((((new_r00*new_r11))+(gconst20*gconst20))),IkReal((((new_r00*new_r01))+(((-1.0)*gconst20*x1189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1190.valid){
continue;
}
CheckValue<IkReal> x1191=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r11*x1189))+(((-1.0)*gconst20*new_r01)))),-1);
if(!x1191.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1190.value)+(((1.5707963267949)*(x1191.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1192=IKsin(j7);
IkReal x1193=IKcos(j7);
IkReal x1194=((1.0)*gconst19);
IkReal x1195=(gconst20*x1192);
IkReal x1196=((1.0)*x1193);
IkReal x1197=(x1193*x1194);
evalcond[0]=(gconst20+((new_r00*x1193))+((new_r10*x1192)));
evalcond[1]=(((gconst19*x1192))+((gconst20*x1193))+new_r00);
evalcond[2]=(gconst19+(((-1.0)*new_r10*x1196))+((new_r00*x1192)));
evalcond[3]=(gconst20+(((-1.0)*new_r11*x1196))+((new_r01*x1192)));
evalcond[4]=(x1195+(((-1.0)*x1197))+new_r01);
evalcond[5]=(x1195+(((-1.0)*x1197))+new_r10);
evalcond[6]=((((-1.0)*x1194))+((new_r11*x1192))+((new_r01*x1193)));
evalcond[7]=(new_r11+(((-1.0)*gconst20*x1196))+(((-1.0)*x1192*x1194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1198=((1.0)*new_r10);
CheckValue<IkReal> x1199=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r11*x1198))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x1199.valid){
continue;
}
CheckValue<IkReal> x1200 = IKatan2WithCheck(IkReal((((gconst20*new_r00))+((gconst20*new_r11)))),IkReal((((gconst20*new_r01))+(((-1.0)*gconst20*x1198)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1200.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1199.value)))+(x1200.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1201=IKsin(j7);
IkReal x1202=IKcos(j7);
IkReal x1203=((1.0)*gconst19);
IkReal x1204=(gconst20*x1201);
IkReal x1205=((1.0)*x1202);
IkReal x1206=(x1202*x1203);
evalcond[0]=(((new_r00*x1202))+((new_r10*x1201))+gconst20);
evalcond[1]=(((gconst20*x1202))+((gconst19*x1201))+new_r00);
evalcond[2]=(((new_r00*x1201))+gconst19+(((-1.0)*new_r10*x1205)));
evalcond[3]=(((new_r01*x1201))+(((-1.0)*new_r11*x1205))+gconst20);
evalcond[4]=(x1204+new_r01+(((-1.0)*x1206)));
evalcond[5]=(x1204+new_r10+(((-1.0)*x1206)));
evalcond[6]=(((new_r11*x1201))+((new_r01*x1202))+(((-1.0)*x1203)));
evalcond[7]=((((-1.0)*x1201*x1203))+new_r11+(((-1.0)*gconst20*x1205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1207=((-1.0)*new_r00);
IkReal x1209 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x1209)==0){
continue;
}
IkReal x1208=pow(x1209,-0.5);
CheckValue<IkReal> x1210 = IKatan2WithCheck(IkReal(x1207),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1210.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x1210.value))));
IkReal gconst22=(x1207*x1208);
IkReal gconst23=((1.0)*new_r10*x1208);
CheckValue<IkReal> x1211 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1211.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1211.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x1212=((-1.0)*new_r00);
CheckValue<IkReal> x1215 = IKatan2WithCheck(IkReal(x1212),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1215.valid){
continue;
}
IkReal x1213=((1.0)*(x1215.value));
IkReal x1214=x1208;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1213)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1213)));
IkReal gconst22=(x1212*x1214);
IkReal gconst23=((1.0)*new_r10*x1214);
IkReal x1216=new_r10*new_r10;
IkReal x1217=(new_r10*new_r11);
IkReal x1218=((((-1.0)*new_r00*new_r01))+(((-1.0)*x1217)));
IkReal x1219=x1208;
IkReal x1220=(new_r10*x1219);
j7eval[0]=x1218;
j7eval[1]=((IKabs((((new_r00*x1220))+((x1217*x1219)))))+(IKabs(((((-1.0)*x1216*x1219))+((new_r01*x1220))))));
j7eval[2]=IKsign(x1218);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1221=((-1.0)*new_r00);
CheckValue<IkReal> x1224 = IKatan2WithCheck(IkReal(x1221),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1224.valid){
continue;
}
IkReal x1222=((1.0)*(x1224.value));
IkReal x1223=x1208;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1222)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1222)));
IkReal gconst22=(x1221*x1223);
IkReal gconst23=((1.0)*new_r10*x1223);
IkReal x1225=new_r10*new_r10;
IkReal x1226=new_r00*new_r00*new_r00;
CheckValue<IkReal> x1230=IKPowWithIntegerCheck((x1225+(new_r00*new_r00)),-1);
if(!x1230.valid){
continue;
}
IkReal x1227=x1230.value;
IkReal x1228=(x1225*x1227);
IkReal x1229=(x1226*x1227);
j7eval[0]=((IKabs((x1228+((new_r00*new_r11*x1228))+((new_r11*x1229)))))+(IKabs((((new_r00*new_r01*x1228))+((new_r00*new_r10*x1227))+((new_r01*x1229))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1231=((-1.0)*new_r00);
CheckValue<IkReal> x1234 = IKatan2WithCheck(IkReal(x1231),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1234.valid){
continue;
}
IkReal x1232=((1.0)*(x1234.value));
IkReal x1233=x1208;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1232)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1232)));
IkReal gconst22=(x1231*x1233);
IkReal gconst23=((1.0)*new_r10*x1233);
IkReal x1235=new_r10*new_r10;
IkReal x1236=new_r00*new_r00;
CheckValue<IkReal> x1240=IKPowWithIntegerCheck((x1235+x1236),-1);
if(!x1240.valid){
continue;
}
IkReal x1237=x1240.value;
IkReal x1238=(new_r10*x1237);
IkReal x1239=(x1235*x1237);
j7eval[0]=((IKabs((x1239+(((-1.0)*x1236*x1239))+(((-1.0)*x1237*(x1236*x1236))))))+(IKabs((((new_r00*x1238))+((x1238*(new_r00*new_r00*new_r00)))+((new_r00*x1238*(new_r10*new_r10)))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1242 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1242.valid){
continue;
}
IkReal x1241=((1.0)*(x1242.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1241)));
new_r11=0;
new_r00=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1241)));
IkReal gconst22=0;
IkReal x1243 = new_r10*new_r10;
if(IKabs(x1243)==0){
continue;
}
IkReal gconst23=((1.0)*new_r10*(pow(x1243,-0.5)));
j7eval[0]=new_r01;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1244=IKPowWithIntegerCheck(gconst23,-1);
if(!x1244.valid){
continue;
}
sj7array[0]=((-1.0)*new_r01*(x1244.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1245=IKcos(j7);
IkReal x1246=IKsin(j7);
evalcond[0]=(new_r01*x1245);
evalcond[1]=(gconst23*x1245);
evalcond[2]=((-1.0)*new_r10*x1245);
evalcond[3]=(gconst23+((new_r01*x1246)));
evalcond[4]=(gconst23+((new_r10*x1246)));
evalcond[5]=(((gconst23*x1246))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1247=IKPowWithIntegerCheck(new_r01,-1);
if(!x1247.valid){
continue;
}
sj7array[0]=((-1.0)*gconst23*(x1247.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1248=IKcos(j7);
IkReal x1249=IKsin(j7);
IkReal x1250=(gconst23*x1249);
evalcond[0]=(new_r01*x1248);
evalcond[1]=(gconst23*x1248);
evalcond[2]=((-1.0)*new_r10*x1248);
evalcond[3]=(x1250+new_r01);
evalcond[4]=(gconst23+((new_r10*x1249)));
evalcond[5]=(x1250+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst23;
evalcond[2]=gconst22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x1251=((-1.0)*new_r00);
CheckValue<IkReal> x1253 = IKatan2WithCheck(IkReal(x1251),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1253.valid){
continue;
}
IkReal x1252=((1.0)*(x1253.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1252)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1252)));
IkReal gconst22=x1251;
IkReal gconst23=((1.0)*new_r10);
j7eval[0]=1.0;
j7eval[1]=1.0;
j7eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs(((1.0)*new_r00*new_r10))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x1254=((-1.0)*new_r00);
CheckValue<IkReal> x1256 = IKatan2WithCheck(IkReal(x1254),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1256.valid){
continue;
}
IkReal x1255=((1.0)*(x1256.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1255)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1255)));
IkReal gconst22=x1254;
IkReal gconst23=((1.0)*new_r10);
j7eval[0]=-1.0;
j7eval[1]=((IKabs(((1.0)*new_r00*new_r10)))+(IKabs(((-1.0)+(new_r10*new_r10)))));
j7eval[2]=-1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x1257=((-1.0)*new_r00);
CheckValue<IkReal> x1259 = IKatan2WithCheck(IkReal(x1257),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1259.valid){
continue;
}
IkReal x1258=((1.0)*(x1259.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1258)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1258)));
IkReal gconst22=x1257;
IkReal gconst23=((1.0)*new_r10);
j7eval[0]=-1.0;
j7eval[1]=((IKabs(((-1.0)+(((2.0)*(new_r10*new_r10))))))+(IKabs(((2.0)*new_r00*new_r10))));
j7eval[2]=-1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1260=((1.0)*gconst23);
CheckValue<IkReal> x1261 = IKatan2WithCheck(IkReal(((gconst23*gconst23)+(((-1.0)*(new_r00*new_r00))))),IkReal((((new_r00*new_r10))+(((-1.0)*gconst22*x1260)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1261.valid){
continue;
}
CheckValue<IkReal> x1262=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x1260))+((gconst22*new_r00)))),-1);
if(!x1262.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1261.value)+(((1.5707963267949)*(x1262.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1263=IKcos(j7);
IkReal x1264=IKsin(j7);
IkReal x1265=(gconst23*x1264);
IkReal x1266=(gconst22*x1264);
IkReal x1267=((1.0)*x1263);
IkReal x1268=(gconst22*x1267);
evalcond[0]=(x1265+(((-1.0)*x1268)));
evalcond[1]=(gconst23+((new_r00*x1263))+((new_r10*x1264)));
evalcond[2]=(x1266+((gconst23*x1263))+new_r00);
evalcond[3]=((((-1.0)*new_r10*x1267))+gconst22+((new_r00*x1264)));
evalcond[4]=((((-1.0)*gconst23*x1267))+(((-1.0)*x1266)));
evalcond[5]=(x1265+new_r10+(((-1.0)*x1268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1269=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst22*gconst22)))+(((-1.0)*(gconst23*gconst23))))),-1);
if(!x1269.valid){
continue;
}
CheckValue<IkReal> x1270 = IKatan2WithCheck(IkReal((gconst22*new_r00)),IkReal((gconst23*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1270.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1269.value)))+(x1270.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1271=IKcos(j7);
IkReal x1272=IKsin(j7);
IkReal x1273=(gconst23*x1272);
IkReal x1274=(gconst22*x1272);
IkReal x1275=((1.0)*x1271);
IkReal x1276=(gconst22*x1275);
evalcond[0]=(x1273+(((-1.0)*x1276)));
evalcond[1]=(((new_r00*x1271))+gconst23+((new_r10*x1272)));
evalcond[2]=(x1274+((gconst23*x1271))+new_r00);
evalcond[3]=((((-1.0)*new_r10*x1275))+((new_r00*x1272))+gconst22);
evalcond[4]=((((-1.0)*gconst23*x1275))+(((-1.0)*x1274)));
evalcond[5]=(x1273+(((-1.0)*x1276))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1277=IKPowWithIntegerCheck(IKsign((((gconst23*new_r10))+(((-1.0)*gconst22*new_r00)))),-1);
if(!x1277.valid){
continue;
}
CheckValue<IkReal> x1278 = IKatan2WithCheck(IkReal(gconst22*gconst22),IkReal((gconst22*gconst23)),IKFAST_ATAN2_MAGTHRESH);
if(!x1278.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1277.value)))+(x1278.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1279=IKcos(j7);
IkReal x1280=IKsin(j7);
IkReal x1281=(gconst23*x1280);
IkReal x1282=(gconst22*x1280);
IkReal x1283=((1.0)*x1279);
IkReal x1284=(gconst22*x1283);
evalcond[0]=(x1281+(((-1.0)*x1284)));
evalcond[1]=(((new_r10*x1280))+((new_r00*x1279))+gconst23);
evalcond[2]=(x1282+((gconst23*x1279))+new_r00);
evalcond[3]=(gconst22+((new_r00*x1280))+(((-1.0)*new_r10*x1283)));
evalcond[4]=((((-1.0)*x1282))+(((-1.0)*gconst23*x1283)));
evalcond[5]=(x1281+(((-1.0)*x1284))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1285=IKPowWithIntegerCheck(gconst22,-1);
if(!x1285.valid){
continue;
}
sj7array[0]=(new_r11*(x1285.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1286=IKcos(j7);
IkReal x1287=IKsin(j7);
IkReal x1288=((-1.0)*x1286);
evalcond[0]=(new_r00*x1286);
evalcond[1]=(new_r11*x1288);
evalcond[2]=(gconst22*x1288);
evalcond[3]=(gconst22+((new_r00*x1287)));
evalcond[4]=(((gconst22*x1287))+new_r00);
evalcond[5]=(((new_r11*x1287))+(((-1.0)*gconst22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
IkReal x1289=((-1.0)*new_r00);
CheckValue<IkReal> x1291 = IKatan2WithCheck(IkReal(x1289),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1291.valid){
continue;
}
IkReal x1290=((1.0)*(x1291.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1290)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1290)));
IkReal x1292 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x1292)==0){
continue;
}
IkReal gconst22=(x1289*(pow(x1292,-0.5)));
IkReal gconst23=0;
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1293=((-1.0)*new_r00);
CheckValue<IkReal> x1295 = IKatan2WithCheck(IkReal(x1293),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1295.valid){
continue;
}
IkReal x1294=((1.0)*(x1295.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1294)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1294)));
IkReal x1296 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x1296)==0){
continue;
}
IkReal gconst22=(x1293*(pow(x1296,-0.5)));
IkReal gconst23=0;
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x1297=((-1.0)*new_r00);
CheckValue<IkReal> x1299 = IKatan2WithCheck(IkReal(x1297),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1299.valid){
continue;
}
IkReal x1298=((1.0)*(x1299.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1298)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1298)));
IkReal x1300 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x1300)==0){
continue;
}
IkReal gconst22=(x1297*(pow(x1300,-0.5)));
IkReal gconst23=0;
j7eval[0]=new_r00;
j7eval[1]=new_r01;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1301=IKPowWithIntegerCheck(new_r00,-1);
if(!x1301.valid){
continue;
}
CheckValue<IkReal> x1302=IKPowWithIntegerCheck(new_r01,-1);
if(!x1302.valid){
continue;
}
if( IKabs(((-1.0)*gconst22*(x1301.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst22*(x1302.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst22*(x1301.value)))+IKsqr((gconst22*(x1302.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst22*(x1301.value)), (gconst22*(x1302.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1303=IKsin(j7);
IkReal x1304=IKcos(j7);
IkReal x1305=((1.0)*gconst22);
IkReal x1306=(gconst22*x1303);
evalcond[0]=(new_r01*x1303);
evalcond[1]=(new_r00*x1304);
evalcond[2]=((-1.0)*x1306);
evalcond[3]=((-1.0)*gconst22*x1304);
evalcond[4]=(gconst22+((new_r00*x1303)));
evalcond[5]=(x1306+new_r00);
evalcond[6]=(new_r01+(((-1.0)*x1304*x1305)));
evalcond[7]=((((-1.0)*x1305))+((new_r01*x1304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1307=IKPowWithIntegerCheck(new_r00,-1);
if(!x1307.valid){
continue;
}
CheckValue<IkReal> x1308=IKPowWithIntegerCheck(gconst22,-1);
if(!x1308.valid){
continue;
}
if( IKabs(((-1.0)*gconst22*(x1307.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x1308.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst22*(x1307.value)))+IKsqr((new_r01*(x1308.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst22*(x1307.value)), (new_r01*(x1308.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1309=IKsin(j7);
IkReal x1310=IKcos(j7);
IkReal x1311=((1.0)*gconst22);
IkReal x1312=(gconst22*x1309);
evalcond[0]=(new_r01*x1309);
evalcond[1]=(new_r00*x1310);
evalcond[2]=((-1.0)*x1312);
evalcond[3]=((-1.0)*gconst22*x1310);
evalcond[4]=(gconst22+((new_r00*x1309)));
evalcond[5]=(x1312+new_r00);
evalcond[6]=((((-1.0)*x1310*x1311))+new_r01);
evalcond[7]=(((new_r01*x1310))+(((-1.0)*x1311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1313=IKPowWithIntegerCheck(IKsign(gconst22),-1);
if(!x1313.valid){
continue;
}
CheckValue<IkReal> x1314 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1314.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1313.value)))+(x1314.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1315=IKsin(j7);
IkReal x1316=IKcos(j7);
IkReal x1317=((1.0)*gconst22);
IkReal x1318=(gconst22*x1315);
evalcond[0]=(new_r01*x1315);
evalcond[1]=(new_r00*x1316);
evalcond[2]=((-1.0)*x1318);
evalcond[3]=((-1.0)*gconst22*x1316);
evalcond[4]=(((new_r00*x1315))+gconst22);
evalcond[5]=(x1318+new_r00);
evalcond[6]=(new_r01+(((-1.0)*x1316*x1317)));
evalcond[7]=(((new_r01*x1316))+(((-1.0)*x1317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r10);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
IkReal x1319=((-1.0)*new_r00);
CheckValue<IkReal> x1321 = IKatan2WithCheck(IkReal(x1319),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1321.valid){
continue;
}
IkReal x1320=((1.0)*(x1321.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1320)));
new_r10=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1320)));
IkReal x1322 = new_r00*new_r00;
if(IKabs(x1322)==0){
continue;
}
IkReal gconst22=(x1319*(pow(x1322,-0.5)));
IkReal gconst23=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1323=((-1.0)*new_r00);
CheckValue<IkReal> x1325 = IKatan2WithCheck(IkReal(x1323),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1325.valid){
continue;
}
IkReal x1324=((1.0)*(x1325.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1324)));
new_r10=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1324)));
IkReal x1326 = new_r00*new_r00;
if(IKabs(x1326)==0){
continue;
}
IkReal gconst22=(x1323*(pow(x1326,-0.5)));
IkReal gconst23=0;
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1327=((-1.0)*new_r00);
CheckValue<IkReal> x1329 = IKatan2WithCheck(IkReal(x1327),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1329.valid){
continue;
}
IkReal x1328=((1.0)*(x1329.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1328)));
new_r10=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1328)));
IkReal x1330 = new_r00*new_r00;
if(IKabs(x1330)==0){
continue;
}
IkReal gconst22=(x1327*(pow(x1330,-0.5)));
IkReal gconst23=0;
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1331=IKPowWithIntegerCheck(new_r00,-1);
if(!x1331.valid){
continue;
}
CheckValue<IkReal> x1332=IKPowWithIntegerCheck(gconst22,-1);
if(!x1332.valid){
continue;
}
if( IKabs(((-1.0)*gconst22*(x1331.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x1332.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst22*(x1331.value)))+IKsqr((new_r01*(x1332.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst22*(x1331.value)), (new_r01*(x1332.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1333=IKcos(j7);
IkReal x1334=IKsin(j7);
IkReal x1335=(gconst22*x1334);
IkReal x1336=((1.0)*x1333);
evalcond[0]=(new_r00*x1333);
evalcond[1]=((-1.0)*gconst22*x1333);
evalcond[2]=(gconst22+((new_r00*x1334)));
evalcond[3]=(x1335+new_r00);
evalcond[4]=((((-1.0)*gconst22*x1336))+new_r01);
evalcond[5]=((((-1.0)*x1335))+new_r11);
evalcond[6]=(((new_r01*x1334))+(((-1.0)*new_r11*x1336)));
evalcond[7]=(((new_r11*x1334))+((new_r01*x1333))+(((-1.0)*gconst22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1337=IKPowWithIntegerCheck(IKsign(gconst22),-1);
if(!x1337.valid){
continue;
}
CheckValue<IkReal> x1338 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1338.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1337.value)))+(x1338.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1339=IKcos(j7);
IkReal x1340=IKsin(j7);
IkReal x1341=(gconst22*x1340);
IkReal x1342=((1.0)*x1339);
evalcond[0]=(new_r00*x1339);
evalcond[1]=((-1.0)*gconst22*x1339);
evalcond[2]=(gconst22+((new_r00*x1340)));
evalcond[3]=(x1341+new_r00);
evalcond[4]=((((-1.0)*gconst22*x1342))+new_r01);
evalcond[5]=(new_r11+(((-1.0)*x1341)));
evalcond[6]=((((-1.0)*new_r11*x1342))+((new_r01*x1340)));
evalcond[7]=(((new_r01*x1339))+(((-1.0)*gconst22))+((new_r11*x1340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1343=IKPowWithIntegerCheck(IKsign(gconst22),-1);
if(!x1343.valid){
continue;
}
CheckValue<IkReal> x1344 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1344.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1343.value)))+(x1344.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1345=IKcos(j7);
IkReal x1346=IKsin(j7);
IkReal x1347=(gconst22*x1346);
IkReal x1348=((1.0)*x1345);
evalcond[0]=(new_r00*x1345);
evalcond[1]=((-1.0)*gconst22*x1345);
evalcond[2]=(gconst22+((new_r00*x1346)));
evalcond[3]=(x1347+new_r00);
evalcond[4]=((((-1.0)*gconst22*x1348))+new_r01);
evalcond[5]=(new_r11+(((-1.0)*x1347)));
evalcond[6]=((((-1.0)*new_r11*x1348))+((new_r01*x1346)));
evalcond[7]=(((new_r01*x1345))+(((-1.0)*gconst22))+((new_r11*x1346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1349=((1.0)*gconst23);
CheckValue<IkReal> x1350 = IKatan2WithCheck(IkReal(((gconst23*gconst23)+(((-1.0)*(new_r00*new_r00))))),IkReal(((((-1.0)*gconst22*x1349))+((new_r00*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1350.valid){
continue;
}
CheckValue<IkReal> x1351=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x1349))+((gconst22*new_r00)))),-1);
if(!x1351.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1350.value)+(((1.5707963267949)*(x1351.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1352=IKcos(j7);
IkReal x1353=IKsin(j7);
IkReal x1354=(gconst23*x1353);
IkReal x1355=(gconst22*x1353);
IkReal x1356=((1.0)*x1352);
IkReal x1357=(gconst22*x1356);
evalcond[0]=(((new_r10*x1353))+gconst23+((new_r00*x1352)));
evalcond[1]=(x1355+((gconst23*x1352))+new_r00);
evalcond[2]=(gconst22+(((-1.0)*new_r10*x1356))+((new_r00*x1353)));
evalcond[3]=(gconst23+(((-1.0)*new_r11*x1356))+((new_r01*x1353)));
evalcond[4]=(x1354+(((-1.0)*x1357))+new_r01);
evalcond[5]=(x1354+(((-1.0)*x1357))+new_r10);
evalcond[6]=(((new_r11*x1353))+((new_r01*x1352))+(((-1.0)*gconst22)));
evalcond[7]=((((-1.0)*x1355))+new_r11+(((-1.0)*gconst23*x1356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1358=((1.0)*gconst22);
CheckValue<IkReal> x1359=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r11*x1358))+(((-1.0)*gconst23*new_r01)))),-1);
if(!x1359.valid){
continue;
}
CheckValue<IkReal> x1360 = IKatan2WithCheck(IkReal((((new_r00*new_r11))+(gconst23*gconst23))),IkReal((((new_r00*new_r01))+(((-1.0)*gconst23*x1358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1360.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1359.value)))+(x1360.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1361=IKcos(j7);
IkReal x1362=IKsin(j7);
IkReal x1363=(gconst23*x1362);
IkReal x1364=(gconst22*x1362);
IkReal x1365=((1.0)*x1361);
IkReal x1366=(gconst22*x1365);
evalcond[0]=(((new_r10*x1362))+gconst23+((new_r00*x1361)));
evalcond[1]=(x1364+((gconst23*x1361))+new_r00);
evalcond[2]=(gconst22+(((-1.0)*new_r10*x1365))+((new_r00*x1362)));
evalcond[3]=(gconst23+(((-1.0)*new_r11*x1365))+((new_r01*x1362)));
evalcond[4]=(x1363+new_r01+(((-1.0)*x1366)));
evalcond[5]=(x1363+new_r10+(((-1.0)*x1366)));
evalcond[6]=((((-1.0)*gconst22))+((new_r01*x1361))+((new_r11*x1362)));
evalcond[7]=((((-1.0)*x1364))+new_r11+(((-1.0)*gconst23*x1365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1367=((1.0)*new_r10);
CheckValue<IkReal> x1368=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r11*x1367))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x1368.valid){
continue;
}
CheckValue<IkReal> x1369 = IKatan2WithCheck(IkReal((((gconst23*new_r11))+((gconst23*new_r00)))),IkReal((((gconst23*new_r01))+(((-1.0)*gconst23*x1367)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1369.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1368.value)))+(x1369.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1370=IKcos(j7);
IkReal x1371=IKsin(j7);
IkReal x1372=(gconst23*x1371);
IkReal x1373=(gconst22*x1371);
IkReal x1374=((1.0)*x1370);
IkReal x1375=(gconst22*x1374);
evalcond[0]=(gconst23+((new_r10*x1371))+((new_r00*x1370)));
evalcond[1]=(x1373+((gconst23*x1370))+new_r00);
evalcond[2]=(gconst22+((new_r00*x1371))+(((-1.0)*new_r10*x1374)));
evalcond[3]=((((-1.0)*new_r11*x1374))+gconst23+((new_r01*x1371)));
evalcond[4]=(x1372+(((-1.0)*x1375))+new_r01);
evalcond[5]=(x1372+(((-1.0)*x1375))+new_r10);
evalcond[6]=(((new_r11*x1371))+(((-1.0)*gconst22))+((new_r01*x1370)));
evalcond[7]=((((-1.0)*x1373))+(((-1.0)*gconst23*x1374))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r00), new_r01);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1376=IKsin(j7);
IkReal x1377=IKcos(j7);
IkReal x1378=((1.0)*x1377);
evalcond[0]=(x1376+new_r00);
evalcond[1]=((((-1.0)*x1378))+new_r01);
evalcond[2]=((((-1.0)*x1376))+new_r11);
evalcond[3]=((((-1.0)*x1378))+new_r10);
evalcond[4]=(((new_r10*x1376))+((new_r00*x1377)));
evalcond[5]=((((-1.0)*new_r11*x1378))+((new_r01*x1376)));
evalcond[6]=((-1.0)+((new_r11*x1376))+((new_r01*x1377)));
evalcond[7]=((1.0)+((new_r00*x1376))+(((-1.0)*new_r10*x1378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r11), ((-1.0)*new_r01));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1379=IKcos(j7);
IkReal x1380=IKsin(j7);
IkReal x1381=((1.0)*x1379);
evalcond[0]=(x1379+new_r01);
evalcond[1]=(x1380+new_r11);
evalcond[2]=(x1379+new_r10);
evalcond[3]=((((-1.0)*x1380))+new_r00);
evalcond[4]=(((new_r10*x1380))+((new_r00*x1379)));
evalcond[5]=(((new_r01*x1380))+(((-1.0)*new_r11*x1381)));
evalcond[6]=((1.0)+((new_r11*x1380))+((new_r01*x1379)));
evalcond[7]=((-1.0)+(((-1.0)*new_r10*x1381))+((new_r00*x1380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r11=0;
new_r00=0;
j7eval[0]=new_r10;
j7eval[1]=((IKabs(cj9))+(IKabs(sj9)));
j7eval[2]=IKsign(new_r10);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r11=0;
new_r00=0;
j7eval[0]=new_r01;
j7eval[1]=((IKabs(cj9))+(IKabs(sj9)));
j7eval[2]=IKsign(new_r01);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r11=0;
new_r00=0;
j7eval[0]=new_r01;
j7eval[1]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1382=IKPowWithIntegerCheck(new_r01,-1);
if(!x1382.valid){
continue;
}
CheckValue<IkReal> x1383=IKPowWithIntegerCheck(new_r10,-1);
if(!x1383.valid){
continue;
}
if( IKabs(((-1.0)*cj9*(x1382.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj9*(x1383.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj9*(x1382.value)))+IKsqr((sj9*(x1383.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*cj9*(x1382.value)), (sj9*(x1383.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x1384=IKsin(j7);
IkReal x1385=IKcos(j7);
IkReal x1386=(cj9*x1384);
IkReal x1387=((1.0)*x1385);
IkReal x1388=(sj9*x1387);
evalcond[0]=(cj9+((new_r01*x1384)));
evalcond[1]=(((new_r10*x1384))+cj9);
evalcond[2]=(sj9+(((-1.0)*new_r10*x1387)));
evalcond[3]=((((-1.0)*sj9))+((new_r01*x1385)));
evalcond[4]=(((sj9*x1384))+((cj9*x1385)));
evalcond[5]=((((-1.0)*x1388))+x1386+new_r01);
evalcond[6]=((((-1.0)*x1388))+x1386+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1389=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x1389.valid){
continue;
}
CheckValue<IkReal> x1390 = IKatan2WithCheck(IkReal(((-1.0)*cj9)),IkReal(sj9),IKFAST_ATAN2_MAGTHRESH);
if(!x1390.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1389.value)))+(x1390.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x1391=IKsin(j7);
IkReal x1392=IKcos(j7);
IkReal x1393=(cj9*x1391);
IkReal x1394=((1.0)*x1392);
IkReal x1395=(sj9*x1394);
evalcond[0]=(cj9+((new_r01*x1391)));
evalcond[1]=(cj9+((new_r10*x1391)));
evalcond[2]=(sj9+(((-1.0)*new_r10*x1394)));
evalcond[3]=((((-1.0)*sj9))+((new_r01*x1392)));
evalcond[4]=(((sj9*x1391))+((cj9*x1392)));
evalcond[5]=(x1393+new_r01+(((-1.0)*x1395)));
evalcond[6]=(x1393+new_r10+(((-1.0)*x1395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1396=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x1396.valid){
continue;
}
CheckValue<IkReal> x1397 = IKatan2WithCheck(IkReal(((-1.0)*cj9)),IkReal(sj9),IKFAST_ATAN2_MAGTHRESH);
if(!x1397.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1396.value)))+(x1397.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x1398=IKsin(j7);
IkReal x1399=IKcos(j7);
IkReal x1400=(cj9*x1398);
IkReal x1401=((1.0)*x1399);
IkReal x1402=(sj9*x1401);
evalcond[0]=(cj9+((new_r01*x1398)));
evalcond[1]=(cj9+((new_r10*x1398)));
evalcond[2]=(sj9+(((-1.0)*new_r10*x1401)));
evalcond[3]=((((-1.0)*sj9))+((new_r01*x1399)));
evalcond[4]=(((sj9*x1398))+((cj9*x1399)));
evalcond[5]=((((-1.0)*x1402))+x1400+new_r01);
evalcond[6]=((((-1.0)*x1402))+x1400+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1404 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1404.valid){
continue;
}
IkReal x1403=x1404.value;
j7array[0]=((-1.0)*x1403);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1403)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r10*(IKcos(j7))))+((new_r00*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1406 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1406.valid){
continue;
}
IkReal x1405=x1406.value;
j7array[0]=((-1.0)*x1405);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1405)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r11*(IKcos(j7))))+((new_r01*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r01=0;
new_r10=0;
j7eval[0]=new_r00;
j7eval[1]=((IKabs(cj9))+(IKabs(sj9)));
j7eval[2]=IKsign(new_r00);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r01=0;
new_r10=0;
j7eval[0]=new_r00;
j7eval[1]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1407=IKPowWithIntegerCheck(new_r00,-1);
if(!x1407.valid){
continue;
}
CheckValue<IkReal> x1408=IKPowWithIntegerCheck(new_r11,-1);
if(!x1408.valid){
continue;
}
if( IKabs(((-1.0)*sj9*(x1407.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj9*(x1408.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj9*(x1407.value)))+IKsqr((cj9*(x1408.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*sj9*(x1407.value)), (cj9*(x1408.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x1409=IKcos(j7);
IkReal x1410=IKsin(j7);
IkReal x1411=((1.0)*sj9);
IkReal x1412=(sj9*x1410);
IkReal x1413=(cj9*x1409);
evalcond[0]=(sj9+((new_r00*x1410)));
evalcond[1]=(cj9+((new_r00*x1409)));
evalcond[2]=(cj9+(((-1.0)*new_r11*x1409)));
evalcond[3]=((((-1.0)*x1411))+((new_r11*x1410)));
evalcond[4]=(((cj9*x1410))+(((-1.0)*x1409*x1411)));
evalcond[5]=(x1412+x1413+new_r00);
evalcond[6]=((((-1.0)*x1410*x1411))+new_r11+(((-1.0)*x1413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1414 = IKatan2WithCheck(IkReal(((-1.0)*sj9)),IkReal(((-1.0)*cj9)),IKFAST_ATAN2_MAGTHRESH);
if(!x1414.valid){
continue;
}
CheckValue<IkReal> x1415=IKPowWithIntegerCheck(IKsign(new_r00),-1);
if(!x1415.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1414.value)+(((1.5707963267949)*(x1415.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x1416=IKcos(j7);
IkReal x1417=IKsin(j7);
IkReal x1418=((1.0)*sj9);
IkReal x1419=(sj9*x1417);
IkReal x1420=(cj9*x1416);
evalcond[0]=(sj9+((new_r00*x1417)));
evalcond[1]=(cj9+((new_r00*x1416)));
evalcond[2]=(cj9+(((-1.0)*new_r11*x1416)));
evalcond[3]=((((-1.0)*x1418))+((new_r11*x1417)));
evalcond[4]=((((-1.0)*x1416*x1418))+((cj9*x1417)));
evalcond[5]=(x1420+x1419+new_r00);
evalcond[6]=((((-1.0)*x1417*x1418))+(((-1.0)*x1420))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1421=((1.0)*new_r00);
CheckValue<IkReal> x1422=IKPowWithIntegerCheck(IKsign((((cj9*new_r10))+(((-1.0)*sj9*x1421)))),-1);
if(!x1422.valid){
continue;
}
CheckValue<IkReal> x1423 = IKatan2WithCheck(IkReal(((((-1.0)*(cj9*cj9)))+(new_r00*new_r00))),IkReal(((((-1.0)*new_r10*x1421))+((cj9*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1423.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1422.value)))+(x1423.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1424=IKsin(j7);
IkReal x1425=IKcos(j7);
IkReal x1426=(cj9*x1424);
IkReal x1427=(sj9*x1424);
IkReal x1428=(cj9*x1425);
IkReal x1429=((1.0)*x1425);
IkReal x1430=(sj9*x1429);
evalcond[0]=(cj9+((new_r00*x1425))+((new_r10*x1424)));
evalcond[1]=(x1427+x1428+new_r00);
evalcond[2]=(sj9+(((-1.0)*new_r10*x1429))+((new_r00*x1424)));
evalcond[3]=(cj9+(((-1.0)*new_r11*x1429))+((new_r01*x1424)));
evalcond[4]=((((-1.0)*x1430))+x1426+new_r01);
evalcond[5]=((((-1.0)*x1430))+x1426+new_r10);
evalcond[6]=((((-1.0)*sj9))+((new_r11*x1424))+((new_r01*x1425)));
evalcond[7]=((((-1.0)*x1428))+(((-1.0)*x1427))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1431=((1.0)*new_r10);
CheckValue<IkReal> x1432=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj9*new_r00))+(((-1.0)*sj9*x1431)))),-1);
if(!x1432.valid){
continue;
}
CheckValue<IkReal> x1433 = IKatan2WithCheck(IkReal((((cj9*sj9))+((new_r00*new_r01)))),IkReal(((cj9*cj9)+(((-1.0)*new_r01*x1431)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1433.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1432.value)))+(x1433.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1434=IKsin(j7);
IkReal x1435=IKcos(j7);
IkReal x1436=(cj9*x1434);
IkReal x1437=(sj9*x1434);
IkReal x1438=(cj9*x1435);
IkReal x1439=((1.0)*x1435);
IkReal x1440=(sj9*x1439);
evalcond[0]=(cj9+((new_r00*x1435))+((new_r10*x1434)));
evalcond[1]=(x1437+x1438+new_r00);
evalcond[2]=(sj9+((new_r00*x1434))+(((-1.0)*new_r10*x1439)));
evalcond[3]=(cj9+((new_r01*x1434))+(((-1.0)*new_r11*x1439)));
evalcond[4]=(x1436+(((-1.0)*x1440))+new_r01);
evalcond[5]=(x1436+(((-1.0)*x1440))+new_r10);
evalcond[6]=((((-1.0)*sj9))+((new_r11*x1434))+((new_r01*x1435)));
evalcond[7]=((((-1.0)*x1438))+(((-1.0)*x1437))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1441=((1.0)*new_r10);
CheckValue<IkReal> x1442 = IKatan2WithCheck(IkReal((((cj9*new_r00))+((cj9*new_r11)))),IkReal((((cj9*new_r01))+(((-1.0)*cj9*x1441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1442.valid){
continue;
}
CheckValue<IkReal> x1443=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r11*x1441))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x1443.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1442.value)+(((1.5707963267949)*(x1443.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1444=IKsin(j7);
IkReal x1445=IKcos(j7);
IkReal x1446=(cj9*x1444);
IkReal x1447=(sj9*x1444);
IkReal x1448=(cj9*x1445);
IkReal x1449=((1.0)*x1445);
IkReal x1450=(sj9*x1449);
evalcond[0]=(((new_r10*x1444))+cj9+((new_r00*x1445)));
evalcond[1]=(x1447+x1448+new_r00);
evalcond[2]=(sj9+(((-1.0)*new_r10*x1449))+((new_r00*x1444)));
evalcond[3]=(cj9+((new_r01*x1444))+(((-1.0)*new_r11*x1449)));
evalcond[4]=((((-1.0)*x1450))+x1446+new_r01);
evalcond[5]=((((-1.0)*x1450))+x1446+new_r10);
evalcond[6]=((((-1.0)*sj9))+((new_r11*x1444))+((new_r01*x1445)));
evalcond[7]=((((-1.0)*x1448))+(((-1.0)*x1447))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j7eval[0]=((IKabs((new_r11*new_r22)))+(IKabs((new_r01*new_r22))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1452 = IKatan2WithCheck(IkReal((new_r01*new_r22)),IkReal((new_r11*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1452.valid){
continue;
}
IkReal x1451=x1452.value;
j7array[0]=((-1.0)*x1451);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1451)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1453=IKcos(j7);
IkReal x1454=IKsin(j7);
IkReal x1455=(new_r10*x1454);
IkReal x1456=((1.0)*x1453);
IkReal x1457=(new_r00*x1453);
evalcond[0]=(((new_r01*x1453))+((new_r11*x1454)));
evalcond[1]=(x1455+x1457);
evalcond[2]=((((-1.0)*new_r10*x1456))+((new_r00*x1454)));
evalcond[3]=(((new_r01*x1454))+(((-1.0)*new_r11*x1456)));
evalcond[4]=(((new_r22*x1455))+((new_r22*x1457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1459 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1459.valid){
continue;
}
IkReal x1458=x1459.value;
j7array[0]=((-1.0)*x1458);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1458)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1460=IKsin(j7);
IkReal x1461=IKcos(j7);
IkReal x1462=(new_r22*x1460);
IkReal x1463=((1.0)*x1461);
IkReal x1464=(new_r22*x1461);
evalcond[0]=(((new_r01*x1461))+((new_r11*x1460)));
evalcond[1]=((((-1.0)*new_r10*x1463))+((new_r00*x1460)));
evalcond[2]=(((new_r01*x1460))+(((-1.0)*new_r11*x1463)));
evalcond[3]=(((new_r01*x1464))+((new_r11*x1462)));
evalcond[4]=(((new_r00*x1464))+((new_r10*x1462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1466 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1466.valid){
continue;
}
IkReal x1465=x1466.value;
j7array[0]=((-1.0)*x1465);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1465)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1467=IKsin(j7);
IkReal x1468=IKcos(j7);
IkReal x1469=(new_r10*x1467);
IkReal x1470=((1.0)*x1468);
IkReal x1471=(new_r00*x1468);
evalcond[0]=(x1469+x1471);
evalcond[1]=(((new_r00*x1467))+(((-1.0)*new_r10*x1470)));
evalcond[2]=(((new_r01*x1467))+(((-1.0)*new_r11*x1470)));
evalcond[3]=(((new_r11*new_r22*x1467))+((new_r01*new_r22*x1468)));
evalcond[4]=(((new_r22*x1471))+((new_r22*x1469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1473=IKPowWithIntegerCheck(sj8,-1);
if(!x1473.valid){
continue;
}
IkReal x1472=x1473.value;
CheckValue<IkReal> x1474=IKPowWithIntegerCheck(new_r12,-1);
if(!x1474.valid){
continue;
}
if( IKabs((x1472*(x1474.value)*(((-1.0)+(new_r02*new_r02)+(cj8*cj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x1472)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1472*(x1474.value)*(((-1.0)+(new_r02*new_r02)+(cj8*cj8)))))+IKsqr(((-1.0)*new_r02*x1472))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x1472*(x1474.value)*(((-1.0)+(new_r02*new_r02)+(cj8*cj8)))), ((-1.0)*new_r02*x1472));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[18];
IkReal x1475=IKcos(j7);
IkReal x1476=IKsin(j7);
IkReal x1477=(cj8*sj9);
IkReal x1478=((1.0)*new_r10);
IkReal x1479=((1.0)*cj9);
IkReal x1480=((1.0)*sj8);
IkReal x1481=(new_r12*x1476);
IkReal x1482=(sj8*x1476);
IkReal x1483=(new_r02*x1475);
IkReal x1484=((1.0)*x1475);
IkReal x1485=(new_r11*x1476);
IkReal x1486=(new_r10*x1476);
IkReal x1487=(cj8*x1475);
evalcond[0]=(((sj8*x1475))+new_r02);
evalcond[1]=(x1482+new_r12);
evalcond[2]=(((new_r12*x1475))+(((-1.0)*new_r02*x1476)));
evalcond[3]=(sj8+x1483+x1481);
evalcond[4]=(sj9+((new_r00*x1476))+(((-1.0)*x1475*x1478)));
evalcond[5]=(cj9+(((-1.0)*new_r11*x1484))+((new_r01*x1476)));
evalcond[6]=(((cj9*x1476))+new_r01+((x1475*x1477)));
evalcond[7]=(((new_r01*x1475))+x1477+x1485);
evalcond[8]=((((-1.0)*x1479*x1487))+((sj9*x1476))+new_r00);
evalcond[9]=((((-1.0)*x1475*x1479))+((x1476*x1477))+new_r11);
evalcond[10]=(((new_r00*x1475))+x1486+(((-1.0)*cj8*x1479)));
evalcond[11]=((((-1.0)*sj9*x1484))+new_r10+(((-1.0)*cj8*x1476*x1479)));
evalcond[12]=(((cj8*x1483))+((cj8*x1481))+((new_r22*sj8)));
evalcond[13]=(sj9+((cj8*x1485))+((new_r01*x1487))+((new_r21*sj8)));
evalcond[14]=((((-1.0)*new_r00*x1475*x1480))+((cj8*new_r20))+(((-1.0)*x1478*x1482)));
evalcond[15]=(((cj8*new_r21))+(((-1.0)*x1480*x1485))+(((-1.0)*new_r01*x1475*x1480)));
evalcond[16]=((-1.0)+((cj8*new_r22))+(((-1.0)*x1480*x1483))+(((-1.0)*x1480*x1481)));
evalcond[17]=(((new_r20*sj8))+((cj8*x1486))+((new_r00*x1487))+(((-1.0)*x1479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1488=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x1488.valid){
continue;
}
CheckValue<IkReal> x1489 = IKatan2WithCheck(IkReal(((-1.0)*new_r12)),IkReal(((-1.0)*new_r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x1489.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1488.value)))+(x1489.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[18];
IkReal x1490=IKcos(j7);
IkReal x1491=IKsin(j7);
IkReal x1492=(cj8*sj9);
IkReal x1493=((1.0)*new_r10);
IkReal x1494=((1.0)*cj9);
IkReal x1495=((1.0)*sj8);
IkReal x1496=(new_r12*x1491);
IkReal x1497=(sj8*x1491);
IkReal x1498=(new_r02*x1490);
IkReal x1499=((1.0)*x1490);
IkReal x1500=(new_r11*x1491);
IkReal x1501=(new_r10*x1491);
IkReal x1502=(cj8*x1490);
evalcond[0]=(((sj8*x1490))+new_r02);
evalcond[1]=(x1497+new_r12);
evalcond[2]=((((-1.0)*new_r02*x1491))+((new_r12*x1490)));
evalcond[3]=(sj8+x1496+x1498);
evalcond[4]=(sj9+((new_r00*x1491))+(((-1.0)*x1490*x1493)));
evalcond[5]=(cj9+((new_r01*x1491))+(((-1.0)*new_r11*x1499)));
evalcond[6]=(((cj9*x1491))+new_r01+((x1490*x1492)));
evalcond[7]=(((new_r01*x1490))+x1500+x1492);
evalcond[8]=((((-1.0)*x1494*x1502))+new_r00+((sj9*x1491)));
evalcond[9]=(((x1491*x1492))+(((-1.0)*x1490*x1494))+new_r11);
evalcond[10]=((((-1.0)*cj8*x1494))+((new_r00*x1490))+x1501);
evalcond[11]=((((-1.0)*cj8*x1491*x1494))+(((-1.0)*sj9*x1499))+new_r10);
evalcond[12]=(((cj8*x1496))+((cj8*x1498))+((new_r22*sj8)));
evalcond[13]=(sj9+((cj8*x1500))+((new_r01*x1502))+((new_r21*sj8)));
evalcond[14]=(((cj8*new_r20))+(((-1.0)*x1493*x1497))+(((-1.0)*new_r00*x1490*x1495)));
evalcond[15]=(((cj8*new_r21))+(((-1.0)*x1495*x1500))+(((-1.0)*new_r01*x1490*x1495)));
evalcond[16]=((-1.0)+((cj8*new_r22))+(((-1.0)*x1495*x1496))+(((-1.0)*x1495*x1498)));
evalcond[17]=(((new_r20*sj8))+(((-1.0)*x1494))+((cj8*x1501))+((new_r00*x1502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j9;
vinfos[6].indices[0] = _ij9[0];
vinfos[6].indices[1] = _ij9[1];
vinfos[6].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - a5 (42481bf21471c70a34dea9c89a3e8812)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
