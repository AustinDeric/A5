/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-03-01 15:29:51.962123
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((0.500166091229323)*x7);
x13=((0.865929489730186)*x6);
x14=((0.766383653399169)*x0);
x15=((0.500166091229323)*x8);
x16=((0.865929489730186)*x0);
x17=((0.865929489730186)*x8);
x18=((0.170327762565143)*x8);
x19=((1.15)*x4);
x20=((1.0)*x7);
x21=((0.766383653399169)*x6);
x22=((1.0)*x0);
x23=((2.1)*x6);
x24=((0.170327762565143)*x7);
x25=((0.25)*x6);
x26=((0.500166091229323)*x0);
x27=((0.865929489730186)*x9);
x28=((0.170327762565143)*x9);
x29=((1.0)*x6);
x30=((0.500166091229323)*x6);
x31=((2.1)*x0);
x32=((0.500166091229323)*x9);
x33=((0.865929489730186)*x7);
x34=((0.170327762565143)*x5);
x35=(x1*x3);
x36=(x2*x4);
x37=(x3*x4);
x38=(x5*x8);
x39=(x1*x2);
x40=(x11*x7);
x41=((0.500166091229323)*x36);
x42=((0.500166091229323)*x35);
x43=(x0*x39);
x44=((((-1.0)*x36))+x35);
x45=((((-0.865929489730186)*x36))+(((0.865929489730186)*x35)));
x46=((((-1.0)*x37))+(((-1.0)*x39)));
x47=(x44*x5);
x48=(x43+((x0*x37)));
x49=((((-1.0)*x22*x36))+((x0*x35)));
x50=(x6*((x39+x37)));
x51=(((x35*x6))+(((-1.0)*x29*x36)));
x52=(x47*x9);
x53=(x22*(((((-1.0)*x37))+(((-1.0)*x39)))));
x54=(x29*(((((-1.0)*x37))+(((-1.0)*x39)))));
x55=(x5*x50);
x56=(x49*x8);
x57=(x48*x5);
x58=(x51*x8);
x59=(x53*x7);
x60=(x57+((x6*x7)));
x61=((((-1.0)*x0*x20))+x55);
x62=(x60*x9);
x63=(x61*x9);
eerot[0]=(((x10*(((((-1.0)*x15*x49))+(((-1.0)*x32*x60))))))+((x8*(((((0.865929489730186)*x57))+((x13*x7))))))+((x9*((((x16*x36))+(((-1.0)*x16*x35))))))+((x11*(((((-1.0)*x12*x53))+(((-1.0)*x30*x5)))))));
eerot[1]=(((x10*(((((-1.0)*x20*x53))+(((-1.0)*x29*x5))))))+((x11*((x56+x62)))));
eerot[2]=(((x10*(((((-1.0)*x17*x49))+(((-1.0)*x27*x60))))))+((x9*((((x26*x35))+(((-1.0)*x26*x36))))))+((x11*(((((-1.0)*x33*x53))+(((-1.0)*x13*x5))))))+((x8*(((((-1.0)*x12*x6))+(((-0.500166091229323)*x57)))))));
IkReal x64=((1.0)*x36);
eetrans[0]=(((x9*(((((-1.0)*x14*x64))+((x14*x35))))))+((x11*(((((-1.0)*x34*x6))+(((-1.0)*x24*x53))))))+(((0.25)*x43))+((x0*x19))+((x10*(((((-1.0)*x18*x49))+(((-1.0)*x28*x60))))))+(((0.74)*x0))+(((-1.0)*x31*x64))+(((0.25)*x0*x37))+((x8*(((((-1.0)*x21*x7))+(((-0.766383653399169)*x57))))))+((x31*x35)));
eerot[3]=(((x8*(((((0.865929489730186)*x55))+(((-1.0)*x16*x7))))))+((x9*((((x13*x36))+(((-1.0)*x13*x35))))))+((x10*(((((-1.0)*x15*x51))+(((-1.0)*x32*x61))))))+((x11*(((((-1.0)*x12*x54))+((x26*x5)))))));
eerot[4]=(((x11*((x58+x63))))+((x10*((((x22*x5))+(((-1.0)*x20*x54)))))));
eerot[5]=(((x8*((((x0*x12))+(((-0.500166091229323)*x55))))))+((x11*((((x16*x5))+(((-1.0)*x33*x54))))))+((x10*(((((-1.0)*x27*x61))+(((-1.0)*x17*x51))))))+((x9*(((((-1.0)*x30*x36))+((x30*x35)))))));
IkReal x65=((1.0)*x36);
eetrans[1]=(((x11*((((x0*x34))+(((-1.0)*x24*x54))))))+((x23*x35))+((x10*(((((-1.0)*x18*x51))+(((-1.0)*x28*x61))))))+((x19*x6))+(((0.74)*x6))+((x8*(((((-0.766383653399169)*x55))+((x14*x7))))))+((x9*((((x21*x35))+(((-1.0)*x21*x65))))))+(((-1.0)*x23*x65))+((x25*x39))+((x25*x37)));
eerot[6]=(((x40*(((((-1.0)*x41))+x42))))+((x10*(((((-1.0)*x15*x46))+(((-1.0)*x32*x47))))))+((x38*x45))+((x9*(((((0.865929489730186)*x39))+(((0.865929489730186)*x37)))))));
eerot[7]=(((x11*((((x46*x8))+x52))))+((x10*x44*x7)));
eerot[8]=(((x38*(((((-1.0)*x42))+x41))))+((x9*(((((-0.500166091229323)*x39))+(((-0.500166091229323)*x37))))))+((x40*x45))+((x10*(((((-1.0)*x27*x47))+(((-1.0)*x17*x46)))))));
eetrans[2]=((0.45)+((x10*(((((-1.0)*x18*x46))+(((-1.0)*x28*x47))))))+(((1.15)*x1))+(((-0.25)*x36))+(((0.25)*x35))+((x40*(((((0.170327762565143)*x35))+(((-0.170327762565143)*x36))))))+((x38*(((((-0.766383653399169)*x35))+(((0.766383653399169)*x36))))))+((x9*(((((-0.766383653399169)*x39))+(((-0.766383653399169)*x37))))))+(((-2.1)*x37))+(((-2.1)*x39)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,j9,cj9,sj9,htj9,j9mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8,_ij9[2], _nj9;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-0.865929489730186)*r02))+(((-0.500166091229323)*r00)));
new_r01=((-1.0)*r01);
new_r02=((((0.500166091229323)*r02))+(((-0.865929489730186)*r00)));
new_px=((((0.578442034695454)*r00))+px+(((-0.530810948827629)*r02)));
new_r10=((((-0.865929489730186)*r12))+(((-0.500166091229323)*r10)));
new_r11=((-1.0)*r11);
new_r12=((((-0.865929489730186)*r10))+(((0.500166091229323)*r12)));
new_py=((((0.578442034695454)*r10))+py+(((-0.530810948827629)*r12)));
new_r20=((((-0.500166091229323)*r20))+(((-0.865929489730186)*r22)));
new_r21=((-1.0)*r21);
new_r22=((((-0.865929489730186)*r20))+(((0.500166091229323)*r22)));
new_pz=((-0.45)+(((-0.530810948827629)*r22))+(((0.578442034695454)*r20))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x66=((1.0)*px);
IkReal x67=((1.0)*pz);
IkReal x68=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x68))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x67)));
rxp0_2=((((-1.0)*r10*x66))+((py*r00)));
rxp1_0=((((-1.0)*r21*x68))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x67)));
rxp1_2=((((-1.0)*r11*x66))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x68)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x67)));
rxp2_2=((((-1.0)*r12*x66))+((py*r02)));
{
IkReal j4eval[1];
j4eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4, j5, j6]

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x70 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x70.valid){
continue;
}
IkReal x69=x70.value;
j4array[0]=((-1.0)*x69);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x69)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( (((1.07880055279721)+(((-0.205587634408891)*pp))+(((0.304269698925159)*cj4*px))+(((0.304269698925159)*py*sj4)))) < -1-IKFAST_SINCOS_THRESH || (((1.07880055279721)+(((-0.205587634408891)*pp))+(((0.304269698925159)*cj4*px))+(((0.304269698925159)*py*sj4)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x71=IKasin(((1.07880055279721)+(((-0.205587634408891)*pp))+(((0.304269698925159)*cj4*px))+(((0.304269698925159)*py*sj4))));
j6array[0]=((-3.02310269443166)+(((-1.0)*x71)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((0.118489959158138)+x71);
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j5eval[3];
IkReal x72=cj6*cj6;
IkReal x73=(pz*sj6);
IkReal x74=(cj4*px);
IkReal x75=((0.25)*sj6);
IkReal x76=(py*sj4);
IkReal x77=((1.35135135135135)*sj6);
IkReal x78=(cj6*sj6);
IkReal x79=(cj6*pz);
IkReal x80=(cj6*x76);
j5eval[0]=((((1.35135135135135)*x79))+sj6+(((-11.3513513513514)*cj6*x74))+(((-11.3513513513514)*x73))+(((8.4)*cj6))+(((6.21621621621622)*pz))+(((-1.0)*x74*x77))+(((-11.3513513513514)*x80))+(((-1.0)*x76*x77)));
j5eval[1]=IKsign(((((1.15)*pz))+(((0.25)*x79))+(((-2.1)*x80))+(((-2.1)*cj6*x74))+(((0.185)*sj6))+(((-1.0)*x74*x75))+(((1.554)*cj6))+(((-2.1)*x73))+(((-1.0)*x75*x76))));
j5eval[2]=((IKabs(((0.525)+((pz*x74))+((pz*x76))+(((-1.05)*x72))+(((-0.2875)*sj6))+(((4.3475)*x78))+(((-2.415)*cj6))+(((-0.74)*pz)))))+(IKabs(((-0.0625)+(((-1.05)*x78))+(pz*pz)+(((-4.3475)*x72))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x81=(pz*sj6);
IkReal x82=(cj4*px);
IkReal x83=((11.3513513513514)*sj6);
IkReal x84=((1.35135135135135)*cj6);
IkReal x85=(py*sj4);
IkReal x86=((2.1)*sj6);
IkReal x87=((0.25)*cj6);
IkReal x88=(cj6*pz);
j5eval[0]=((4.6)+(((-1.35135135135135)*x81))+(((-1.0)*x82*x84))+cj6+((x82*x83))+(((-1.0)*x84*x85))+((x83*x85))+(((-11.3513513513514)*x88))+(((-8.4)*sj6))+(((-6.21621621621622)*x85))+(((-6.21621621621622)*x82)));
j5eval[1]=IKsign(((0.851)+(((-1.15)*x85))+(((-1.15)*x82))+(((-1.0)*x82*x87))+((x82*x86))+((x85*x86))+(((-2.1)*x88))+(((-1.554)*sj6))+(((-0.25)*x81))+(((-1.0)*x85*x87))+(((0.185)*cj6))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x89=py*py;
IkReal x90=cj4*cj4;
IkReal x91=px*px;
IkReal x92=pz*pz;
IkReal x93=(py*sj4);
IkReal x94=(cj4*px);
IkReal x95=((1.82615047479912)*x90);
j5eval[0]=((-1.0)+((x89*x95))+(((-1.0)*x91*x95))+(((-3.65230094959825)*x93*x94))+(((-1.82615047479912)*x89))+(((-1.82615047479912)*x92))+(((2.7027027027027)*x93))+(((2.7027027027027)*x94)));
j5eval[1]=IKsign(((-0.5476)+((x89*x90))+(((1.48)*x94))+(((1.48)*x93))+(((-1.0)*x90*x91))+(((-2.0)*x93*x94))+(((-1.0)*x89))+(((-1.0)*x92))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x96=py*py;
IkReal x97=cj4*cj4;
IkReal x98=(pz*sj6);
IkReal x99=(py*sj4);
IkReal x100=((2.1)*sj6);
IkReal x101=((2.1)*cj6);
IkReal x102=(cj4*px);
IkReal x103=((0.25)*cj6);
IkReal x104=((0.25)*sj6);
CheckValue<IkReal> x105 = IKatan2WithCheck(IkReal(((0.851)+(((-1.0)*x103*x99))+((x100*x99))+(((-1.15)*x99))+((pz*x101))+(((-1.554)*sj6))+(((-1.0)*x102*x103))+(((0.25)*x98))+(((-1.15)*x102))+(((0.185)*cj6))+((x100*x102)))),IkReal(((((-1.0)*pz*x103))+(((-1.0)*x101*x102))+(((2.1)*x98))+(((0.185)*sj6))+(((-1.15)*pz))+(((-1.0)*x101*x99))+(((-1.0)*x102*x104))+(((1.554)*cj6))+(((-1.0)*x104*x99)))),IKFAST_ATAN2_MAGTHRESH);
if(!x105.valid){
continue;
}
CheckValue<IkReal> x106=IKPowWithIntegerCheck(IKsign(((-0.5476)+((x96*x97))+(((1.48)*x99))+(((-1.0)*x97*(px*px)))+(((1.48)*x102))+(((-1.0)*(pz*pz)))+(((-1.0)*x96))+(((-2.0)*x102*x99)))),-1);
if(!x106.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x105.value)+(((1.5707963267949)*(x106.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x107=IKcos(j5);
IkReal x108=IKsin(j5);
IkReal x109=(py*sj4);
IkReal x110=((2.1)*cj6);
IkReal x111=((2.1)*sj6);
IkReal x112=(cj4*px);
IkReal x113=((0.25)*sj6);
IkReal x114=((0.25)*cj6);
IkReal x115=((1.0)*x107);
IkReal x116=((2.3)*x108);
IkReal x117=((1.0)*x108);
evalcond[0]=((((-1.0)*x112*x115))+((pz*x108))+x113+x110+(((-1.0)*x109*x115))+(((0.74)*x107)));
evalcond[1]=((((-1.0)*x107*x114))+((x108*x113))+((x108*x110))+pz+(((-1.15)*x107))+((x107*x111)));
evalcond[2]=((1.15)+(((-1.0)*x112*x117))+(((-1.0)*x111))+x114+(((-1.0)*x109*x117))+(((0.74)*x108))+(((-1.0)*pz*x115)));
evalcond[3]=((2.6024)+(((2.3)*pz*x107))+((x112*x116))+((x109*x116))+(((1.48)*x112))+(((-1.702)*x108))+(((1.48)*x109))+(((-1.0)*pp)));
evalcond[4]=((0.74)+(((1.15)*x108))+(((-1.0)*x108*x111))+((x108*x114))+(((-1.0)*x112))+(((-1.0)*x109))+((x107*x113))+((x107*x110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1526=cj6*cj6;
IkReal x1527=(py*sj4);
IkReal x1528=((2.1)*sj6);
IkReal x1529=((0.25)*cj6);
IkReal x1530=(cj4*px);
IkReal x1531=((1.0)*pz);
IkReal x1532=(cj6*sj6);
CheckValue<IkReal> x1533=IKPowWithIntegerCheck(IKsign(((0.851)+(((-1.0)*x1529*x1530))+(((-0.25)*pz*sj6))+((x1528*x1530))+(((-2.1)*cj6*pz))+(((-1.554)*sj6))+((x1527*x1528))+(((-1.15)*x1527))+(((-1.0)*x1527*x1529))+(((-1.15)*x1530))+(((0.185)*cj6)))),-1);
if(!x1533.valid){
continue;
}
CheckValue<IkReal> x1534 = IKatan2WithCheck(IkReal(((-5.7325)+(((4.3475)*x1526))+(((4.83)*sj6))+(pz*pz)+(((-0.575)*cj6))+(((1.05)*x1532)))),IkReal(((0.525)+(((4.3475)*x1532))+(((0.74)*pz))+(((-0.2875)*sj6))+(((-1.0)*x1530*x1531))+(((-1.0)*x1527*x1531))+(((-1.05)*x1526))+(((-2.415)*cj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1534.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1533.value)))+(x1534.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1535=IKcos(j5);
IkReal x1536=IKsin(j5);
IkReal x1537=(py*sj4);
IkReal x1538=((2.1)*cj6);
IkReal x1539=((2.1)*sj6);
IkReal x1540=(cj4*px);
IkReal x1541=((0.25)*sj6);
IkReal x1542=((0.25)*cj6);
IkReal x1543=((1.0)*x1535);
IkReal x1544=((2.3)*x1536);
IkReal x1545=((1.0)*x1536);
evalcond[0]=((((-1.0)*x1540*x1543))+(((0.74)*x1535))+x1541+x1538+(((-1.0)*x1537*x1543))+((pz*x1536)));
evalcond[1]=((((-1.0)*x1535*x1542))+((x1536*x1541))+((x1536*x1538))+pz+((x1535*x1539))+(((-1.15)*x1535)));
evalcond[2]=((1.15)+(((-1.0)*x1540*x1545))+(((-1.0)*x1539))+(((-1.0)*pz*x1543))+(((0.74)*x1536))+x1542+(((-1.0)*x1537*x1545)));
evalcond[3]=((2.6024)+(((1.48)*x1540))+((x1537*x1544))+(((1.48)*x1537))+(((-1.702)*x1536))+(((-1.0)*pp))+((x1540*x1544))+(((2.3)*pz*x1535)));
evalcond[4]=((0.74)+(((-1.0)*x1540))+(((-1.0)*x1537))+((x1536*x1542))+(((1.15)*x1536))+((x1535*x1538))+((x1535*x1541))+(((-1.0)*x1536*x1539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1546=cj6*cj6;
IkReal x1547=(cj6*sj6);
IkReal x1548=(py*sj4);
IkReal x1549=(cj4*px);
IkReal x1550=((2.1)*cj6);
IkReal x1551=((0.25)*sj6);
CheckValue<IkReal> x1552 = IKatan2WithCheck(IkReal(((0.525)+(((-0.2875)*sj6))+(((-1.05)*x1546))+(((4.3475)*x1547))+(((-2.415)*cj6))+((pz*x1549))+((pz*x1548))+(((-0.74)*pz)))),IkReal(((-0.0625)+(((-4.3475)*x1546))+(((-1.05)*x1547))+(pz*pz))),IKFAST_ATAN2_MAGTHRESH);
if(!x1552.valid){
continue;
}
CheckValue<IkReal> x1553=IKPowWithIntegerCheck(IKsign(((((1.15)*pz))+(((-1.0)*x1549*x1551))+(((-1.0)*x1549*x1550))+(((-1.0)*x1548*x1551))+(((-1.0)*x1548*x1550))+(((0.185)*sj6))+(((-2.1)*pz*sj6))+(((1.554)*cj6))+(((0.25)*cj6*pz)))),-1);
if(!x1553.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1552.value)+(((1.5707963267949)*(x1553.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[5];
IkReal x1554=IKcos(j5);
IkReal x1555=IKsin(j5);
IkReal x1556=(py*sj4);
IkReal x1557=((2.1)*cj6);
IkReal x1558=((2.1)*sj6);
IkReal x1559=(cj4*px);
IkReal x1560=((0.25)*sj6);
IkReal x1561=((0.25)*cj6);
IkReal x1562=((1.0)*x1554);
IkReal x1563=((2.3)*x1555);
IkReal x1564=((1.0)*x1555);
evalcond[0]=((((-1.0)*x1559*x1562))+(((0.74)*x1554))+(((-1.0)*x1556*x1562))+x1560+x1557+((pz*x1555)));
evalcond[1]=(((x1555*x1560))+((x1555*x1557))+(((-1.15)*x1554))+((x1554*x1558))+pz+(((-1.0)*x1554*x1561)));
evalcond[2]=((1.15)+(((-1.0)*x1559*x1564))+(((-1.0)*pz*x1562))+(((0.74)*x1555))+(((-1.0)*x1556*x1564))+x1561+(((-1.0)*x1558)));
evalcond[3]=((2.6024)+(((1.48)*x1559))+(((1.48)*x1556))+((x1556*x1563))+(((2.3)*pz*x1554))+(((-1.0)*pp))+((x1559*x1563))+(((-1.702)*x1555)));
evalcond[4]=((0.74)+((x1555*x1561))+(((-1.0)*x1559))+(((-1.0)*x1556))+(((1.15)*x1555))+(((-1.0)*x1555*x1558))+((x1554*x1560))+((x1554*x1557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x118=((1.0)*sj5);
IkReal x119=(r12*sj4);
IkReal x120=(cj4*r01);
IkReal x121=(r10*sj4);
IkReal x122=((1.0)*cj4);
IkReal x123=(r11*sj4);
IkReal x124=(cj5*sj6);
IkReal x125=(((cj6*sj5))+x124);
IkReal x126=((((-1.0)*sj6*x118))+((cj5*cj6)));
IkReal x127=(sj4*x126);
IkReal x128=(cj4*x125);
IkReal x129=(cj4*x126);
IkReal x130=((((-1.0)*cj6*x118))+(((-1.0)*x124)));
new_r00=(((x121*x125))+((r00*x128))+((r20*x126)));
new_r01=(((r21*x126))+((x120*x125))+((x123*x125)));
new_r02=(((r02*x128))+((r22*x126))+((x119*x125)));
new_r10=(((r00*sj4))+(((-1.0)*r10*x122)));
new_r11=(((r01*sj4))+(((-1.0)*r11*x122)));
new_r12=((((-1.0)*r12*x122))+((r02*sj4)));
new_r20=(((x121*x126))+((r00*x129))+((r20*x130)));
new_r21=(((r21*x130))+((x120*x126))+((x123*x126)));
new_r22=(((r02*x129))+((r22*x130))+((x119*x126)));
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
cj8array[0]=new_r22;
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal j9eval[3];
j9eval[0]=sj8;
j9eval[1]=IKsign(sj8);
j9eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
j7eval[0]=sj8;
j7eval[1]=IKsign(sj8);
j7eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=new_r12;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j9mul = 1;
j9=0;
j7mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].fmul = j7mul;
vinfos[3].freeind = 0;
vinfos[3].maxsolutions = 0;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].fmul = j9mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 5;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j9mul = 1;
j9=0;
j7mul=1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].fmul = j7mul;
vinfos[3].freeind = 0;
vinfos[3].maxsolutions = 0;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].fmul = j9mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 5;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x131=new_r22*new_r22;
IkReal x132=((16.0)*new_r10);
IkReal x133=((16.0)*new_r01);
IkReal x134=((16.0)*new_r22);
IkReal x135=((8.0)*new_r11);
IkReal x136=((8.0)*new_r00);
IkReal x137=(x131*x132);
IkReal x138=(x131*x133);
j7eval[0]=((IKabs((x133+(((-1.0)*x138)))))+(IKabs(((((16.0)*new_r00))+(((-32.0)*new_r00*x131))+((new_r11*x134)))))+(IKabs((((new_r22*x136))+(((-1.0)*x131*x135)))))+(IKabs((((new_r22*x135))+(((-1.0)*x136)))))+(IKabs((x132+(((-1.0)*x137)))))+(IKabs((((new_r00*x134))+(((-32.0)*new_r11))+(((16.0)*new_r11*x131)))))+(IKabs((x138+(((-1.0)*x133)))))+(IKabs((x137+(((-1.0)*x132))))));
if( IKabs(j7eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j7, j9]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j7evalpoly[1];
IkReal x139=new_r22*new_r22;
IkReal x140=((16.0)*new_r10);
IkReal x141=(new_r11*new_r22);
IkReal x142=(x139*x140);
IkReal x143=((((8.0)*x141))+(((-8.0)*new_r00)));
op[0]=x143;
op[1]=((((-1.0)*x142))+x140);
op[2]=((((16.0)*new_r00))+(((16.0)*x141))+(((-32.0)*new_r00*x139)));
op[3]=((((-1.0)*x140))+x142);
op[4]=x143;
polyroots4(op,zeror,numroots);
IkReal j7array[4], cj7array[4], sj7array[4], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[4]={true,true,true,true};
_nj7 = 4;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

IkReal x144=new_r22*new_r22;
IkReal x145=((16.0)*new_r01);
IkReal x146=(new_r00*new_r22);
IkReal x147=((8.0)*x146);
IkReal x148=(new_r11*x144);
IkReal x149=(x144*x145);
IkReal x150=((8.0)*x148);
j7evalpoly[0]=((((-1.0)*x150))+(((htj7*htj7)*(((((-32.0)*new_r11))+(((16.0)*x148))+(((16.0)*x146))))))+x147+(((htj7*htj7*htj7*htj7)*(((((-1.0)*x150))+x147))))+(((htj7*htj7*htj7)*(((((-1.0)*x149))+x145))))+((htj7*(((((-1.0)*x145))+x149)))));
if( IKabs(j7evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j9eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x151=cj7*cj7;
IkReal x152=(cj7*new_r22);
IkReal x153=((-1.0)+(((-1.0)*x151*(new_r22*new_r22)))+x151);
j9eval[0]=x153;
j9eval[1]=IKsign(x153);
j9eval[2]=((IKabs((((new_r01*sj7))+(((-1.0)*new_r00*x152)))))+(IKabs((((new_r01*x152))+((new_r00*sj7))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j9eval[0]=new_r22;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j9eval[0]=sj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r10, new_r11);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x154=IKsin(j9);
IkReal x155=IKcos(j9);
evalcond[0]=x154;
evalcond[1]=((-1.0)*x155);
evalcond[2]=(x154+(((-1.0)*new_r10)));
evalcond[3]=(x155+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x156=IKsin(j9);
IkReal x157=IKcos(j9);
evalcond[0]=x156;
evalcond[1]=(x156+new_r10);
evalcond[2]=(x157+new_r11);
evalcond[3]=((-1.0)*x157);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x158=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x158.valid){
continue;
}
if((x158.value) < -0.00001)
continue;
IkReal gconst24=((-1.0)*(IKsqrt(x158.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj7+(((-1.0)*gconst24)))))+(IKabs(((-1.0)+(IKsign(sj7)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
sj7=IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24)))));
cj7=gconst24;
if( (gconst24) < -1-IKFAST_SINCOS_THRESH || (gconst24) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=IKacos(gconst24);
CheckValue<IkReal> x159=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x159.valid){
continue;
}
if((x159.value) < -0.00001)
continue;
IkReal gconst24=((-1.0)*(IKsqrt(x159.value)));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
CheckValue<IkReal> x160=IKPowWithIntegerCheck(gconst24,-1);
if(!x160.valid){
continue;
}
if( IKabs(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x160.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10))))+IKsqr((new_r11*(x160.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10))), (new_r11*(x160.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x161=IKcos(j9);
IkReal x162=IKsin(j9);
IkReal x163=((1.0)*gconst24);
if((((1.0)+(((-1.0)*gconst24*x163)))) < -0.00001)
continue;
IkReal x164=IKsqrt(((1.0)+(((-1.0)*gconst24*x163))));
evalcond[0]=x162;
evalcond[1]=((-1.0)*x161);
evalcond[2]=((((-1.0)*x161*x163))+new_r11);
evalcond[3]=((((-1.0)*x162*x163))+new_r10);
evalcond[4]=(((x161*x164))+new_r01);
evalcond[5]=(((x162*x164))+new_r00);
evalcond[6]=(((new_r00*x164))+(((-1.0)*new_r10*x163))+x162);
evalcond[7]=(((new_r01*x164))+(((-1.0)*new_r11*x163))+x161);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x165=IKPowWithIntegerCheck(IKsign(gconst24),-1);
if(!x165.valid){
continue;
}
CheckValue<IkReal> x166 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x166.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x165.value)))+(x166.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x167=IKcos(j9);
IkReal x168=IKsin(j9);
IkReal x169=((1.0)*gconst24);
if((((1.0)+(((-1.0)*gconst24*x169)))) < -0.00001)
continue;
IkReal x170=IKsqrt(((1.0)+(((-1.0)*gconst24*x169))));
evalcond[0]=x168;
evalcond[1]=((-1.0)*x167);
evalcond[2]=(new_r11+(((-1.0)*x167*x169)));
evalcond[3]=((((-1.0)*x168*x169))+new_r10);
evalcond[4]=(((x167*x170))+new_r01);
evalcond[5]=(((x168*x170))+new_r00);
evalcond[6]=(((new_r00*x170))+(((-1.0)*new_r10*x169))+x168);
evalcond[7]=(((new_r01*x170))+(((-1.0)*new_r11*x169))+x167);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x171=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x171.valid){
continue;
}
if((x171.value) < -0.00001)
continue;
IkReal gconst24=((-1.0)*(IKsqrt(x171.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj7+(((-1.0)*gconst24)))))+(IKabs(((1.0)+(IKsign(sj7)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
sj7=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24)))))));
cj7=gconst24;
if( (gconst24) < -1-IKFAST_SINCOS_THRESH || (gconst24) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=((-1.0)*(IKacos(gconst24)));
CheckValue<IkReal> x172=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x172.valid){
continue;
}
if((x172.value) < -0.00001)
continue;
IkReal gconst24=((-1.0)*(IKsqrt(x172.value)));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if((((1.0)+(((-1.0)*(gconst24*gconst24))))) < -0.00001)
continue;
CheckValue<IkReal> x173=IKPowWithIntegerCheck(gconst24,-1);
if(!x173.valid){
continue;
}
if( IKabs((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x173.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10))))+IKsqr((new_r11*(x173.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst24*gconst24))))))))+((gconst24*new_r10))), (new_r11*(x173.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x174=IKcos(j9);
IkReal x175=IKsin(j9);
IkReal x176=((1.0)*gconst24);
if((((1.0)+(((-1.0)*gconst24*x176)))) < -0.00001)
continue;
IkReal x177=IKsqrt(((1.0)+(((-1.0)*gconst24*x176))));
IkReal x178=((1.0)*x177);
evalcond[0]=x175;
evalcond[1]=((-1.0)*x174);
evalcond[2]=((((-1.0)*x174*x176))+new_r11);
evalcond[3]=((((-1.0)*x175*x176))+new_r10);
evalcond[4]=((((-1.0)*x174*x178))+new_r01);
evalcond[5]=((((-1.0)*x175*x178))+new_r00);
evalcond[6]=((((-1.0)*new_r10*x176))+x175+(((-1.0)*new_r00*x178)));
evalcond[7]=((((-1.0)*new_r11*x176))+x174+(((-1.0)*new_r01*x178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x179=IKPowWithIntegerCheck(IKsign(gconst24),-1);
if(!x179.valid){
continue;
}
CheckValue<IkReal> x180 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x180.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x179.value)))+(x180.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x181=IKcos(j9);
IkReal x182=IKsin(j9);
IkReal x183=((1.0)*gconst24);
if((((1.0)+(((-1.0)*gconst24*x183)))) < -0.00001)
continue;
IkReal x184=IKsqrt(((1.0)+(((-1.0)*gconst24*x183))));
IkReal x185=((1.0)*x184);
evalcond[0]=x182;
evalcond[1]=((-1.0)*x181);
evalcond[2]=(new_r11+(((-1.0)*x181*x183)));
evalcond[3]=(new_r10+(((-1.0)*x182*x183)));
evalcond[4]=(new_r01+(((-1.0)*x181*x185)));
evalcond[5]=(new_r00+(((-1.0)*x182*x185)));
evalcond[6]=(x182+(((-1.0)*new_r10*x183))+(((-1.0)*new_r00*x185)));
evalcond[7]=(x181+(((-1.0)*new_r11*x183))+(((-1.0)*new_r01*x185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x186=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x186.valid){
continue;
}
if((x186.value) < -0.00001)
continue;
IkReal gconst25=IKsqrt(x186.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj7)))))+(IKabs((cj7+(((-1.0)*gconst25)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
sj7=IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))));
cj7=gconst25;
if( (gconst25) < -1-IKFAST_SINCOS_THRESH || (gconst25) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=IKacos(gconst25);
CheckValue<IkReal> x187=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x187.valid){
continue;
}
if((x187.value) < -0.00001)
continue;
IkReal gconst25=IKsqrt(x187.value);
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
CheckValue<IkReal> x188=IKPowWithIntegerCheck(gconst25,-1);
if(!x188.valid){
continue;
}
if( IKabs((((gconst25*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x188.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst25*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25))))))))))+IKsqr((new_r11*(x188.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((gconst25*new_r10))+(((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25))))))))), (new_r11*(x188.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x189=IKcos(j9);
IkReal x190=IKsin(j9);
IkReal x191=((1.0)*gconst25);
if((((1.0)+(((-1.0)*gconst25*x191)))) < -0.00001)
continue;
IkReal x192=IKsqrt(((1.0)+(((-1.0)*gconst25*x191))));
evalcond[0]=x190;
evalcond[1]=((-1.0)*x189);
evalcond[2]=((((-1.0)*x189*x191))+new_r11);
evalcond[3]=((((-1.0)*x190*x191))+new_r10);
evalcond[4]=(((x189*x192))+new_r01);
evalcond[5]=(((x190*x192))+new_r00);
evalcond[6]=(((new_r00*x192))+x190+(((-1.0)*new_r10*x191)));
evalcond[7]=(((new_r01*x192))+x189+(((-1.0)*new_r11*x191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x193=IKPowWithIntegerCheck(IKsign(gconst25),-1);
if(!x193.valid){
continue;
}
CheckValue<IkReal> x194 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x194.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x193.value)))+(x194.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x195=IKcos(j9);
IkReal x196=IKsin(j9);
IkReal x197=((1.0)*gconst25);
if((((1.0)+(((-1.0)*gconst25*x197)))) < -0.00001)
continue;
IkReal x198=IKsqrt(((1.0)+(((-1.0)*gconst25*x197))));
evalcond[0]=x196;
evalcond[1]=((-1.0)*x195);
evalcond[2]=((((-1.0)*x195*x197))+new_r11);
evalcond[3]=((((-1.0)*x196*x197))+new_r10);
evalcond[4]=(((x195*x198))+new_r01);
evalcond[5]=(((x196*x198))+new_r00);
evalcond[6]=(((new_r00*x198))+x196+(((-1.0)*new_r10*x197)));
evalcond[7]=(((new_r01*x198))+x195+(((-1.0)*new_r11*x197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x199=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x199.valid){
continue;
}
if((x199.value) < -0.00001)
continue;
IkReal gconst25=IKsqrt(x199.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj7+(((-1.0)*gconst25)))))+(IKabs(((1.0)+(IKsign(sj7)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
sj7=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))))));
cj7=gconst25;
if( (gconst25) < -1-IKFAST_SINCOS_THRESH || (gconst25) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=((-1.0)*(IKacos(gconst25)));
CheckValue<IkReal> x200=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x200.valid){
continue;
}
if((x200.value) < -0.00001)
continue;
IkReal gconst25=IKsqrt(x200.value);
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if((((1.0)+(((-1.0)*(gconst25*gconst25))))) < -0.00001)
continue;
CheckValue<IkReal> x201=IKPowWithIntegerCheck(gconst25,-1);
if(!x201.valid){
continue;
}
if( IKabs((((gconst25*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x201.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((gconst25*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25))))))))))+IKsqr((new_r11*(x201.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((gconst25*new_r10))+((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst25*gconst25))))))))), (new_r11*(x201.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x202=IKcos(j9);
IkReal x203=IKsin(j9);
IkReal x204=((1.0)*gconst25);
if((((1.0)+(((-1.0)*gconst25*x204)))) < -0.00001)
continue;
IkReal x205=IKsqrt(((1.0)+(((-1.0)*gconst25*x204))));
IkReal x206=((1.0)*x205);
evalcond[0]=x203;
evalcond[1]=((-1.0)*x202);
evalcond[2]=((((-1.0)*x202*x204))+new_r11);
evalcond[3]=((((-1.0)*x203*x204))+new_r10);
evalcond[4]=((((-1.0)*x202*x206))+new_r01);
evalcond[5]=((((-1.0)*x203*x206))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x206))+x203+(((-1.0)*new_r10*x204)));
evalcond[7]=(x202+(((-1.0)*new_r01*x206))+(((-1.0)*new_r11*x204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x207=IKPowWithIntegerCheck(IKsign(gconst25),-1);
if(!x207.valid){
continue;
}
CheckValue<IkReal> x208 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x208.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x207.value)))+(x208.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x209=IKcos(j9);
IkReal x210=IKsin(j9);
IkReal x211=((1.0)*gconst25);
if((((1.0)+(((-1.0)*gconst25*x211)))) < -0.00001)
continue;
IkReal x212=IKsqrt(((1.0)+(((-1.0)*gconst25*x211))));
IkReal x213=((1.0)*x212);
evalcond[0]=x210;
evalcond[1]=((-1.0)*x209);
evalcond[2]=(new_r11+(((-1.0)*x209*x211)));
evalcond[3]=((((-1.0)*x210*x211))+new_r10);
evalcond[4]=(new_r01+(((-1.0)*x209*x213)));
evalcond[5]=((((-1.0)*x210*x213))+new_r00);
evalcond[6]=((((-1.0)*new_r10*x211))+x210+(((-1.0)*new_r00*x213)));
evalcond[7]=((((-1.0)*new_r11*x211))+x209+(((-1.0)*new_r01*x213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x214=(new_r00*sj7);
CheckValue<IkReal> x215=IKPowWithIntegerCheck(sj7,-1);
if(!x215.valid){
continue;
}
if( IKabs(((((-1.0)*x214))+((cj7*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x215.value)*((((cj7*new_r22*x214))+(((-1.0)*new_r10*new_r22*(cj7*cj7)))+(((-1.0)*new_r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x214))+((cj7*new_r10))))+IKsqr(((x215.value)*((((cj7*new_r22*x214))+(((-1.0)*new_r10*new_r22*(cj7*cj7)))+(((-1.0)*new_r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x214))+((cj7*new_r10))), ((x215.value)*((((cj7*new_r22*x214))+(((-1.0)*new_r10*new_r22*(cj7*cj7)))+(((-1.0)*new_r01))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x216=IKsin(j9);
IkReal x217=IKcos(j9);
IkReal x218=((1.0)*cj7);
IkReal x219=(cj7*new_r01);
IkReal x220=(cj7*new_r00);
IkReal x221=(new_r10*sj7);
IkReal x222=(new_r11*sj7);
IkReal x223=(new_r22*x216);
IkReal x224=(new_r22*x217);
evalcond[0]=(((new_r00*sj7))+(((-1.0)*new_r10*x218))+x216);
evalcond[1]=((((-1.0)*new_r11*x218))+((new_r01*sj7))+x217);
evalcond[2]=(x219+x223+x222);
evalcond[3]=(((new_r22*x219))+x216+((new_r22*x222)));
evalcond[4]=(((cj7*x223))+((sj7*x217))+new_r01);
evalcond[5]=(x221+x220+(((-1.0)*x224)));
evalcond[6]=(((sj7*x216))+(((-1.0)*x218*x224))+new_r00);
evalcond[7]=(((sj7*x223))+(((-1.0)*x217*x218))+new_r11);
evalcond[8]=((((-1.0)*x217))+((new_r22*x220))+((new_r22*x221)));
evalcond[9]=(new_r10+(((-1.0)*sj7*x224))+(((-1.0)*x216*x218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x225=((1.0)*new_r01);
CheckValue<IkReal> x226=IKPowWithIntegerCheck(new_r22,-1);
if(!x226.valid){
continue;
}
if( IKabs(((x226.value)*(((((-1.0)*cj7*x225))+(((-1.0)*new_r11*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj7*new_r11))+(((-1.0)*sj7*x225)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x226.value)*(((((-1.0)*cj7*x225))+(((-1.0)*new_r11*sj7))))))+IKsqr((((cj7*new_r11))+(((-1.0)*sj7*x225))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x226.value)*(((((-1.0)*cj7*x225))+(((-1.0)*new_r11*sj7))))), (((cj7*new_r11))+(((-1.0)*sj7*x225))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x227=IKsin(j9);
IkReal x228=IKcos(j9);
IkReal x229=((1.0)*cj7);
IkReal x230=(cj7*new_r01);
IkReal x231=(cj7*new_r00);
IkReal x232=(new_r10*sj7);
IkReal x233=(new_r11*sj7);
IkReal x234=(new_r22*x227);
IkReal x235=(new_r22*x228);
evalcond[0]=((((-1.0)*new_r10*x229))+((new_r00*sj7))+x227);
evalcond[1]=((((-1.0)*new_r11*x229))+((new_r01*sj7))+x228);
evalcond[2]=(x233+x230+x234);
evalcond[3]=(((new_r22*x230))+((new_r22*x233))+x227);
evalcond[4]=(((sj7*x228))+new_r01+((cj7*x234)));
evalcond[5]=(x232+x231+(((-1.0)*x235)));
evalcond[6]=(((sj7*x227))+new_r00+(((-1.0)*x229*x235)));
evalcond[7]=((((-1.0)*x228*x229))+new_r11+((sj7*x234)));
evalcond[8]=(((new_r22*x231))+((new_r22*x232))+(((-1.0)*x228)));
evalcond[9]=((((-1.0)*x227*x229))+new_r10+(((-1.0)*sj7*x235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x236=cj7*cj7;
IkReal x237=(cj7*new_r22);
CheckValue<IkReal> x238 = IKatan2WithCheck(IkReal((((new_r01*x237))+((new_r00*sj7)))),IkReal(((((-1.0)*new_r00*x237))+((new_r01*sj7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x238.valid){
continue;
}
CheckValue<IkReal> x239=IKPowWithIntegerCheck(IKsign(((-1.0)+(((-1.0)*x236*(new_r22*new_r22)))+x236)),-1);
if(!x239.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x238.value)+(((1.5707963267949)*(x239.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x240=IKsin(j9);
IkReal x241=IKcos(j9);
IkReal x242=((1.0)*cj7);
IkReal x243=(cj7*new_r01);
IkReal x244=(cj7*new_r00);
IkReal x245=(new_r10*sj7);
IkReal x246=(new_r11*sj7);
IkReal x247=(new_r22*x240);
IkReal x248=(new_r22*x241);
evalcond[0]=(((new_r00*sj7))+x240+(((-1.0)*new_r10*x242)));
evalcond[1]=(((new_r01*sj7))+x241+(((-1.0)*new_r11*x242)));
evalcond[2]=(x243+x247+x246);
evalcond[3]=(((new_r22*x246))+((new_r22*x243))+x240);
evalcond[4]=(((cj7*x247))+((sj7*x241))+new_r01);
evalcond[5]=((((-1.0)*x248))+x245+x244);
evalcond[6]=((((-1.0)*x242*x248))+((sj7*x240))+new_r00);
evalcond[7]=((((-1.0)*x241*x242))+((sj7*x247))+new_r11);
evalcond[8]=((((-1.0)*x241))+((new_r22*x244))+((new_r22*x245)));
evalcond[9]=((((-1.0)*sj7*x248))+(((-1.0)*x240*x242))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7, j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x250=IKPowWithIntegerCheck(sj8,-1);
if(!x250.valid){
continue;
}
IkReal x249=x250.value;
CheckValue<IkReal> x251=IKPowWithIntegerCheck(new_r12,-1);
if(!x251.valid){
continue;
}
if( IKabs((x249*(x251.value)*(((-1.0)+(new_r02*new_r02)+(cj8*cj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x249)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x249*(x251.value)*(((-1.0)+(new_r02*new_r02)+(cj8*cj8)))))+IKsqr(((-1.0)*new_r02*x249))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x249*(x251.value)*(((-1.0)+(new_r02*new_r02)+(cj8*cj8)))), ((-1.0)*new_r02*x249));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x252=IKcos(j7);
IkReal x253=IKsin(j7);
IkReal x254=((1.0)*sj8);
IkReal x255=(new_r02*x252);
IkReal x256=(new_r12*x253);
IkReal x257=((1.0)*x253);
IkReal x258=(x252*x254);
evalcond[0]=(((sj8*x252))+new_r02);
evalcond[1]=(((sj8*x253))+new_r12);
evalcond[2]=(((new_r12*x252))+(((-1.0)*new_r02*x257)));
evalcond[3]=(sj8+x255+x256);
evalcond[4]=(((cj8*x255))+((cj8*x256))+((new_r22*sj8)));
evalcond[5]=(((cj8*new_r20))+(((-1.0)*new_r00*x258))+(((-1.0)*new_r10*x253*x254)));
evalcond[6]=((((-1.0)*new_r01*x258))+(((-1.0)*new_r11*x253*x254))+((cj8*new_r21)));
evalcond[7]=((-1.0)+((cj8*new_r22))+(((-1.0)*x254*x256))+(((-1.0)*x254*x255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[3];
j9eval[0]=sj8;
j9eval[1]=IKsign(sj8);
j9eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=sj8;
j9eval[1]=sj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=sj8;
j9eval[1]=cj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x259=((1.0)*sj7);
if( IKabs(((((-1.0)*cj7*new_r01))+(((-1.0)*new_r00*x259)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x259))+((cj7*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj7*new_r01))+(((-1.0)*new_r00*x259))))+IKsqr(((((-1.0)*new_r01*x259))+((cj7*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*cj7*new_r01))+(((-1.0)*new_r00*x259))), ((((-1.0)*new_r01*x259))+((cj7*new_r00))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x260=IKsin(j9);
IkReal x261=IKcos(j9);
IkReal x262=((1.0)*cj7);
IkReal x263=(sj7*x260);
IkReal x264=((1.0)*x261);
IkReal x265=(x261*x262);
evalcond[0]=(((new_r11*sj7))+x260+((cj7*new_r01)));
evalcond[1]=(((new_r00*sj7))+x260+(((-1.0)*new_r10*x262)));
evalcond[2]=(((new_r01*sj7))+x261+(((-1.0)*new_r11*x262)));
evalcond[3]=(((cj7*x260))+((sj7*x261))+new_r01);
evalcond[4]=(((new_r10*sj7))+(((-1.0)*x264))+((cj7*new_r00)));
evalcond[5]=(x263+new_r00+(((-1.0)*x265)));
evalcond[6]=(x263+new_r11+(((-1.0)*x265)));
evalcond[7]=((((-1.0)*sj7*x264))+new_r10+(((-1.0)*x260*x262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x266=((1.0)*sj7);
if( IKabs(((((-1.0)*new_r00*x266))+((cj7*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x266))+(((-1.0)*cj7*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x266))+((cj7*new_r01))))+IKsqr(((((-1.0)*new_r01*x266))+(((-1.0)*cj7*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*new_r00*x266))+((cj7*new_r01))), ((((-1.0)*new_r01*x266))+(((-1.0)*cj7*new_r00))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x267=IKcos(j9);
IkReal x268=IKsin(j9);
IkReal x269=((1.0)*cj7);
IkReal x270=(sj7*x267);
IkReal x271=(sj7*x268);
IkReal x272=(x268*x269);
evalcond[0]=(((new_r10*sj7))+x267+((cj7*new_r00)));
evalcond[1]=(((new_r00*sj7))+x268+(((-1.0)*new_r10*x269)));
evalcond[2]=(((new_r01*sj7))+x267+(((-1.0)*new_r11*x269)));
evalcond[3]=((((-1.0)*x268))+((new_r11*sj7))+((cj7*new_r01)));
evalcond[4]=(((cj7*x267))+x271+new_r00);
evalcond[5]=(x270+(((-1.0)*x272))+new_r01);
evalcond[6]=(x270+(((-1.0)*x272))+new_r10);
evalcond[7]=((((-1.0)*x271))+(((-1.0)*x267*x269))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x273=IKsin(j9);
IkReal x274=IKcos(j9);
IkReal x275=((1.0)*x274);
evalcond[0]=(x273+new_r00);
evalcond[1]=(x274+new_r01);
evalcond[2]=(((sj8*x273))+new_r21);
evalcond[3]=(((cj8*x273))+new_r11);
evalcond[4]=(new_r20+(((-1.0)*sj8*x275)));
evalcond[5]=((((-1.0)*cj8*x275))+new_r10);
evalcond[6]=(((cj8*new_r11))+x273+((new_r21*sj8)));
evalcond[7]=(((new_r20*sj8))+((cj8*new_r10))+(((-1.0)*x275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r00, new_r01);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x276=IKsin(j9);
IkReal x277=IKcos(j9);
IkReal x278=((1.0)*cj8);
IkReal x279=((1.0)*x277);
evalcond[0]=(((sj8*x276))+new_r21);
evalcond[1]=(x276+(((-1.0)*new_r00)));
evalcond[2]=(x277+(((-1.0)*new_r01)));
evalcond[3]=(new_r20+(((-1.0)*sj8*x279)));
evalcond[4]=(((cj8*x276))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*x277*x278))+(((-1.0)*new_r10)));
evalcond[6]=(x276+(((-1.0)*new_r11*x278))+((new_r21*sj8)));
evalcond[7]=(((new_r20*sj8))+(((-1.0)*new_r10*x278))+(((-1.0)*x279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r10, new_r11);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x280=IKsin(j9);
IkReal x281=IKcos(j9);
IkReal x282=((1.0)*x281);
evalcond[0]=(((sj8*x280))+new_r21);
evalcond[1]=(x280+(((-1.0)*new_r10)));
evalcond[2]=(x281+(((-1.0)*new_r11)));
evalcond[3]=(((cj8*x280))+new_r01);
evalcond[4]=((((-1.0)*sj8*x282))+new_r20);
evalcond[5]=((((-1.0)*cj8*x282))+new_r00);
evalcond[6]=(x280+((cj8*new_r01))+((new_r21*sj8)));
evalcond[7]=(((new_r20*sj8))+((cj8*new_r00))+(((-1.0)*x282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x283=IKsin(j9);
IkReal x284=IKcos(j9);
IkReal x285=((1.0)*cj8);
IkReal x286=((1.0)*x284);
evalcond[0]=(x283+new_r10);
evalcond[1]=(x284+new_r11);
evalcond[2]=(((sj8*x283))+new_r21);
evalcond[3]=((((-1.0)*sj8*x286))+new_r20);
evalcond[4]=(((cj8*x283))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*x284*x285))+(((-1.0)*new_r00)));
evalcond[6]=(x283+(((-1.0)*new_r01*x285))+((new_r21*sj8)));
evalcond[7]=(((new_r20*sj8))+(((-1.0)*new_r00*x285))+(((-1.0)*x286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j9eval[0]=1.0;
if( IKabs(j9eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j9]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j9array[2], cj9array[2], sj9array[2], tempj9array[1];
int numsolutions = 0;
for(int ij9 = 0; ij9 < numroots; ++ij9)
{
IkReal htj9 = zeror[ij9];
tempj9array[0]=((2.0)*(atan(htj9)));
for(int kj9 = 0; kj9 < 1; ++kj9)
{
j9array[numsolutions] = tempj9array[kj9];
if( j9array[numsolutions] > IKPI )
{
    j9array[numsolutions]-=IK2PI;
}
else if( j9array[numsolutions] < -IKPI )
{
    j9array[numsolutions]+=IK2PI;
}
sj9array[numsolutions] = IKsin(j9array[numsolutions]);
cj9array[numsolutions] = IKcos(j9array[numsolutions]);
numsolutions++;
}
}
bool j9valid[2]={true,true};
_nj9 = 2;
for(int ij9 = 0; ij9 < numsolutions; ++ij9)
    {
if( !j9valid[ij9] )
{
    continue;
}
    j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
htj9 = IKtan(j9/2);

_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < numsolutions; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x288=IKPowWithIntegerCheck(sj8,-1);
if(!x288.valid){
continue;
}
IkReal x287=x288.value;
CheckValue<IkReal> x289=IKPowWithIntegerCheck(cj7,-1);
if(!x289.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x287)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x287*(x289.value)*((((new_r11*sj8))+(((-1.0)*cj8*new_r21*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x287))+IKsqr((x287*(x289.value)*((((new_r11*sj8))+(((-1.0)*cj8*new_r21*sj7))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r21*x287), (x287*(x289.value)*((((new_r11*sj8))+(((-1.0)*cj8*new_r21*sj7))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x290=IKsin(j9);
IkReal x291=IKcos(j9);
IkReal x292=(cj7*new_r01);
IkReal x293=(cj8*sj7);
IkReal x294=((1.0)*cj7);
IkReal x295=(cj7*cj8);
IkReal x296=(cj7*x290);
IkReal x297=((1.0)*x291);
evalcond[0]=(((sj8*x290))+new_r21);
evalcond[1]=(new_r20+(((-1.0)*sj8*x297)));
evalcond[2]=((((-1.0)*new_r10*x294))+((new_r00*sj7))+x290);
evalcond[3]=((((-1.0)*new_r11*x294))+((new_r01*sj7))+x291);
evalcond[4]=(((cj8*x290))+((new_r11*sj7))+x292);
evalcond[5]=(((x290*x295))+new_r01+((sj7*x291)));
evalcond[6]=((((-1.0)*cj8*x297))+((new_r10*sj7))+((cj7*new_r00)));
evalcond[7]=(new_r00+((sj7*x290))+(((-1.0)*cj8*x291*x294)));
evalcond[8]=(((x290*x293))+(((-1.0)*x291*x294))+new_r11);
evalcond[9]=((((-1.0)*x290*x294))+(((-1.0)*x293*x297))+new_r10);
evalcond[10]=(((cj8*x292))+((new_r11*x293))+x290+((new_r21*sj8)));
evalcond[11]=(((new_r20*sj8))+(((-1.0)*x297))+((new_r10*x293))+((new_r00*x295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x299=IKPowWithIntegerCheck(sj8,-1);
if(!x299.valid){
continue;
}
IkReal x298=x299.value;
CheckValue<IkReal> x300=IKPowWithIntegerCheck(sj7,-1);
if(!x300.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x298)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x298*(x300.value)*(((((-1.0)*new_r01*sj8))+((cj7*cj8*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x298))+IKsqr((x298*(x300.value)*(((((-1.0)*new_r01*sj8))+((cj7*cj8*new_r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r21*x298), (x298*(x300.value)*(((((-1.0)*new_r01*sj8))+((cj7*cj8*new_r21))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x301=IKsin(j9);
IkReal x302=IKcos(j9);
IkReal x303=(cj7*new_r01);
IkReal x304=(cj8*sj7);
IkReal x305=((1.0)*cj7);
IkReal x306=(cj7*cj8);
IkReal x307=(cj7*x301);
IkReal x308=((1.0)*x302);
evalcond[0]=(((sj8*x301))+new_r21);
evalcond[1]=(new_r20+(((-1.0)*sj8*x308)));
evalcond[2]=(((new_r00*sj7))+x301+(((-1.0)*new_r10*x305)));
evalcond[3]=(((new_r01*sj7))+x302+(((-1.0)*new_r11*x305)));
evalcond[4]=(((cj8*x301))+((new_r11*sj7))+x303);
evalcond[5]=(((x301*x306))+((sj7*x302))+new_r01);
evalcond[6]=(((new_r10*sj7))+(((-1.0)*cj8*x308))+((cj7*new_r00)));
evalcond[7]=(((sj7*x301))+(((-1.0)*cj8*x302*x305))+new_r00);
evalcond[8]=(((x301*x304))+(((-1.0)*x302*x305))+new_r11);
evalcond[9]=((((-1.0)*x301*x305))+(((-1.0)*x304*x308))+new_r10);
evalcond[10]=(((cj8*x303))+((new_r11*x304))+x301+((new_r21*sj8)));
evalcond[11]=(((new_r00*x306))+((new_r20*sj8))+((new_r10*x304))+(((-1.0)*x308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x309=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x309.valid){
continue;
}
CheckValue<IkReal> x310 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x310.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x309.value)))+(x310.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x311=IKsin(j9);
IkReal x312=IKcos(j9);
IkReal x313=(cj7*new_r01);
IkReal x314=(cj8*sj7);
IkReal x315=((1.0)*cj7);
IkReal x316=(cj7*cj8);
IkReal x317=(cj7*x311);
IkReal x318=((1.0)*x312);
evalcond[0]=(((sj8*x311))+new_r21);
evalcond[1]=((((-1.0)*sj8*x318))+new_r20);
evalcond[2]=(((new_r00*sj7))+x311+(((-1.0)*new_r10*x315)));
evalcond[3]=(((new_r01*sj7))+(((-1.0)*new_r11*x315))+x312);
evalcond[4]=(((new_r11*sj7))+x313+((cj8*x311)));
evalcond[5]=(((sj7*x312))+((x311*x316))+new_r01);
evalcond[6]=(((new_r10*sj7))+(((-1.0)*cj8*x318))+((cj7*new_r00)));
evalcond[7]=(((sj7*x311))+(((-1.0)*cj8*x312*x315))+new_r00);
evalcond[8]=((((-1.0)*x312*x315))+((x311*x314))+new_r11);
evalcond[9]=((((-1.0)*x314*x318))+new_r10+(((-1.0)*x311*x315)));
evalcond[10]=(x311+((cj8*x313))+((new_r11*x314))+((new_r21*sj8)));
evalcond[11]=(((new_r20*sj8))+((new_r00*x316))+(((-1.0)*x318))+((new_r10*x314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x319=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x319.valid){
continue;
}
CheckValue<IkReal> x320 = IKatan2WithCheck(IkReal(((-1.0)*new_r12)),IkReal(((-1.0)*new_r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x320.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x319.value)))+(x320.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x321=IKcos(j7);
IkReal x322=IKsin(j7);
IkReal x323=((1.0)*sj8);
IkReal x324=(new_r02*x321);
IkReal x325=(new_r12*x322);
IkReal x326=((1.0)*x322);
IkReal x327=(x321*x323);
evalcond[0]=(((sj8*x321))+new_r02);
evalcond[1]=(((sj8*x322))+new_r12);
evalcond[2]=(((new_r12*x321))+(((-1.0)*new_r02*x326)));
evalcond[3]=(sj8+x324+x325);
evalcond[4]=(((cj8*x324))+((cj8*x325))+((new_r22*sj8)));
evalcond[5]=(((cj8*new_r20))+(((-1.0)*new_r10*x322*x323))+(((-1.0)*new_r00*x327)));
evalcond[6]=(((cj8*new_r21))+(((-1.0)*new_r11*x322*x323))+(((-1.0)*new_r01*x327)));
evalcond[7]=((-1.0)+((cj8*new_r22))+(((-1.0)*x323*x325))+(((-1.0)*x323*x324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[3];
j9eval[0]=sj8;
j9eval[1]=IKsign(sj8);
j9eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=sj8;
j9eval[1]=sj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=sj8;
j9eval[1]=cj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x328=((1.0)*sj7);
if( IKabs(((((-1.0)*cj7*new_r01))+(((-1.0)*new_r00*x328)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x328))+((cj7*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj7*new_r01))+(((-1.0)*new_r00*x328))))+IKsqr(((((-1.0)*new_r01*x328))+((cj7*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*cj7*new_r01))+(((-1.0)*new_r00*x328))), ((((-1.0)*new_r01*x328))+((cj7*new_r00))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x329=IKsin(j9);
IkReal x330=IKcos(j9);
IkReal x331=((1.0)*cj7);
IkReal x332=(sj7*x329);
IkReal x333=((1.0)*x330);
IkReal x334=(x330*x331);
evalcond[0]=(((new_r11*sj7))+x329+((cj7*new_r01)));
evalcond[1]=((((-1.0)*new_r10*x331))+((new_r00*sj7))+x329);
evalcond[2]=((((-1.0)*new_r11*x331))+((new_r01*sj7))+x330);
evalcond[3]=(((cj7*x329))+new_r01+((sj7*x330)));
evalcond[4]=(((new_r10*sj7))+(((-1.0)*x333))+((cj7*new_r00)));
evalcond[5]=(x332+(((-1.0)*x334))+new_r00);
evalcond[6]=(x332+(((-1.0)*x334))+new_r11);
evalcond[7]=((((-1.0)*x329*x331))+(((-1.0)*sj7*x333))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x335=((1.0)*sj7);
if( IKabs(((((-1.0)*new_r00*x335))+((cj7*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*new_r00))+(((-1.0)*new_r01*x335)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x335))+((cj7*new_r01))))+IKsqr(((((-1.0)*cj7*new_r00))+(((-1.0)*new_r01*x335))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*new_r00*x335))+((cj7*new_r01))), ((((-1.0)*cj7*new_r00))+(((-1.0)*new_r01*x335))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x336=IKcos(j9);
IkReal x337=IKsin(j9);
IkReal x338=((1.0)*cj7);
IkReal x339=(sj7*x336);
IkReal x340=(sj7*x337);
IkReal x341=(x337*x338);
evalcond[0]=(((new_r10*sj7))+x336+((cj7*new_r00)));
evalcond[1]=((((-1.0)*new_r10*x338))+((new_r00*sj7))+x337);
evalcond[2]=((((-1.0)*new_r11*x338))+((new_r01*sj7))+x336);
evalcond[3]=(((new_r11*sj7))+(((-1.0)*x337))+((cj7*new_r01)));
evalcond[4]=(x340+((cj7*x336))+new_r00);
evalcond[5]=(x339+new_r01+(((-1.0)*x341)));
evalcond[6]=(x339+new_r10+(((-1.0)*x341)));
evalcond[7]=(new_r11+(((-1.0)*x340))+(((-1.0)*x336*x338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x342=IKsin(j9);
IkReal x343=IKcos(j9);
IkReal x344=((1.0)*x343);
evalcond[0]=(x342+new_r00);
evalcond[1]=(x343+new_r01);
evalcond[2]=(((sj8*x342))+new_r21);
evalcond[3]=(((cj8*x342))+new_r11);
evalcond[4]=((((-1.0)*sj8*x344))+new_r20);
evalcond[5]=((((-1.0)*cj8*x344))+new_r10);
evalcond[6]=(((cj8*new_r11))+x342+((new_r21*sj8)));
evalcond[7]=(((new_r20*sj8))+((cj8*new_r10))+(((-1.0)*x344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r00, new_r01);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x345=IKsin(j9);
IkReal x346=IKcos(j9);
IkReal x347=((1.0)*cj8);
IkReal x348=((1.0)*x346);
evalcond[0]=(((sj8*x345))+new_r21);
evalcond[1]=(x345+(((-1.0)*new_r00)));
evalcond[2]=(x346+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*sj8*x348))+new_r20);
evalcond[4]=(((cj8*x345))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*x346*x347))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*new_r11*x347))+x345+((new_r21*sj8)));
evalcond[7]=((((-1.0)*new_r10*x347))+((new_r20*sj8))+(((-1.0)*x348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r10, new_r11);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x349=IKsin(j9);
IkReal x350=IKcos(j9);
IkReal x351=((1.0)*x350);
evalcond[0]=(((sj8*x349))+new_r21);
evalcond[1]=(x349+(((-1.0)*new_r10)));
evalcond[2]=(x350+(((-1.0)*new_r11)));
evalcond[3]=(((cj8*x349))+new_r01);
evalcond[4]=((((-1.0)*sj8*x351))+new_r20);
evalcond[5]=((((-1.0)*cj8*x351))+new_r00);
evalcond[6]=(x349+((cj8*new_r01))+((new_r21*sj8)));
evalcond[7]=(((new_r20*sj8))+(((-1.0)*x351))+((cj8*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x352=IKsin(j9);
IkReal x353=IKcos(j9);
IkReal x354=((1.0)*cj8);
IkReal x355=((1.0)*x353);
evalcond[0]=(x352+new_r10);
evalcond[1]=(x353+new_r11);
evalcond[2]=(new_r21+((sj8*x352)));
evalcond[3]=((((-1.0)*sj8*x355))+new_r20);
evalcond[4]=(((cj8*x352))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*x353*x354))+(((-1.0)*new_r00)));
evalcond[6]=(x352+(((-1.0)*new_r01*x354))+((new_r21*sj8)));
evalcond[7]=(((new_r20*sj8))+(((-1.0)*x355))+(((-1.0)*new_r00*x354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j9eval[0]=1.0;
if( IKabs(j9eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j9]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j9array[2], cj9array[2], sj9array[2], tempj9array[1];
int numsolutions = 0;
for(int ij9 = 0; ij9 < numroots; ++ij9)
{
IkReal htj9 = zeror[ij9];
tempj9array[0]=((2.0)*(atan(htj9)));
for(int kj9 = 0; kj9 < 1; ++kj9)
{
j9array[numsolutions] = tempj9array[kj9];
if( j9array[numsolutions] > IKPI )
{
    j9array[numsolutions]-=IK2PI;
}
else if( j9array[numsolutions] < -IKPI )
{
    j9array[numsolutions]+=IK2PI;
}
sj9array[numsolutions] = IKsin(j9array[numsolutions]);
cj9array[numsolutions] = IKcos(j9array[numsolutions]);
numsolutions++;
}
}
bool j9valid[2]={true,true};
_nj9 = 2;
for(int ij9 = 0; ij9 < numsolutions; ++ij9)
    {
if( !j9valid[ij9] )
{
    continue;
}
    j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
htj9 = IKtan(j9/2);

_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < numsolutions; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x357=IKPowWithIntegerCheck(sj8,-1);
if(!x357.valid){
continue;
}
IkReal x356=x357.value;
CheckValue<IkReal> x358=IKPowWithIntegerCheck(cj7,-1);
if(!x358.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x356)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x356*(x358.value)*((((new_r11*sj8))+(((-1.0)*cj8*new_r21*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x356))+IKsqr((x356*(x358.value)*((((new_r11*sj8))+(((-1.0)*cj8*new_r21*sj7))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r21*x356), (x356*(x358.value)*((((new_r11*sj8))+(((-1.0)*cj8*new_r21*sj7))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x359=IKsin(j9);
IkReal x360=IKcos(j9);
IkReal x361=(cj7*new_r01);
IkReal x362=(cj8*sj7);
IkReal x363=((1.0)*cj7);
IkReal x364=(cj7*cj8);
IkReal x365=(cj7*x359);
IkReal x366=((1.0)*x360);
evalcond[0]=(new_r21+((sj8*x359)));
evalcond[1]=((((-1.0)*sj8*x366))+new_r20);
evalcond[2]=(((new_r00*sj7))+x359+(((-1.0)*new_r10*x363)));
evalcond[3]=(((new_r01*sj7))+x360+(((-1.0)*new_r11*x363)));
evalcond[4]=(((cj8*x359))+((new_r11*sj7))+x361);
evalcond[5]=(((x359*x364))+((sj7*x360))+new_r01);
evalcond[6]=(((new_r10*sj7))+(((-1.0)*cj8*x366))+((cj7*new_r00)));
evalcond[7]=((((-1.0)*cj8*x360*x363))+((sj7*x359))+new_r00);
evalcond[8]=((((-1.0)*x360*x363))+((x359*x362))+new_r11);
evalcond[9]=((((-1.0)*x362*x366))+(((-1.0)*x359*x363))+new_r10);
evalcond[10]=(x359+((cj8*x361))+((new_r21*sj8))+((new_r11*x362)));
evalcond[11]=(((new_r20*sj8))+(((-1.0)*x366))+((new_r00*x364))+((new_r10*x362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x368=IKPowWithIntegerCheck(sj8,-1);
if(!x368.valid){
continue;
}
IkReal x367=x368.value;
CheckValue<IkReal> x369=IKPowWithIntegerCheck(sj7,-1);
if(!x369.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x367)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x367*(x369.value)*(((((-1.0)*new_r01*sj8))+((cj7*cj8*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x367))+IKsqr((x367*(x369.value)*(((((-1.0)*new_r01*sj8))+((cj7*cj8*new_r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r21*x367), (x367*(x369.value)*(((((-1.0)*new_r01*sj8))+((cj7*cj8*new_r21))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x370=IKsin(j9);
IkReal x371=IKcos(j9);
IkReal x372=(cj7*new_r01);
IkReal x373=(cj8*sj7);
IkReal x374=((1.0)*cj7);
IkReal x375=(cj7*cj8);
IkReal x376=(cj7*x370);
IkReal x377=((1.0)*x371);
evalcond[0]=(((sj8*x370))+new_r21);
evalcond[1]=((((-1.0)*sj8*x377))+new_r20);
evalcond[2]=(((new_r00*sj7))+x370+(((-1.0)*new_r10*x374)));
evalcond[3]=(((new_r01*sj7))+x371+(((-1.0)*new_r11*x374)));
evalcond[4]=(((new_r11*sj7))+x372+((cj8*x370)));
evalcond[5]=(((x370*x375))+((sj7*x371))+new_r01);
evalcond[6]=(((new_r10*sj7))+(((-1.0)*cj8*x377))+((cj7*new_r00)));
evalcond[7]=((((-1.0)*cj8*x371*x374))+((sj7*x370))+new_r00);
evalcond[8]=(((x370*x373))+(((-1.0)*x371*x374))+new_r11);
evalcond[9]=((((-1.0)*x370*x374))+(((-1.0)*x373*x377))+new_r10);
evalcond[10]=(x370+((cj8*x372))+((new_r21*sj8))+((new_r11*x373)));
evalcond[11]=(((new_r20*sj8))+(((-1.0)*x377))+((new_r00*x375))+((new_r10*x373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x378=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x378.valid){
continue;
}
CheckValue<IkReal> x379 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x379.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x378.value)))+(x379.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x380=IKsin(j9);
IkReal x381=IKcos(j9);
IkReal x382=(cj7*new_r01);
IkReal x383=(cj8*sj7);
IkReal x384=((1.0)*cj7);
IkReal x385=(cj7*cj8);
IkReal x386=(cj7*x380);
IkReal x387=((1.0)*x381);
evalcond[0]=(((sj8*x380))+new_r21);
evalcond[1]=((((-1.0)*sj8*x387))+new_r20);
evalcond[2]=((((-1.0)*new_r10*x384))+((new_r00*sj7))+x380);
evalcond[3]=((((-1.0)*new_r11*x384))+((new_r01*sj7))+x381);
evalcond[4]=(((cj8*x380))+((new_r11*sj7))+x382);
evalcond[5]=(new_r01+((x380*x385))+((sj7*x381)));
evalcond[6]=(((new_r10*sj7))+((cj7*new_r00))+(((-1.0)*cj8*x387)));
evalcond[7]=((((-1.0)*cj8*x381*x384))+new_r00+((sj7*x380)));
evalcond[8]=((((-1.0)*x381*x384))+new_r11+((x380*x383)));
evalcond[9]=((((-1.0)*x380*x384))+new_r10+(((-1.0)*x383*x387)));
evalcond[10]=(((cj8*x382))+x380+((new_r11*x383))+((new_r21*sj8)));
evalcond[11]=(((new_r20*sj8))+((new_r00*x385))+((new_r10*x383))+(((-1.0)*x387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x388=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x388.valid){
continue;
}
CheckValue<IkReal> x389 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x389.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x388.value)))+(x389.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
evalcond[0]=(((sj8*(IKsin(j9))))+new_r21);
evalcond[1]=((((-1.0)*sj8*(IKcos(j9))))+new_r20);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
j7eval[0]=sj8;
j7eval[1]=IKsign(sj8);
j7eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=new_r12;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=0;
cj8=1.0;
j8=0;
IkReal x390=((1.0)*new_r11);
IkReal x391=((((-1.0)*new_r10*x390))+(((-1.0)*new_r00*new_r01)));
j7eval[0]=x391;
j7eval[1]=((IKabs((((new_r00*sj9))+(((-1.0)*sj9*x390)))))+(IKabs((((new_r10*sj9))+((new_r01*sj9))))));
j7eval[2]=IKsign(x391);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=0;
cj8=1.0;
j8=0;
IkReal x392=((((-1.0)*(new_r01*new_r01)))+(((-1.0)*(new_r11*new_r11))));
j7eval[0]=x392;
j7eval[1]=IKsign(x392);
j7eval[2]=((IKabs((((new_r11*sj9))+((cj9*new_r01)))))+(IKabs((((new_r01*sj9))+(((-1.0)*cj9*new_r11))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=0;
cj8=1.0;
j8=0;
IkReal x393=((1.0)*new_r11);
IkReal x394=((((-1.0)*new_r01*sj9))+(((-1.0)*cj9*x393)));
j7eval[0]=x394;
j7eval[1]=IKsign(x394);
j7eval[2]=((IKabs(((1.0)+(((-1.0)*(cj9*cj9)))+(((-1.0)*new_r00*x393)))))+(IKabs((((cj9*sj9))+((new_r00*new_r01))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x395=((-1.0)*new_r01);
IkReal x397 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x397)==0){
continue;
}
IkReal x396=pow(x397,-0.5);
CheckValue<IkReal> x398 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x395),IKFAST_ATAN2_MAGTHRESH);
if(!x398.valid){
continue;
}
IkReal gconst6=((-1.0)*(x398.value));
IkReal gconst7=(new_r11*x396);
IkReal gconst8=(x395*x396);
CheckValue<IkReal> x399 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x399.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x399.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x400=((-1.0)*new_r01);
CheckValue<IkReal> x403 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x400),IKFAST_ATAN2_MAGTHRESH);
if(!x403.valid){
continue;
}
IkReal x401=((-1.0)*(x403.value));
IkReal x402=x396;
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst7;
cj9=gconst8;
j9=x401;
IkReal gconst6=x401;
IkReal gconst7=(new_r11*x402);
IkReal gconst8=(x400*x402);
IkReal x404=new_r11*new_r11;
IkReal x405=(new_r10*new_r11);
IkReal x406=((((-1.0)*new_r00*new_r01))+(((-1.0)*x405)));
IkReal x407=x396;
IkReal x408=(new_r11*x407);
j7eval[0]=x406;
j7eval[1]=((IKabs((((x405*x407))+((new_r01*x408)))))+(IKabs(((((-1.0)*x404*x407))+((new_r00*x408))))));
j7eval[2]=IKsign(x406);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x409=((-1.0)*new_r01);
CheckValue<IkReal> x412 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x409),IKFAST_ATAN2_MAGTHRESH);
if(!x412.valid){
continue;
}
IkReal x410=((-1.0)*(x412.value));
IkReal x411=x396;
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst7;
cj9=gconst8;
j9=x410;
IkReal gconst6=x410;
IkReal gconst7=(new_r11*x411);
IkReal gconst8=(x409*x411);
IkReal x413=new_r11*new_r11;
CheckValue<IkReal> x416=IKPowWithIntegerCheck(((new_r01*new_r01)+x413),-1);
if(!x416.valid){
continue;
}
IkReal x414=x416.value;
IkReal x415=(x413*x414);
j7eval[0]=((IKabs((((new_r00*x414*(new_r01*new_r01*new_r01)))+((new_r00*new_r01*x415))+((new_r01*new_r11*x414)))))+(IKabs((((new_r01*new_r10))+x415))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x417=((-1.0)*new_r01);
CheckValue<IkReal> x420 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x417),IKFAST_ATAN2_MAGTHRESH);
if(!x420.valid){
continue;
}
IkReal x418=((-1.0)*(x420.value));
IkReal x419=x396;
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst7;
cj9=gconst8;
j9=x418;
IkReal gconst6=x418;
IkReal gconst7=(new_r11*x419);
IkReal gconst8=(x417*x419);
IkReal x421=new_r01*new_r01;
IkReal x422=new_r11*new_r11;
CheckValue<IkReal> x429=IKPowWithIntegerCheck((x422+x421),-1);
if(!x429.valid){
continue;
}
IkReal x423=x429.value;
IkReal x424=(x422*x423);
CheckValue<IkReal> x430=IKPowWithIntegerCheck(((((-1.0)*x422))+(((-1.0)*x421))),-1);
if(!x430.valid){
continue;
}
IkReal x425=x430.value;
IkReal x426=((1.0)*x425);
IkReal x427=(new_r11*x426);
IkReal x428=(new_r01*x426);
j7eval[0]=((IKabs(((((-1.0)*x424))+((x423*(x421*x421)))+((x421*x424)))))+(IKabs(((((-1.0)*new_r01*x427*(new_r11*new_r11)))+(((-1.0)*x427*(new_r01*new_r01*new_r01)))+(((-1.0)*new_r01*x427))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x431=IKPowWithIntegerCheck(gconst8,-1);
if(!x431.valid){
continue;
}
sj7array[0]=(new_r10*(x431.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x432=IKcos(j7);
IkReal x433=IKsin(j7);
IkReal x434=((-1.0)*x432);
evalcond[0]=(new_r01*x432);
evalcond[1]=(new_r10*x434);
evalcond[2]=(gconst8*x434);
evalcond[3]=(((new_r01*x433))+gconst8);
evalcond[4]=(((gconst8*x433))+new_r01);
evalcond[5]=((((-1.0)*gconst8))+((new_r10*x433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst7;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x435=((-1.0)*new_r01);
CheckValue<IkReal> x437 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x435),IKFAST_ATAN2_MAGTHRESH);
if(!x437.valid){
continue;
}
IkReal x436=((-1.0)*(x437.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst7;
cj9=gconst8;
j9=x436;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst6=x436;
IkReal gconst7=new_r11;
IkReal gconst8=x435;
j7eval[0]=-1.0;
j7eval[1]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
j7eval[2]=-1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x438=((-1.0)*new_r01);
CheckValue<IkReal> x440 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x438),IKFAST_ATAN2_MAGTHRESH);
if(!x440.valid){
continue;
}
IkReal x439=((-1.0)*(x440.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst7;
cj9=gconst8;
j9=x439;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst6=x439;
IkReal gconst7=new_r11;
IkReal gconst8=x438;
j7eval[0]=-1.0;
j7eval[1]=-1.0;
j7eval[2]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x441=((-1.0)*new_r01);
CheckValue<IkReal> x443 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(x441),IKFAST_ATAN2_MAGTHRESH);
if(!x443.valid){
continue;
}
IkReal x442=((-1.0)*(x443.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst7;
cj9=gconst8;
j9=x442;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst6=x442;
IkReal gconst7=new_r11;
IkReal gconst8=x441;
j7eval[0]=1.0;
j7eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j7eval[2]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x444=((1.0)*new_r01);
CheckValue<IkReal> x445=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*x444))+((gconst7*new_r11)))),-1);
if(!x445.valid){
continue;
}
CheckValue<IkReal> x446 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst7*gconst7)))+(new_r01*new_r01))),IkReal(((((-1.0)*new_r11*x444))+((gconst7*gconst8)))),IKFAST_ATAN2_MAGTHRESH);
if(!x446.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x445.value)))+(x446.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x447=IKsin(j7);
IkReal x448=IKcos(j7);
IkReal x449=((1.0)*gconst8);
IkReal x450=(gconst7*x447);
IkReal x451=(gconst7*x448);
IkReal x452=(x448*x449);
evalcond[0]=(((new_r01*x448))+gconst7+((new_r11*x447)));
evalcond[1]=(((gconst8*x447))+x451+new_r01);
evalcond[2]=((((-1.0)*x452))+x450);
evalcond[3]=(((new_r01*x447))+gconst8+(((-1.0)*new_r11*x448)));
evalcond[4]=((((-1.0)*x452))+x450+new_r11);
evalcond[5]=((((-1.0)*x451))+(((-1.0)*x447*x449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x453=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst8*gconst8)))+(((-1.0)*(gconst7*gconst7))))),-1);
if(!x453.valid){
continue;
}
CheckValue<IkReal> x454 = IKatan2WithCheck(IkReal((gconst8*new_r01)),IkReal((gconst7*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x454.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x453.value)))+(x454.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x455=IKsin(j7);
IkReal x456=IKcos(j7);
IkReal x457=((1.0)*gconst8);
IkReal x458=(gconst7*x455);
IkReal x459=(gconst7*x456);
IkReal x460=(x456*x457);
evalcond[0]=(((new_r11*x455))+((new_r01*x456))+gconst7);
evalcond[1]=(x459+new_r01+((gconst8*x455)));
evalcond[2]=((((-1.0)*x460))+x458);
evalcond[3]=(((new_r01*x455))+gconst8+(((-1.0)*new_r11*x456)));
evalcond[4]=((((-1.0)*x460))+x458+new_r11);
evalcond[5]=((((-1.0)*x459))+(((-1.0)*x455*x457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x461=IKPowWithIntegerCheck(IKsign((((gconst8*new_r01))+(((-1.0)*gconst7*new_r11)))),-1);
if(!x461.valid){
continue;
}
CheckValue<IkReal> x462 = IKatan2WithCheck(IkReal(gconst7*gconst7),IkReal(((-1.0)*gconst7*gconst8)),IKFAST_ATAN2_MAGTHRESH);
if(!x462.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x461.value)))+(x462.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x463=IKsin(j7);
IkReal x464=IKcos(j7);
IkReal x465=((1.0)*gconst8);
IkReal x466=(gconst7*x463);
IkReal x467=(gconst7*x464);
IkReal x468=(x464*x465);
evalcond[0]=(((new_r11*x463))+((new_r01*x464))+gconst7);
evalcond[1]=(x467+new_r01+((gconst8*x463)));
evalcond[2]=((((-1.0)*x468))+x466);
evalcond[3]=((((-1.0)*new_r11*x464))+((new_r01*x463))+gconst8);
evalcond[4]=((((-1.0)*x468))+x466+new_r11);
evalcond[5]=((((-1.0)*x463*x465))+(((-1.0)*x467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x470 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x470.valid){
continue;
}
IkReal x469=((-1.0)*(x470.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst7;
cj9=gconst8;
j9=x469;
new_r01=0;
new_r10=0;
IkReal gconst6=x469;
IkReal x471 = new_r11*new_r11;
if(IKabs(x471)==0){
continue;
}
IkReal gconst7=(new_r11*(pow(x471,-0.5)));
IkReal gconst8=0;
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x473 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x473.valid){
continue;
}
IkReal x472=((-1.0)*(x473.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst7;
cj9=gconst8;
j9=x472;
new_r01=0;
new_r10=0;
IkReal gconst6=x472;
IkReal x474 = new_r11*new_r11;
if(IKabs(x474)==0){
continue;
}
IkReal gconst7=(new_r11*(pow(x474,-0.5)));
IkReal gconst8=0;
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x475=IKPowWithIntegerCheck(gconst7,-1);
if(!x475.valid){
continue;
}
sj7array[0]=((-1.0)*new_r00*(x475.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x476=IKcos(j7);
IkReal x477=IKsin(j7);
evalcond[0]=(gconst7*x476);
evalcond[1]=(new_r00*x476);
evalcond[2]=((-1.0)*new_r11*x476);
evalcond[3]=(gconst7+((new_r00*x477)));
evalcond[4]=(gconst7+((new_r11*x477)));
evalcond[5]=(new_r11+((gconst7*x477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x478=IKPowWithIntegerCheck(new_r11,-1);
if(!x478.valid){
continue;
}
sj7array[0]=((-1.0)*gconst7*(x478.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x479=IKcos(j7);
IkReal x480=IKsin(j7);
IkReal x481=(gconst7*x480);
evalcond[0]=(gconst7*x479);
evalcond[1]=(new_r00*x479);
evalcond[2]=((-1.0)*new_r11*x479);
evalcond[3]=(gconst7+((new_r00*x480)));
evalcond[4]=(x481+new_r00);
evalcond[5]=(x481+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x482=IKPowWithIntegerCheck(new_r00,-1);
if(!x482.valid){
continue;
}
sj7array[0]=((-1.0)*gconst7*(x482.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x483=IKcos(j7);
IkReal x484=IKsin(j7);
IkReal x485=(gconst7*x484);
evalcond[0]=(gconst7*x483);
evalcond[1]=(new_r00*x483);
evalcond[2]=((-1.0)*new_r11*x483);
evalcond[3]=(((new_r11*x484))+gconst7);
evalcond[4]=(x485+new_r00);
evalcond[5]=(x485+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r11);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
IkReal x486=((-1.0)*new_r01);
CheckValue<IkReal> x488 = IKatan2WithCheck(IkReal(0),IkReal(x486),IKFAST_ATAN2_MAGTHRESH);
if(!x488.valid){
continue;
}
IkReal x487=((-1.0)*(x488.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst7;
cj9=gconst8;
j9=x487;
new_r11=0;
IkReal gconst6=x487;
IkReal gconst7=0;
IkReal x489 = new_r01*new_r01;
if(IKabs(x489)==0){
continue;
}
IkReal gconst8=(x486*(pow(x489,-0.5)));
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x490=((-1.0)*new_r01);
CheckValue<IkReal> x492 = IKatan2WithCheck(IkReal(0),IkReal(x490),IKFAST_ATAN2_MAGTHRESH);
if(!x492.valid){
continue;
}
IkReal x491=((-1.0)*(x492.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst7;
cj9=gconst8;
j9=x491;
new_r11=0;
IkReal gconst6=x491;
IkReal gconst7=0;
IkReal x493 = new_r01*new_r01;
if(IKabs(x493)==0){
continue;
}
IkReal gconst8=(x490*(pow(x493,-0.5)));
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x494=((-1.0)*new_r01);
CheckValue<IkReal> x496 = IKatan2WithCheck(IkReal(0),IkReal(x494),IKFAST_ATAN2_MAGTHRESH);
if(!x496.valid){
continue;
}
IkReal x495=((-1.0)*(x496.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst7;
cj9=gconst8;
j9=x495;
new_r11=0;
IkReal gconst6=x495;
IkReal gconst7=0;
IkReal x497 = new_r01*new_r01;
if(IKabs(x497)==0){
continue;
}
IkReal gconst8=(x494*(pow(x497,-0.5)));
j7eval[0]=new_r01;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x498=IKPowWithIntegerCheck(new_r01,-1);
if(!x498.valid){
continue;
}
CheckValue<IkReal> x499=IKPowWithIntegerCheck(gconst8,-1);
if(!x499.valid){
continue;
}
if( IKabs(((-1.0)*gconst8*(x498.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x499.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst8*(x498.value)))+IKsqr((new_r00*(x499.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst8*(x498.value)), (new_r00*(x499.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x500=IKcos(j7);
IkReal x501=IKsin(j7);
IkReal x502=((1.0)*gconst8);
evalcond[0]=(new_r01*x500);
evalcond[1]=((-1.0)*gconst8*x500);
evalcond[2]=(gconst8+((new_r01*x501)));
evalcond[3]=(new_r01+((gconst8*x501)));
evalcond[4]=(new_r00+(((-1.0)*x500*x502)));
evalcond[5]=((((-1.0)*x501*x502))+new_r10);
evalcond[6]=((((-1.0)*new_r10*x500))+((new_r00*x501)));
evalcond[7]=((((-1.0)*x502))+((new_r10*x501))+((new_r00*x500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x503 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x503.valid){
continue;
}
CheckValue<IkReal> x504=IKPowWithIntegerCheck(IKsign(gconst8),-1);
if(!x504.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x503.value)+(((1.5707963267949)*(x504.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x505=IKcos(j7);
IkReal x506=IKsin(j7);
IkReal x507=((1.0)*gconst8);
evalcond[0]=(new_r01*x505);
evalcond[1]=((-1.0)*gconst8*x505);
evalcond[2]=(gconst8+((new_r01*x506)));
evalcond[3]=(new_r01+((gconst8*x506)));
evalcond[4]=((((-1.0)*x505*x507))+new_r00);
evalcond[5]=((((-1.0)*x506*x507))+new_r10);
evalcond[6]=((((-1.0)*new_r10*x505))+((new_r00*x506)));
evalcond[7]=((((-1.0)*x507))+((new_r10*x506))+((new_r00*x505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x508=IKPowWithIntegerCheck(IKsign(gconst8),-1);
if(!x508.valid){
continue;
}
CheckValue<IkReal> x509 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x509.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x508.value)))+(x509.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x510=IKcos(j7);
IkReal x511=IKsin(j7);
IkReal x512=((1.0)*gconst8);
evalcond[0]=(new_r01*x510);
evalcond[1]=((-1.0)*gconst8*x510);
evalcond[2]=(((new_r01*x511))+gconst8);
evalcond[3]=(((gconst8*x511))+new_r01);
evalcond[4]=(new_r00+(((-1.0)*x510*x512)));
evalcond[5]=((((-1.0)*x511*x512))+new_r10);
evalcond[6]=(((new_r00*x511))+(((-1.0)*new_r10*x510)));
evalcond[7]=(((new_r00*x510))+((new_r10*x511))+(((-1.0)*x512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x513=((1.0)*new_r01);
CheckValue<IkReal> x514 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst7*gconst7)))+(new_r01*new_r01))),IkReal(((((-1.0)*new_r11*x513))+((gconst7*gconst8)))),IKFAST_ATAN2_MAGTHRESH);
if(!x514.valid){
continue;
}
CheckValue<IkReal> x515=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*x513))+((gconst7*new_r11)))),-1);
if(!x515.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x514.value)+(((1.5707963267949)*(x515.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x516=IKsin(j7);
IkReal x517=IKcos(j7);
IkReal x518=(gconst7*x516);
IkReal x519=(gconst7*x517);
IkReal x520=((1.0)*x517);
IkReal x521=(gconst8*x516);
IkReal x522=(gconst8*x520);
evalcond[0]=(((new_r01*x517))+((new_r11*x516))+gconst7);
evalcond[1]=(x521+x519+new_r01);
evalcond[2]=(((new_r00*x516))+gconst7+(((-1.0)*new_r10*x520)));
evalcond[3]=(((new_r01*x516))+gconst8+(((-1.0)*new_r11*x520)));
evalcond[4]=((((-1.0)*x522))+x518+new_r00);
evalcond[5]=((((-1.0)*x522))+x518+new_r11);
evalcond[6]=(((new_r00*x517))+((new_r10*x516))+(((-1.0)*gconst8)));
evalcond[7]=((((-1.0)*x521))+(((-1.0)*x519))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x523=((1.0)*gconst7);
CheckValue<IkReal> x524 = IKatan2WithCheck(IkReal(((gconst7*gconst7)+((new_r01*new_r10)))),IkReal(((((-1.0)*gconst8*x523))+((new_r00*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x524.valid){
continue;
}
CheckValue<IkReal> x525=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r00*x523))+(((-1.0)*gconst8*new_r10)))),-1);
if(!x525.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x524.value)+(((1.5707963267949)*(x525.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x526=IKsin(j7);
IkReal x527=IKcos(j7);
IkReal x528=(gconst7*x526);
IkReal x529=(gconst7*x527);
IkReal x530=((1.0)*x527);
IkReal x531=(gconst8*x526);
IkReal x532=(gconst8*x530);
evalcond[0]=(((new_r01*x527))+gconst7+((new_r11*x526)));
evalcond[1]=(x531+x529+new_r01);
evalcond[2]=(gconst7+(((-1.0)*new_r10*x530))+((new_r00*x526)));
evalcond[3]=(((new_r01*x526))+gconst8+(((-1.0)*new_r11*x530)));
evalcond[4]=((((-1.0)*x532))+x528+new_r00);
evalcond[5]=((((-1.0)*x532))+x528+new_r11);
evalcond[6]=((((-1.0)*gconst8))+((new_r10*x526))+((new_r00*x527)));
evalcond[7]=((((-1.0)*x531))+(((-1.0)*x529))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x533=((1.0)*new_r11);
CheckValue<IkReal> x534=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x533))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x534.valid){
continue;
}
CheckValue<IkReal> x535 = IKatan2WithCheck(IkReal((((gconst7*new_r01))+((gconst7*new_r10)))),IkReal(((((-1.0)*gconst7*x533))+((gconst7*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x535.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x534.value)))+(x535.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x536=IKsin(j7);
IkReal x537=IKcos(j7);
IkReal x538=(gconst7*x536);
IkReal x539=(gconst7*x537);
IkReal x540=((1.0)*x537);
IkReal x541=(gconst8*x536);
IkReal x542=(gconst8*x540);
evalcond[0]=(((new_r01*x537))+gconst7+((new_r11*x536)));
evalcond[1]=(x541+x539+new_r01);
evalcond[2]=(gconst7+(((-1.0)*new_r10*x540))+((new_r00*x536)));
evalcond[3]=(((new_r01*x536))+gconst8+(((-1.0)*new_r11*x540)));
evalcond[4]=((((-1.0)*x542))+x538+new_r00);
evalcond[5]=((((-1.0)*x542))+x538+new_r11);
evalcond[6]=((((-1.0)*gconst8))+((new_r10*x536))+((new_r00*x537)));
evalcond[7]=((((-1.0)*x541))+(((-1.0)*x539))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x543=((-1.0)*new_r11);
IkReal x545 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x545)==0){
continue;
}
IkReal x544=pow(x545,-0.5);
CheckValue<IkReal> x546 = IKatan2WithCheck(IkReal(x543),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x546.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x546.value))));
IkReal gconst10=(x543*x544);
IkReal gconst11=((1.0)*new_r01*x544);
CheckValue<IkReal> x547 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x547.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x547.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x548=((-1.0)*new_r11);
CheckValue<IkReal> x551 = IKatan2WithCheck(IkReal(x548),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x551.valid){
continue;
}
IkReal x549=((1.0)*(x551.value));
IkReal x550=x544;
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x549)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x549)));
IkReal gconst10=(x548*x550);
IkReal gconst11=((1.0)*new_r01*x550);
IkReal x552=new_r11*new_r11;
IkReal x553=((1.0)*new_r01);
IkReal x554=((1.0)*new_r10);
IkReal x555=((((-1.0)*new_r11*x554))+(((-1.0)*new_r00*x553)));
IkReal x556=x544;
IkReal x557=(new_r11*x556);
j7eval[0]=x555;
j7eval[1]=((IKabs(((((-1.0)*x554*x557))+(((-1.0)*x553*x557)))))+(IKabs(((((-1.0)*new_r00*x557))+((x552*x556))))));
j7eval[2]=IKsign(x555);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x558=((-1.0)*new_r11);
CheckValue<IkReal> x561 = IKatan2WithCheck(IkReal(x558),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x561.valid){
continue;
}
IkReal x559=((1.0)*(x561.value));
IkReal x560=x544;
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x559)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x559)));
IkReal gconst10=(x558*x560);
IkReal gconst11=((1.0)*new_r01*x560);
IkReal x562=new_r11*new_r11;
IkReal x563=new_r01*new_r01*new_r01;
CheckValue<IkReal> x567=IKPowWithIntegerCheck(((new_r01*new_r01)+x562),-1);
if(!x567.valid){
continue;
}
IkReal x564=x567.value;
IkReal x565=(x562*x564);
IkReal x566=(x563*x564);
j7eval[0]=((IKabs((((new_r01*new_r10*x565))+x565+((new_r10*x566)))))+(IKabs((((new_r00*x566))+((new_r00*new_r01*x565))+((new_r01*new_r11*x564))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x568=((-1.0)*new_r11);
CheckValue<IkReal> x571 = IKatan2WithCheck(IkReal(x568),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x571.valid){
continue;
}
IkReal x569=((1.0)*(x571.value));
IkReal x570=x544;
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x569)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x569)));
IkReal gconst10=(x568*x570);
IkReal gconst11=((1.0)*new_r01*x570);
IkReal x572=new_r01*new_r01;
IkReal x573=new_r11*new_r11;
CheckValue<IkReal> x580=IKPowWithIntegerCheck((x573+x572),-1);
if(!x580.valid){
continue;
}
IkReal x574=x580.value;
IkReal x575=(x573*x574);
CheckValue<IkReal> x581=IKPowWithIntegerCheck(((((-1.0)*x572))+(((-1.0)*x573))),-1);
if(!x581.valid){
continue;
}
IkReal x576=x581.value;
IkReal x577=((1.0)*x576);
IkReal x578=(new_r11*x577);
IkReal x579=(new_r01*x577);
j7eval[0]=((IKabs((((x574*(x572*x572)))+(((-1.0)*x575))+((x572*x575)))))+(IKabs(((((-1.0)*new_r01*x578*(new_r11*new_r11)))+(((-1.0)*x578*(new_r01*new_r01*new_r01)))+(((-1.0)*new_r01*x578))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x582=IKPowWithIntegerCheck(gconst11,-1);
if(!x582.valid){
continue;
}
sj7array[0]=(new_r10*(x582.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x583=IKcos(j7);
IkReal x584=IKsin(j7);
IkReal x585=((-1.0)*x583);
evalcond[0]=(new_r01*x583);
evalcond[1]=(new_r10*x585);
evalcond[2]=(gconst11*x585);
evalcond[3]=(gconst11+((new_r01*x584)));
evalcond[4]=(((gconst11*x584))+new_r01);
evalcond[5]=((((-1.0)*gconst11))+((new_r10*x584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x586=((-1.0)*new_r11);
CheckValue<IkReal> x588 = IKatan2WithCheck(IkReal(x586),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x588.valid){
continue;
}
IkReal x587=((1.0)*(x588.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x587)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x587)));
IkReal gconst10=x586;
IkReal gconst11=((1.0)*new_r01);
j7eval[0]=1.0;
j7eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r01*new_r01))))))+(IKabs(((1.0)*new_r01*new_r11))));
j7eval[2]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[4];
IkReal x589=((-1.0)*new_r11);
CheckValue<IkReal> x591 = IKatan2WithCheck(IkReal(x589),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x591.valid){
continue;
}
IkReal x590=((1.0)*(x591.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x590)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x590)));
IkReal gconst10=x589;
IkReal gconst11=((1.0)*new_r01);
j7eval[0]=-1.0;
j7eval[1]=-1.0;
j7eval[2]=new_r01;
j7eval[3]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  || IKabs(j7eval[3]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x592=((-1.0)*new_r11);
CheckValue<IkReal> x594 = IKatan2WithCheck(IkReal(x592),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x594.valid){
continue;
}
IkReal x593=((1.0)*(x594.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x593)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x593)));
IkReal gconst10=x592;
IkReal gconst11=((1.0)*new_r01);
j7eval[0]=-1.0;
j7eval[1]=-1.0;
j7eval[2]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01)))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x595=((1.0)*new_r01);
CheckValue<IkReal> x596 = IKatan2WithCheck(IkReal(((new_r01*new_r01)+(((-1.0)*(gconst10*gconst10))))),IkReal(((((-1.0)*new_r11*x595))+((gconst10*gconst11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x596.valid){
continue;
}
CheckValue<IkReal> x597=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*x595))+((gconst10*new_r11)))),-1);
if(!x597.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x596.value)+(((1.5707963267949)*(x597.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x598=IKcos(j7);
IkReal x599=IKsin(j7);
IkReal x600=(gconst10*x599);
IkReal x601=((1.0)*x598);
IkReal x602=(gconst11*x599);
IkReal x603=(gconst11*x601);
evalcond[0]=(((new_r11*x599))+gconst10+((new_r01*x598)));
evalcond[1]=(((gconst10*x598))+x602+new_r01);
evalcond[2]=(x600+(((-1.0)*x603)));
evalcond[3]=((((-1.0)*new_r11*x601))+gconst11+((new_r01*x599)));
evalcond[4]=(x600+(((-1.0)*x603))+new_r11);
evalcond[5]=((((-1.0)*gconst10*x601))+(((-1.0)*x602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x604=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst11*gconst11)))+(((-1.0)*(gconst10*gconst10))))),-1);
if(!x604.valid){
continue;
}
CheckValue<IkReal> x605 = IKatan2WithCheck(IkReal((gconst11*new_r01)),IkReal((gconst10*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x605.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x604.value)))+(x605.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x606=IKcos(j7);
IkReal x607=IKsin(j7);
IkReal x608=(gconst10*x607);
IkReal x609=((1.0)*x606);
IkReal x610=(gconst11*x607);
IkReal x611=(gconst11*x609);
evalcond[0]=(gconst10+((new_r11*x607))+((new_r01*x606)));
evalcond[1]=(x610+new_r01+((gconst10*x606)));
evalcond[2]=((((-1.0)*x611))+x608);
evalcond[3]=((((-1.0)*new_r11*x609))+gconst11+((new_r01*x607)));
evalcond[4]=((((-1.0)*x611))+x608+new_r11);
evalcond[5]=((((-1.0)*gconst10*x609))+(((-1.0)*x610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x612=IKPowWithIntegerCheck(IKsign((((gconst11*new_r01))+(((-1.0)*gconst10*new_r11)))),-1);
if(!x612.valid){
continue;
}
CheckValue<IkReal> x613 = IKatan2WithCheck(IkReal(gconst10*gconst10),IkReal(((-1.0)*gconst10*gconst11)),IKFAST_ATAN2_MAGTHRESH);
if(!x613.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x612.value)))+(x613.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x614=IKcos(j7);
IkReal x615=IKsin(j7);
IkReal x616=(gconst10*x615);
IkReal x617=((1.0)*x614);
IkReal x618=(gconst11*x615);
IkReal x619=(gconst11*x617);
evalcond[0]=(gconst10+((new_r11*x615))+((new_r01*x614)));
evalcond[1]=(x618+new_r01+((gconst10*x614)));
evalcond[2]=((((-1.0)*x619))+x616);
evalcond[3]=(gconst11+(((-1.0)*new_r11*x617))+((new_r01*x615)));
evalcond[4]=((((-1.0)*x619))+x616+new_r11);
evalcond[5]=((((-1.0)*gconst10*x617))+(((-1.0)*x618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
IkReal x620=((-1.0)*new_r11);
CheckValue<IkReal> x622 = IKatan2WithCheck(IkReal(x620),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x622.valid){
continue;
}
IkReal x621=((1.0)*(x622.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x621)));
new_r01=0;
new_r10=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x621)));
IkReal x623 = new_r11*new_r11;
if(IKabs(x623)==0){
continue;
}
IkReal gconst10=(x620*(pow(x623,-0.5)));
IkReal gconst11=0;
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x624=((-1.0)*new_r11);
CheckValue<IkReal> x626 = IKatan2WithCheck(IkReal(x624),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x626.valid){
continue;
}
IkReal x625=((1.0)*(x626.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x625)));
new_r01=0;
new_r10=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x625)));
IkReal x627 = new_r11*new_r11;
if(IKabs(x627)==0){
continue;
}
IkReal gconst10=(x624*(pow(x627,-0.5)));
IkReal gconst11=0;
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x628=IKPowWithIntegerCheck(gconst10,-1);
if(!x628.valid){
continue;
}
sj7array[0]=((-1.0)*new_r00*(x628.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x629=IKcos(j7);
IkReal x630=IKsin(j7);
evalcond[0]=(gconst10*x629);
evalcond[1]=(new_r00*x629);
evalcond[2]=((-1.0)*new_r11*x629);
evalcond[3]=(gconst10+((new_r00*x630)));
evalcond[4]=(gconst10+((new_r11*x630)));
evalcond[5]=(((gconst10*x630))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x631=IKPowWithIntegerCheck(new_r11,-1);
if(!x631.valid){
continue;
}
sj7array[0]=((-1.0)*gconst10*(x631.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x632=IKcos(j7);
IkReal x633=IKsin(j7);
IkReal x634=(gconst10*x633);
evalcond[0]=(gconst10*x632);
evalcond[1]=(new_r00*x632);
evalcond[2]=((-1.0)*new_r11*x632);
evalcond[3]=(gconst10+((new_r00*x633)));
evalcond[4]=(x634+new_r00);
evalcond[5]=(x634+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x635=IKPowWithIntegerCheck(new_r00,-1);
if(!x635.valid){
continue;
}
sj7array[0]=((-1.0)*gconst10*(x635.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x636=IKcos(j7);
IkReal x637=IKsin(j7);
IkReal x638=(gconst10*x637);
evalcond[0]=(gconst10*x636);
evalcond[1]=(new_r00*x636);
evalcond[2]=((-1.0)*new_r11*x636);
evalcond[3]=(gconst10+((new_r11*x637)));
evalcond[4]=(x638+new_r00);
evalcond[5]=(x638+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r11);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x640 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x640.valid){
continue;
}
IkReal x639=((1.0)*(x640.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x639)));
new_r11=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x639)));
IkReal gconst10=0;
IkReal x641 = new_r01*new_r01;
if(IKabs(x641)==0){
continue;
}
IkReal gconst11=((1.0)*new_r01*(pow(x641,-0.5)));
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x643 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x643.valid){
continue;
}
IkReal x642=((1.0)*(x643.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x642)));
new_r11=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x642)));
IkReal gconst10=0;
IkReal x644 = new_r01*new_r01;
if(IKabs(x644)==0){
continue;
}
IkReal gconst11=((1.0)*new_r01*(pow(x644,-0.5)));
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x646 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x646.valid){
continue;
}
IkReal x645=((1.0)*(x646.value));
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x645)));
new_r11=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x645)));
IkReal gconst10=0;
IkReal x647 = new_r01*new_r01;
if(IKabs(x647)==0){
continue;
}
IkReal gconst11=((1.0)*new_r01*(pow(x647,-0.5)));
j7eval[0]=new_r01;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x648=IKPowWithIntegerCheck(new_r01,-1);
if(!x648.valid){
continue;
}
CheckValue<IkReal> x649=IKPowWithIntegerCheck(gconst11,-1);
if(!x649.valid){
continue;
}
if( IKabs(((-1.0)*gconst11*(x648.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x649.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst11*(x648.value)))+IKsqr((new_r00*(x649.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst11*(x648.value)), (new_r00*(x649.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x650=IKcos(j7);
IkReal x651=IKsin(j7);
IkReal x652=(gconst11*x651);
IkReal x653=((1.0)*x650);
evalcond[0]=(new_r01*x650);
evalcond[1]=((-1.0)*gconst11*x650);
evalcond[2]=(gconst11+((new_r01*x651)));
evalcond[3]=(x652+new_r01);
evalcond[4]=((((-1.0)*gconst11*x653))+new_r00);
evalcond[5]=((((-1.0)*x652))+new_r10);
evalcond[6]=((((-1.0)*new_r10*x653))+((new_r00*x651)));
evalcond[7]=(((new_r10*x651))+((new_r00*x650))+(((-1.0)*gconst11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x654=IKPowWithIntegerCheck(IKsign(gconst11),-1);
if(!x654.valid){
continue;
}
CheckValue<IkReal> x655 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x655.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x654.value)))+(x655.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x656=IKcos(j7);
IkReal x657=IKsin(j7);
IkReal x658=(gconst11*x657);
IkReal x659=((1.0)*x656);
evalcond[0]=(new_r01*x656);
evalcond[1]=((-1.0)*gconst11*x656);
evalcond[2]=(gconst11+((new_r01*x657)));
evalcond[3]=(x658+new_r01);
evalcond[4]=((((-1.0)*gconst11*x659))+new_r00);
evalcond[5]=((((-1.0)*x658))+new_r10);
evalcond[6]=((((-1.0)*new_r10*x659))+((new_r00*x657)));
evalcond[7]=(((new_r10*x657))+((new_r00*x656))+(((-1.0)*gconst11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x660=IKPowWithIntegerCheck(IKsign(gconst11),-1);
if(!x660.valid){
continue;
}
CheckValue<IkReal> x661 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x661.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x660.value)))+(x661.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x662=IKcos(j7);
IkReal x663=IKsin(j7);
IkReal x664=(gconst11*x663);
IkReal x665=((1.0)*x662);
evalcond[0]=(new_r01*x662);
evalcond[1]=((-1.0)*gconst11*x662);
evalcond[2]=(gconst11+((new_r01*x663)));
evalcond[3]=(x664+new_r01);
evalcond[4]=((((-1.0)*gconst11*x665))+new_r00);
evalcond[5]=((((-1.0)*x664))+new_r10);
evalcond[6]=((((-1.0)*new_r10*x665))+((new_r00*x663)));
evalcond[7]=(((new_r10*x663))+(((-1.0)*gconst11))+((new_r00*x662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x666=((1.0)*new_r01);
CheckValue<IkReal> x667 = IKatan2WithCheck(IkReal(((new_r01*new_r01)+(((-1.0)*(gconst10*gconst10))))),IkReal((((gconst10*gconst11))+(((-1.0)*new_r11*x666)))),IKFAST_ATAN2_MAGTHRESH);
if(!x667.valid){
continue;
}
CheckValue<IkReal> x668=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*x666))+((gconst10*new_r11)))),-1);
if(!x668.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x667.value)+(((1.5707963267949)*(x668.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x669=IKcos(j7);
IkReal x670=IKsin(j7);
IkReal x671=(gconst10*x670);
IkReal x672=(gconst11*x670);
IkReal x673=((1.0)*x669);
IkReal x674=(gconst11*x673);
evalcond[0]=(((new_r11*x670))+gconst10+((new_r01*x669)));
evalcond[1]=(x672+new_r01+((gconst10*x669)));
evalcond[2]=(((new_r00*x670))+gconst10+(((-1.0)*new_r10*x673)));
evalcond[3]=(((new_r01*x670))+gconst11+(((-1.0)*new_r11*x673)));
evalcond[4]=(x671+new_r00+(((-1.0)*x674)));
evalcond[5]=(x671+new_r11+(((-1.0)*x674)));
evalcond[6]=(((new_r10*x670))+(((-1.0)*gconst11))+((new_r00*x669)));
evalcond[7]=((((-1.0)*x672))+new_r10+(((-1.0)*gconst10*x673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x675=((1.0)*gconst10);
CheckValue<IkReal> x676 = IKatan2WithCheck(IkReal(((gconst10*gconst10)+((new_r01*new_r10)))),IkReal((((new_r00*new_r01))+(((-1.0)*gconst11*x675)))),IKFAST_ATAN2_MAGTHRESH);
if(!x676.valid){
continue;
}
CheckValue<IkReal> x677=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r00*x675))+(((-1.0)*gconst11*new_r10)))),-1);
if(!x677.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x676.value)+(((1.5707963267949)*(x677.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x678=IKcos(j7);
IkReal x679=IKsin(j7);
IkReal x680=(gconst10*x679);
IkReal x681=(gconst11*x679);
IkReal x682=((1.0)*x678);
IkReal x683=(gconst11*x682);
evalcond[0]=(((new_r11*x679))+((new_r01*x678))+gconst10);
evalcond[1]=(((gconst10*x678))+x681+new_r01);
evalcond[2]=((((-1.0)*new_r10*x682))+((new_r00*x679))+gconst10);
evalcond[3]=(((new_r01*x679))+gconst11+(((-1.0)*new_r11*x682)));
evalcond[4]=((((-1.0)*x683))+x680+new_r00);
evalcond[5]=((((-1.0)*x683))+x680+new_r11);
evalcond[6]=(((new_r00*x678))+((new_r10*x679))+(((-1.0)*gconst11)));
evalcond[7]=((((-1.0)*gconst10*x682))+new_r10+(((-1.0)*x681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x684=((1.0)*new_r11);
CheckValue<IkReal> x685=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x684))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x685.valid){
continue;
}
CheckValue<IkReal> x686 = IKatan2WithCheck(IkReal((((gconst10*new_r01))+((gconst10*new_r10)))),IkReal(((((-1.0)*gconst10*x684))+((gconst10*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x686.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x685.value)))+(x686.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x687=IKcos(j7);
IkReal x688=IKsin(j7);
IkReal x689=(gconst10*x688);
IkReal x690=(gconst11*x688);
IkReal x691=((1.0)*x687);
IkReal x692=(gconst11*x691);
evalcond[0]=(gconst10+((new_r01*x687))+((new_r11*x688)));
evalcond[1]=(((gconst10*x687))+x690+new_r01);
evalcond[2]=(gconst10+(((-1.0)*new_r10*x691))+((new_r00*x688)));
evalcond[3]=(gconst11+(((-1.0)*new_r11*x691))+((new_r01*x688)));
evalcond[4]=(x689+(((-1.0)*x692))+new_r00);
evalcond[5]=(x689+(((-1.0)*x692))+new_r11);
evalcond[6]=(((new_r00*x687))+(((-1.0)*gconst11))+((new_r10*x688)));
evalcond[7]=((((-1.0)*gconst10*x691))+new_r10+(((-1.0)*x690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x693=IKsin(j7);
IkReal x694=IKcos(j7);
IkReal x695=((1.0)*x694);
evalcond[0]=(x693+new_r01);
evalcond[1]=((((-1.0)*x695))+new_r00);
evalcond[2]=((((-1.0)*x695))+new_r11);
evalcond[3]=(new_r10+(((-1.0)*x693)));
evalcond[4]=(((new_r11*x693))+((new_r01*x694)));
evalcond[5]=((((-1.0)*new_r10*x695))+((new_r00*x693)));
evalcond[6]=((-1.0)+((new_r10*x693))+((new_r00*x694)));
evalcond[7]=((1.0)+(((-1.0)*new_r11*x695))+((new_r01*x693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r00));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x696=IKcos(j7);
IkReal x697=IKsin(j7);
IkReal x698=((1.0)*x696);
evalcond[0]=(x696+new_r00);
evalcond[1]=(x696+new_r11);
evalcond[2]=(x697+new_r10);
evalcond[3]=(new_r01+(((-1.0)*x697)));
evalcond[4]=(((new_r11*x697))+((new_r01*x696)));
evalcond[5]=((((-1.0)*new_r10*x698))+((new_r00*x697)));
evalcond[6]=((1.0)+((new_r10*x697))+((new_r00*x696)));
evalcond[7]=((-1.0)+(((-1.0)*new_r11*x698))+((new_r01*x697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=0;
cj8=1.0;
j8=0;
new_r11=0;
new_r00=0;
j7eval[0]=new_r01;
j7eval[1]=IKsign(new_r01);
j7eval[2]=((IKabs(cj9))+(IKabs(sj9)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj8=0;
cj8=1.0;
j8=0;
new_r11=0;
new_r00=0;
j7eval[0]=new_r01;
j7eval[1]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj8=0;
cj8=1.0;
j8=0;
new_r11=0;
new_r00=0;
j7eval[0]=new_r01;
j7eval[1]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
sj7array[0]=new_r10;
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x699=IKcos(j7);
IkReal x700=IKsin(j7);
IkReal x701=((-1.0)*x699);
evalcond[0]=(new_r01*x699);
evalcond[1]=(x700+new_r01);
evalcond[2]=x701;
evalcond[3]=(new_r10*x701);
evalcond[4]=((1.0)+((new_r01*x700)));
evalcond[5]=((-1.0)+((new_r10*x700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
sj7array[0]=new_r01;
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x702=IKcos(j7);
IkReal x703=IKsin(j7);
evalcond[0]=x702;
evalcond[1]=(new_r01*x702);
evalcond[2]=(x703+new_r10);
evalcond[3]=((-1.0)*new_r10*x702);
evalcond[4]=((-1.0)+((new_r01*x703)));
evalcond[5]=((1.0)+((new_r10*x703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x705=IKPowWithIntegerCheck(new_r01,-1);
if(!x705.valid){
continue;
}
IkReal x704=x705.value;
CheckValue<IkReal> x706=IKPowWithIntegerCheck(sj9,-1);
if(!x706.valid){
continue;
}
CheckValue<IkReal> x707=IKPowWithIntegerCheck(x704,-2);
if(!x707.valid){
continue;
}
if( IKabs(((-1.0)*cj9*x704)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x704*(x706.value)*(((cj9*cj9)+(((-1.0)*(x707.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj9*x704))+IKsqr((x704*(x706.value)*(((cj9*cj9)+(((-1.0)*(x707.value)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*cj9*x704), (x704*(x706.value)*(((cj9*cj9)+(((-1.0)*(x707.value)))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x708=IKcos(j7);
IkReal x709=IKsin(j7);
IkReal x710=((1.0)*cj9);
IkReal x711=((1.0)*x708);
evalcond[0]=(cj9+((new_r01*x709)));
evalcond[1]=(sj9+((new_r01*x708)));
evalcond[2]=(sj9+(((-1.0)*new_r10*x711)));
evalcond[3]=((((-1.0)*x710))+((new_r10*x709)));
evalcond[4]=(((sj9*x708))+((cj9*x709))+new_r01);
evalcond[5]=(((sj9*x709))+(((-1.0)*x708*x710)));
evalcond[6]=((((-1.0)*sj9*x711))+(((-1.0)*x709*x710))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x712=IKPowWithIntegerCheck(new_r01,-1);
if(!x712.valid){
continue;
}
CheckValue<IkReal> x713=IKPowWithIntegerCheck(new_r10,-1);
if(!x713.valid){
continue;
}
if( IKabs(((-1.0)*cj9*(x712.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj9*(x713.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj9*(x712.value)))+IKsqr((sj9*(x713.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*cj9*(x712.value)), (sj9*(x713.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x714=IKcos(j7);
IkReal x715=IKsin(j7);
IkReal x716=((1.0)*cj9);
IkReal x717=((1.0)*x714);
evalcond[0]=(cj9+((new_r01*x715)));
evalcond[1]=(sj9+((new_r01*x714)));
evalcond[2]=(sj9+(((-1.0)*new_r10*x717)));
evalcond[3]=((((-1.0)*x716))+((new_r10*x715)));
evalcond[4]=(((sj9*x714))+new_r01+((cj9*x715)));
evalcond[5]=((((-1.0)*x714*x716))+((sj9*x715)));
evalcond[6]=((((-1.0)*sj9*x717))+new_r10+(((-1.0)*x715*x716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x718=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x718.valid){
continue;
}
CheckValue<IkReal> x719 = IKatan2WithCheck(IkReal(((-1.0)*cj9)),IkReal(((-1.0)*sj9)),IKFAST_ATAN2_MAGTHRESH);
if(!x719.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x718.value)))+(x719.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x720=IKcos(j7);
IkReal x721=IKsin(j7);
IkReal x722=((1.0)*cj9);
IkReal x723=((1.0)*x720);
evalcond[0]=(cj9+((new_r01*x721)));
evalcond[1]=(sj9+((new_r01*x720)));
evalcond[2]=(sj9+(((-1.0)*new_r10*x723)));
evalcond[3]=((((-1.0)*x722))+((new_r10*x721)));
evalcond[4]=(((sj9*x720))+new_r01+((cj9*x721)));
evalcond[5]=(((sj9*x721))+(((-1.0)*x720*x722)));
evalcond[6]=((((-1.0)*sj9*x723))+(((-1.0)*x721*x722))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=1.0;
j8=0;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x725 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x725.valid){
continue;
}
IkReal x724=x725.value;
j7array[0]=((-1.0)*x724);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x724)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r10*(IKcos(j7))))+((new_r00*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=1.0;
j8=0;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x727 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x727.valid){
continue;
}
IkReal x726=x727.value;
j7array[0]=((-1.0)*x726);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x726)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r11*(IKcos(j7))))+((new_r01*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=0;
cj8=1.0;
j8=0;
new_r01=0;
new_r10=0;
j7eval[0]=new_r11;
j7eval[1]=IKsign(new_r11);
j7eval[2]=((IKabs(cj9))+(IKabs(sj9)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=0;
cj8=1.0;
j8=0;
new_r01=0;
new_r10=0;
j7eval[0]=new_r00;
j7eval[1]=IKsign(new_r00);
j7eval[2]=((IKabs(cj9))+(IKabs(sj9)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj8=0;
cj8=1.0;
j8=0;
new_r01=0;
new_r10=0;
j7eval[0]=new_r00;
j7eval[1]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x728=IKPowWithIntegerCheck(new_r00,-1);
if(!x728.valid){
continue;
}
CheckValue<IkReal> x729=IKPowWithIntegerCheck(new_r11,-1);
if(!x729.valid){
continue;
}
if( IKabs(((-1.0)*sj9*(x728.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj9*(x729.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj9*(x728.value)))+IKsqr((cj9*(x729.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*sj9*(x728.value)), (cj9*(x729.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x730=IKsin(j7);
IkReal x731=IKcos(j7);
IkReal x732=(sj9*x730);
IkReal x733=((1.0)*x731);
IkReal x734=(cj9*x733);
evalcond[0]=(sj9+((new_r00*x730)));
evalcond[1]=(sj9+((new_r11*x730)));
evalcond[2]=(cj9+(((-1.0)*new_r11*x733)));
evalcond[3]=(((new_r00*x731))+(((-1.0)*cj9)));
evalcond[4]=(((cj9*x730))+((sj9*x731)));
evalcond[5]=((((-1.0)*x734))+x732+new_r00);
evalcond[6]=((((-1.0)*x734))+x732+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x735=IKPowWithIntegerCheck(IKsign(new_r00),-1);
if(!x735.valid){
continue;
}
CheckValue<IkReal> x736 = IKatan2WithCheck(IkReal(((-1.0)*sj9)),IkReal(cj9),IKFAST_ATAN2_MAGTHRESH);
if(!x736.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x735.value)))+(x736.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x737=IKsin(j7);
IkReal x738=IKcos(j7);
IkReal x739=(sj9*x737);
IkReal x740=((1.0)*x738);
IkReal x741=(cj9*x740);
evalcond[0]=(sj9+((new_r00*x737)));
evalcond[1]=(sj9+((new_r11*x737)));
evalcond[2]=(cj9+(((-1.0)*new_r11*x740)));
evalcond[3]=(((new_r00*x738))+(((-1.0)*cj9)));
evalcond[4]=(((cj9*x737))+((sj9*x738)));
evalcond[5]=(x739+new_r00+(((-1.0)*x741)));
evalcond[6]=(x739+new_r11+(((-1.0)*x741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x742=IKPowWithIntegerCheck(IKsign(new_r11),-1);
if(!x742.valid){
continue;
}
CheckValue<IkReal> x743 = IKatan2WithCheck(IkReal(((-1.0)*sj9)),IkReal(cj9),IKFAST_ATAN2_MAGTHRESH);
if(!x743.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x742.value)))+(x743.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x744=IKsin(j7);
IkReal x745=IKcos(j7);
IkReal x746=(sj9*x744);
IkReal x747=((1.0)*x745);
IkReal x748=(cj9*x747);
evalcond[0]=(sj9+((new_r00*x744)));
evalcond[1]=(sj9+((new_r11*x744)));
evalcond[2]=(cj9+(((-1.0)*new_r11*x747)));
evalcond[3]=(((new_r00*x745))+(((-1.0)*cj9)));
evalcond[4]=(((sj9*x745))+((cj9*x744)));
evalcond[5]=(x746+new_r00+(((-1.0)*x748)));
evalcond[6]=(x746+new_r11+(((-1.0)*x748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x749=((1.0)*new_r11);
CheckValue<IkReal> x750=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r01*sj9))+(((-1.0)*cj9*x749)))),-1);
if(!x750.valid){
continue;
}
CheckValue<IkReal> x751 = IKatan2WithCheck(IkReal((((cj9*sj9))+((new_r00*new_r01)))),IkReal(((1.0)+(((-1.0)*(cj9*cj9)))+(((-1.0)*new_r00*x749)))),IKFAST_ATAN2_MAGTHRESH);
if(!x751.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x750.value)))+(x751.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x752=IKcos(j7);
IkReal x753=IKsin(j7);
IkReal x754=((1.0)*cj9);
IkReal x755=(sj9*x753);
IkReal x756=((1.0)*x752);
IkReal x757=(x752*x754);
evalcond[0]=(sj9+((new_r11*x753))+((new_r01*x752)));
evalcond[1]=(((cj9*x753))+new_r01+((sj9*x752)));
evalcond[2]=(sj9+((new_r00*x753))+(((-1.0)*new_r10*x756)));
evalcond[3]=(cj9+(((-1.0)*new_r11*x756))+((new_r01*x753)));
evalcond[4]=(x755+new_r00+(((-1.0)*x757)));
evalcond[5]=(x755+new_r11+(((-1.0)*x757)));
evalcond[6]=(((new_r00*x752))+((new_r10*x753))+(((-1.0)*x754)));
evalcond[7]=((((-1.0)*x753*x754))+new_r10+(((-1.0)*sj9*x756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x758 = IKatan2WithCheck(IkReal((((new_r11*sj9))+((cj9*new_r01)))),IkReal((((new_r01*sj9))+(((-1.0)*cj9*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x758.valid){
continue;
}
CheckValue<IkReal> x759=IKPowWithIntegerCheck(IKsign(((((-1.0)*(new_r01*new_r01)))+(((-1.0)*(new_r11*new_r11))))),-1);
if(!x759.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x758.value)+(((1.5707963267949)*(x759.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x760=IKcos(j7);
IkReal x761=IKsin(j7);
IkReal x762=((1.0)*cj9);
IkReal x763=(sj9*x761);
IkReal x764=((1.0)*x760);
IkReal x765=(x760*x762);
evalcond[0]=(sj9+((new_r11*x761))+((new_r01*x760)));
evalcond[1]=(((cj9*x761))+new_r01+((sj9*x760)));
evalcond[2]=(sj9+(((-1.0)*new_r10*x764))+((new_r00*x761)));
evalcond[3]=(cj9+(((-1.0)*new_r11*x764))+((new_r01*x761)));
evalcond[4]=((((-1.0)*x765))+x763+new_r00);
evalcond[5]=((((-1.0)*x765))+x763+new_r11);
evalcond[6]=(((new_r10*x761))+(((-1.0)*x762))+((new_r00*x760)));
evalcond[7]=((((-1.0)*sj9*x764))+new_r10+(((-1.0)*x761*x762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x766=((1.0)*new_r11);
CheckValue<IkReal> x767=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x766))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x767.valid){
continue;
}
CheckValue<IkReal> x768 = IKatan2WithCheck(IkReal((((new_r10*sj9))+((new_r01*sj9)))),IkReal(((((-1.0)*sj9*x766))+((new_r00*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x768.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x767.value)))+(x768.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x769=IKcos(j7);
IkReal x770=IKsin(j7);
IkReal x771=((1.0)*cj9);
IkReal x772=(sj9*x770);
IkReal x773=((1.0)*x769);
IkReal x774=(x769*x771);
evalcond[0]=(sj9+((new_r01*x769))+((new_r11*x770)));
evalcond[1]=(((cj9*x770))+new_r01+((sj9*x769)));
evalcond[2]=(sj9+((new_r00*x770))+(((-1.0)*new_r10*x773)));
evalcond[3]=(cj9+(((-1.0)*new_r11*x773))+((new_r01*x770)));
evalcond[4]=(x772+(((-1.0)*x774))+new_r00);
evalcond[5]=(x772+(((-1.0)*x774))+new_r11);
evalcond[6]=(((new_r00*x769))+((new_r10*x770))+(((-1.0)*x771)));
evalcond[7]=(new_r10+(((-1.0)*x770*x771))+(((-1.0)*sj9*x773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x775=((1.0)*new_r10);
IkReal x776=((((-1.0)*new_r11*x775))+(((-1.0)*new_r00*new_r01)));
j7eval[0]=x776;
j7eval[1]=((IKabs((((cj9*new_r01))+(((-1.0)*cj9*x775)))))+(IKabs((((cj9*new_r00))+((cj9*new_r11))))));
j7eval[2]=IKsign(x776);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x777=((1.0)*new_r10);
IkReal x778=((((-1.0)*cj9*new_r00))+(((-1.0)*sj9*x777)));
j7eval[0]=x778;
j7eval[1]=((IKabs(((((-1.0)*new_r01*x777))+(cj9*cj9))))+(IKabs((((cj9*sj9))+((new_r00*new_r01))))));
j7eval[2]=IKsign(x778);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x779=((1.0)*new_r00);
IkReal x780=(((cj9*new_r10))+(((-1.0)*sj9*x779)));
j7eval[0]=x780;
j7eval[1]=IKsign(x780);
j7eval[2]=((IKabs((((cj9*sj9))+(((-1.0)*new_r10*x779)))))+(IKabs(((((-1.0)*(cj9*cj9)))+(new_r00*new_r00)))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x781=((-1.0)*new_r00);
IkReal x783 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x783)==0){
continue;
}
IkReal x782=pow(x783,-0.5);
CheckValue<IkReal> x784 = IKatan2WithCheck(IkReal(new_r10),IkReal(x781),IKFAST_ATAN2_MAGTHRESH);
if(!x784.valid){
continue;
}
IkReal gconst12=((-1.0)*(x784.value));
IkReal gconst13=((-1.0)*new_r10*x782);
IkReal gconst14=(x781*x782);
CheckValue<IkReal> x785 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x785.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j9+(x785.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x786=((-1.0)*new_r00);
CheckValue<IkReal> x789 = IKatan2WithCheck(IkReal(new_r10),IkReal(x786),IKFAST_ATAN2_MAGTHRESH);
if(!x789.valid){
continue;
}
IkReal x787=((-1.0)*(x789.value));
IkReal x788=x782;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst13;
cj9=gconst14;
j9=x787;
IkReal gconst12=x787;
IkReal gconst13=((-1.0)*new_r10*x788);
IkReal gconst14=(x786*x788);
IkReal x790=new_r00*new_r00;
IkReal x791=((1.0)*new_r11);
IkReal x792=((1.0)*new_r00*new_r01);
IkReal x793=((((-1.0)*x792))+(((-1.0)*new_r10*x791)));
IkReal x794=x782;
IkReal x795=(new_r00*x794);
j7eval[0]=x793;
j7eval[1]=((IKabs(((((-1.0)*x792*x794))+((new_r10*x795)))))+(IKabs(((((-1.0)*x791*x795))+(((-1.0)*x790*x794))))));
j7eval[2]=IKsign(x793);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x796=((-1.0)*new_r00);
CheckValue<IkReal> x799 = IKatan2WithCheck(IkReal(new_r10),IkReal(x796),IKFAST_ATAN2_MAGTHRESH);
if(!x799.valid){
continue;
}
IkReal x797=((-1.0)*(x799.value));
IkReal x798=x782;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst13;
cj9=gconst14;
j9=x797;
IkReal gconst12=x797;
IkReal gconst13=((-1.0)*new_r10*x798);
IkReal gconst14=(x796*x798);
IkReal x800=new_r10*new_r10;
IkReal x801=new_r00*new_r00;
CheckValue<IkReal> x804=IKPowWithIntegerCheck((x801+x800),-1);
if(!x804.valid){
continue;
}
IkReal x802=x804.value;
IkReal x803=(new_r00*x802);
j7eval[0]=((IKabs((((new_r01*x803*(new_r00*new_r00)))+((new_r01*x800*x803))+((new_r10*x803)))))+(IKabs((((x801*x802))+(((-1.0)*new_r01*new_r10))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x805=((-1.0)*new_r00);
CheckValue<IkReal> x808 = IKatan2WithCheck(IkReal(new_r10),IkReal(x805),IKFAST_ATAN2_MAGTHRESH);
if(!x808.valid){
continue;
}
IkReal x806=((-1.0)*(x808.value));
IkReal x807=x782;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst13;
cj9=gconst14;
j9=x806;
IkReal gconst12=x806;
IkReal gconst13=((-1.0)*new_r10*x807);
IkReal gconst14=(x805*x807);
IkReal x809=new_r00*new_r00;
IkReal x810=new_r10*new_r10;
CheckValue<IkReal> x814=IKPowWithIntegerCheck((x810+x809),-1);
if(!x814.valid){
continue;
}
IkReal x811=x814.value;
IkReal x812=(new_r10*x811);
IkReal x813=((1.0)*x811);
j7eval[0]=((IKabs((((new_r00*x812))+((new_r00*x812*(new_r10*new_r10)))+((x812*(new_r00*new_r00*new_r00))))))+(IKabs((((x809*x811))+(((-1.0)*x813*(x810*x810)))+(((-1.0)*x809*x810*x813))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x816 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x816.valid){
continue;
}
IkReal x815=((-1.0)*(x816.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst13;
cj9=gconst14;
j9=x815;
new_r11=0;
new_r00=0;
IkReal gconst12=x815;
IkReal x817 = new_r10*new_r10;
if(IKabs(x817)==0){
continue;
}
IkReal gconst13=((-1.0)*new_r10*(pow(x817,-0.5)));
IkReal gconst14=0;
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x818=IKPowWithIntegerCheck(gconst13,-1);
if(!x818.valid){
continue;
}
cj7array[0]=(new_r01*(x818.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x819=IKsin(j7);
IkReal x820=IKcos(j7);
IkReal x821=((1.0)*x820);
evalcond[0]=(new_r01*x819);
evalcond[1]=(new_r10*x819);
evalcond[2]=(gconst13*x819);
evalcond[3]=(gconst13+(((-1.0)*new_r10*x821)));
evalcond[4]=((((-1.0)*gconst13*x821))+new_r10);
evalcond[5]=(((new_r01*x820))+(((-1.0)*gconst13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x822=IKPowWithIntegerCheck(new_r10,-1);
if(!x822.valid){
continue;
}
cj7array[0]=(gconst13*(x822.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x823=IKsin(j7);
IkReal x824=IKcos(j7);
IkReal x825=((1.0)*gconst13);
IkReal x826=(x824*x825);
evalcond[0]=(new_r01*x823);
evalcond[1]=(new_r10*x823);
evalcond[2]=(gconst13*x823);
evalcond[3]=((((-1.0)*x826))+new_r01);
evalcond[4]=((((-1.0)*x826))+new_r10);
evalcond[5]=(((new_r01*x824))+(((-1.0)*x825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst14;
evalcond[2]=gconst13;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x827=((-1.0)*new_r00);
CheckValue<IkReal> x829 = IKatan2WithCheck(IkReal(new_r10),IkReal(x827),IKFAST_ATAN2_MAGTHRESH);
if(!x829.valid){
continue;
}
IkReal x828=((-1.0)*(x829.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst13;
cj9=gconst14;
j9=x828;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst12=x828;
IkReal gconst13=((-1.0)*new_r10);
IkReal gconst14=x827;
j7eval[0]=1.0;
j7eval[1]=1.0;
j7eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs((new_r00*new_r10))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x830=((-1.0)*new_r00);
CheckValue<IkReal> x832 = IKatan2WithCheck(IkReal(new_r10),IkReal(x830),IKFAST_ATAN2_MAGTHRESH);
if(!x832.valid){
continue;
}
IkReal x831=((-1.0)*(x832.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst13;
cj9=gconst14;
j9=x831;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst12=x831;
IkReal gconst13=((-1.0)*new_r10);
IkReal gconst14=x830;
j7eval[0]=-1.0;
j7eval[1]=-1.0;
j7eval[2]=((IKabs(((-1.0)+(new_r10*new_r10))))+(IKabs((new_r00*new_r10))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x833=((-1.0)*new_r00);
CheckValue<IkReal> x835 = IKatan2WithCheck(IkReal(new_r10),IkReal(x833),IKFAST_ATAN2_MAGTHRESH);
if(!x835.valid){
continue;
}
IkReal x834=((-1.0)*(x835.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst13;
cj9=gconst14;
j9=x834;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst12=x834;
IkReal gconst13=((-1.0)*new_r10);
IkReal gconst14=x833;
j7eval[0]=1.0;
j7eval[1]=((((0.5)*(IKabs(((1.0)+(((-2.0)*(new_r10*new_r10))))))))+(IKabs((new_r00*new_r10))));
j7eval[2]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x836 = IKatan2WithCheck(IkReal((((gconst13*gconst14))+((new_r00*new_r10)))),IkReal(((gconst14*gconst14)+(((-1.0)*(new_r10*new_r10))))),IKFAST_ATAN2_MAGTHRESH);
if(!x836.valid){
continue;
}
CheckValue<IkReal> x837=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*new_r10))+(((-1.0)*gconst14*new_r00)))),-1);
if(!x837.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x836.value)+(((1.5707963267949)*(x837.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x838=IKcos(j7);
IkReal x839=IKsin(j7);
IkReal x840=(gconst14*x839);
IkReal x841=(gconst13*x839);
IkReal x842=((1.0)*x838);
IkReal x843=(gconst13*x842);
evalcond[0]=((((-1.0)*x843))+x840);
evalcond[1]=(gconst14+((new_r00*x838))+((new_r10*x839)));
evalcond[2]=(((gconst14*x838))+new_r00+x841);
evalcond[3]=((((-1.0)*new_r10*x842))+gconst13+((new_r00*x839)));
evalcond[4]=((((-1.0)*gconst14*x842))+(((-1.0)*x841)));
evalcond[5]=((((-1.0)*x843))+new_r10+x840);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x844=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst14*gconst14)))+(((-1.0)*(gconst13*gconst13))))),-1);
if(!x844.valid){
continue;
}
CheckValue<IkReal> x845 = IKatan2WithCheck(IkReal((gconst13*new_r00)),IkReal((gconst14*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x845.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x844.value)))+(x845.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x846=IKcos(j7);
IkReal x847=IKsin(j7);
IkReal x848=(gconst14*x847);
IkReal x849=(gconst13*x847);
IkReal x850=((1.0)*x846);
IkReal x851=(gconst13*x850);
evalcond[0]=((((-1.0)*x851))+x848);
evalcond[1]=(((new_r10*x847))+((new_r00*x846))+gconst14);
evalcond[2]=(((gconst14*x846))+new_r00+x849);
evalcond[3]=(((new_r00*x847))+gconst13+(((-1.0)*new_r10*x850)));
evalcond[4]=((((-1.0)*gconst14*x850))+(((-1.0)*x849)));
evalcond[5]=((((-1.0)*x851))+new_r10+x848);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x852=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*new_r10))+(((-1.0)*gconst14*new_r00)))),-1);
if(!x852.valid){
continue;
}
CheckValue<IkReal> x853 = IKatan2WithCheck(IkReal((gconst13*gconst14)),IkReal(gconst14*gconst14),IKFAST_ATAN2_MAGTHRESH);
if(!x853.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x852.value)))+(x853.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x854=IKcos(j7);
IkReal x855=IKsin(j7);
IkReal x856=(gconst14*x855);
IkReal x857=(gconst13*x855);
IkReal x858=((1.0)*x854);
IkReal x859=(gconst13*x858);
evalcond[0]=((((-1.0)*x859))+x856);
evalcond[1]=(gconst14+((new_r10*x855))+((new_r00*x854)));
evalcond[2]=(new_r00+x857+((gconst14*x854)));
evalcond[3]=(gconst13+(((-1.0)*new_r10*x858))+((new_r00*x855)));
evalcond[4]=((((-1.0)*x857))+(((-1.0)*gconst14*x858)));
evalcond[5]=((((-1.0)*x859))+new_r10+x856);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
IkReal x860=((-1.0)*new_r00);
CheckValue<IkReal> x862 = IKatan2WithCheck(IkReal(0),IkReal(x860),IKFAST_ATAN2_MAGTHRESH);
if(!x862.valid){
continue;
}
IkReal x861=((-1.0)*(x862.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst13;
cj9=gconst14;
j9=x861;
new_r01=0;
new_r10=0;
IkReal gconst12=x861;
IkReal gconst13=0;
IkReal x863 = new_r00*new_r00;
if(IKabs(x863)==0){
continue;
}
IkReal gconst14=(x860*(pow(x863,-0.5)));
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x864=IKPowWithIntegerCheck(gconst14,-1);
if(!x864.valid){
continue;
}
cj7array[0]=(new_r11*(x864.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x865=IKsin(j7);
IkReal x866=IKcos(j7);
evalcond[0]=(new_r00*x865);
evalcond[1]=(new_r11*x865);
evalcond[2]=(gconst14*x865);
evalcond[3]=(((new_r00*x866))+gconst14);
evalcond[4]=(((gconst14*x866))+new_r00);
evalcond[5]=(gconst14+(((-1.0)*new_r11*x866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x867=IKPowWithIntegerCheck(new_r11,-1);
if(!x867.valid){
continue;
}
cj7array[0]=(gconst14*(x867.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x868=IKsin(j7);
IkReal x869=IKcos(j7);
IkReal x870=(gconst14*x869);
evalcond[0]=(new_r00*x868);
evalcond[1]=(new_r11*x868);
evalcond[2]=(gconst14*x868);
evalcond[3]=(((new_r00*x869))+gconst14);
evalcond[4]=(new_r00+x870);
evalcond[5]=((((-1.0)*x870))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r00);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x872 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x872.valid){
continue;
}
IkReal x871=((-1.0)*(x872.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst13;
cj9=gconst14;
j9=x871;
new_r00=0;
IkReal gconst12=x871;
IkReal x873 = new_r10*new_r10;
if(IKabs(x873)==0){
continue;
}
IkReal gconst13=((-1.0)*new_r10*(pow(x873,-0.5)));
IkReal gconst14=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x875 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x875.valid){
continue;
}
IkReal x874=((-1.0)*(x875.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst13;
cj9=gconst14;
j9=x874;
new_r00=0;
IkReal gconst12=x874;
IkReal x876 = new_r10*new_r10;
if(IKabs(x876)==0){
continue;
}
IkReal gconst13=((-1.0)*new_r10*(pow(x876,-0.5)));
IkReal gconst14=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x878 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x878.valid){
continue;
}
IkReal x877=((-1.0)*(x878.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst13;
cj9=gconst14;
j9=x877;
new_r00=0;
IkReal gconst12=x877;
IkReal x879 = new_r10*new_r10;
if(IKabs(x879)==0){
continue;
}
IkReal gconst13=((-1.0)*new_r10*(pow(x879,-0.5)));
IkReal gconst14=0;
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x880=IKPowWithIntegerCheck(gconst13,-1);
if(!x880.valid){
continue;
}
CheckValue<IkReal> x881=IKPowWithIntegerCheck(new_r10,-1);
if(!x881.valid){
continue;
}
if( IKabs((new_r11*(x880.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst13*(x881.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r11*(x880.value)))+IKsqr((gconst13*(x881.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r11*(x880.value)), (gconst13*(x881.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x882=IKsin(j7);
IkReal x883=IKcos(j7);
IkReal x884=((1.0)*gconst13);
IkReal x885=((1.0)*x883);
IkReal x886=(x883*x884);
evalcond[0]=(new_r10*x882);
evalcond[1]=(gconst13*x882);
evalcond[2]=((((-1.0)*new_r10*x885))+gconst13);
evalcond[3]=((((-1.0)*x886))+new_r01);
evalcond[4]=((((-1.0)*x882*x884))+new_r11);
evalcond[5]=((((-1.0)*x886))+new_r10);
evalcond[6]=(((new_r01*x882))+(((-1.0)*new_r11*x885)));
evalcond[7]=(((new_r01*x883))+((new_r11*x882))+(((-1.0)*x884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x887 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x887.valid){
continue;
}
CheckValue<IkReal> x888=IKPowWithIntegerCheck(IKsign(gconst13),-1);
if(!x888.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x887.value)+(((1.5707963267949)*(x888.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x889=IKsin(j7);
IkReal x890=IKcos(j7);
IkReal x891=((1.0)*gconst13);
IkReal x892=((1.0)*x890);
IkReal x893=(x890*x891);
evalcond[0]=(new_r10*x889);
evalcond[1]=(gconst13*x889);
evalcond[2]=((((-1.0)*new_r10*x892))+gconst13);
evalcond[3]=((((-1.0)*x893))+new_r01);
evalcond[4]=((((-1.0)*x889*x891))+new_r11);
evalcond[5]=((((-1.0)*x893))+new_r10);
evalcond[6]=(((new_r01*x889))+(((-1.0)*new_r11*x892)));
evalcond[7]=(((new_r11*x889))+((new_r01*x890))+(((-1.0)*x891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x894 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x894.valid){
continue;
}
CheckValue<IkReal> x895=IKPowWithIntegerCheck(IKsign(gconst13),-1);
if(!x895.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x894.value)+(((1.5707963267949)*(x895.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x896=IKsin(j7);
IkReal x897=IKcos(j7);
IkReal x898=((1.0)*gconst13);
IkReal x899=((1.0)*x897);
IkReal x900=(x897*x898);
evalcond[0]=(new_r10*x896);
evalcond[1]=(gconst13*x896);
evalcond[2]=((((-1.0)*new_r10*x899))+gconst13);
evalcond[3]=((((-1.0)*x900))+new_r01);
evalcond[4]=((((-1.0)*x896*x898))+new_r11);
evalcond[5]=((((-1.0)*x900))+new_r10);
evalcond[6]=(((new_r01*x896))+(((-1.0)*new_r11*x899)));
evalcond[7]=(((new_r11*x896))+((new_r01*x897))+(((-1.0)*x898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x901 = IKatan2WithCheck(IkReal((((gconst13*gconst14))+((new_r00*new_r10)))),IkReal(((gconst14*gconst14)+(((-1.0)*(new_r10*new_r10))))),IKFAST_ATAN2_MAGTHRESH);
if(!x901.valid){
continue;
}
CheckValue<IkReal> x902=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*new_r10))+(((-1.0)*gconst14*new_r00)))),-1);
if(!x902.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x901.value)+(((1.5707963267949)*(x902.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x903=IKcos(j7);
IkReal x904=IKsin(j7);
IkReal x905=(gconst14*x904);
IkReal x906=(gconst13*x904);
IkReal x907=((1.0)*x903);
IkReal x908=(gconst13*x907);
evalcond[0]=(gconst14+((new_r10*x904))+((new_r00*x903)));
evalcond[1]=(new_r00+x906+((gconst14*x903)));
evalcond[2]=(gconst13+((new_r00*x904))+(((-1.0)*new_r10*x907)));
evalcond[3]=((((-1.0)*new_r11*x907))+gconst14+((new_r01*x904)));
evalcond[4]=((((-1.0)*x908))+new_r01+x905);
evalcond[5]=((((-1.0)*x908))+new_r10+x905);
evalcond[6]=(((new_r11*x904))+((new_r01*x903))+(((-1.0)*gconst13)));
evalcond[7]=((((-1.0)*gconst14*x907))+(((-1.0)*x906))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x909=((1.0)*new_r10);
CheckValue<IkReal> x910=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*x909))+(((-1.0)*gconst14*new_r00)))),-1);
if(!x910.valid){
continue;
}
CheckValue<IkReal> x911 = IKatan2WithCheck(IkReal((((gconst13*gconst14))+((new_r00*new_r01)))),IkReal(((gconst14*gconst14)+(((-1.0)*new_r01*x909)))),IKFAST_ATAN2_MAGTHRESH);
if(!x911.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x910.value)))+(x911.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x912=IKcos(j7);
IkReal x913=IKsin(j7);
IkReal x914=(gconst14*x913);
IkReal x915=(gconst13*x913);
IkReal x916=((1.0)*x912);
IkReal x917=(gconst13*x916);
evalcond[0]=(gconst14+((new_r10*x913))+((new_r00*x912)));
evalcond[1]=(((gconst14*x912))+new_r00+x915);
evalcond[2]=(gconst13+((new_r00*x913))+(((-1.0)*new_r10*x916)));
evalcond[3]=(gconst14+((new_r01*x913))+(((-1.0)*new_r11*x916)));
evalcond[4]=((((-1.0)*x917))+new_r01+x914);
evalcond[5]=((((-1.0)*x917))+new_r10+x914);
evalcond[6]=(((new_r11*x913))+((new_r01*x912))+(((-1.0)*gconst13)));
evalcond[7]=((((-1.0)*gconst14*x916))+(((-1.0)*x915))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x918=((1.0)*new_r10);
CheckValue<IkReal> x919 = IKatan2WithCheck(IkReal((((gconst14*new_r00))+((gconst14*new_r11)))),IkReal(((((-1.0)*gconst14*x918))+((gconst14*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x919.valid){
continue;
}
CheckValue<IkReal> x920=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r00*new_r01))+(((-1.0)*new_r11*x918)))),-1);
if(!x920.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x919.value)+(((1.5707963267949)*(x920.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x921=IKcos(j7);
IkReal x922=IKsin(j7);
IkReal x923=(gconst14*x922);
IkReal x924=(gconst13*x922);
IkReal x925=((1.0)*x921);
IkReal x926=(gconst13*x925);
evalcond[0]=(gconst14+((new_r00*x921))+((new_r10*x922)));
evalcond[1]=(((gconst14*x921))+new_r00+x924);
evalcond[2]=(gconst13+(((-1.0)*new_r10*x925))+((new_r00*x922)));
evalcond[3]=((((-1.0)*new_r11*x925))+gconst14+((new_r01*x922)));
evalcond[4]=((((-1.0)*x926))+new_r01+x923);
evalcond[5]=((((-1.0)*x926))+new_r10+x923);
evalcond[6]=(((new_r01*x921))+((new_r11*x922))+(((-1.0)*gconst13)));
evalcond[7]=((((-1.0)*gconst14*x925))+(((-1.0)*x924))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x929 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x929)==0){
continue;
}
IkReal x927=pow(x929,-0.5);
IkReal x928=((1.0)*x927);
CheckValue<IkReal> x930 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x930.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x930.value))));
IkReal gconst16=(new_r10*x928);
IkReal gconst17=(new_r00*x928);
CheckValue<IkReal> x931 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x931.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9+(x931.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x935 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x935.valid){
continue;
}
IkReal x932=((1.0)*(x935.value));
IkReal x933=x927;
IkReal x934=((1.0)*x933);
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x932)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x932)));
IkReal gconst16=(new_r10*x934);
IkReal gconst17=(new_r00*x934);
IkReal x936=new_r00*new_r00;
IkReal x937=((1.0)*new_r00);
IkReal x938=((((-1.0)*new_r01*x937))+(((-1.0)*new_r10*new_r11)));
IkReal x939=x927;
IkReal x940=(new_r00*x939);
j7eval[0]=x938;
j7eval[1]=((IKabs((((new_r01*x940))+(((-1.0)*new_r10*x937*x939)))))+(IKabs((((x936*x939))+((new_r11*x940))))));
j7eval[2]=IKsign(x938);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x944 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x944.valid){
continue;
}
IkReal x941=((1.0)*(x944.value));
IkReal x942=x927;
IkReal x943=((1.0)*x942);
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x941)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x941)));
IkReal gconst16=(new_r10*x943);
IkReal gconst17=(new_r00*x943);
IkReal x945=new_r10*new_r10;
IkReal x946=new_r00*new_r00;
IkReal x947=((1.0)*new_r01);
CheckValue<IkReal> x951=IKPowWithIntegerCheck((x945+x946),-1);
if(!x951.valid){
continue;
}
IkReal x948=x951.value;
IkReal x949=(new_r10*x948);
IkReal x950=(new_r01*x948);
j7eval[0]=((IKabs((((new_r00*x949))+((new_r00*x945*x950))+((x950*(new_r00*new_r00*new_r00))))))+(IKabs((((x946*x948))+(((-1.0)*x947*x949*(new_r10*new_r10)))+(((-1.0)*x946*x947*x949))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x955 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x955.valid){
continue;
}
IkReal x952=((1.0)*(x955.value));
IkReal x953=x927;
IkReal x954=((1.0)*x953);
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x952)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x952)));
IkReal gconst16=(new_r10*x954);
IkReal gconst17=(new_r00*x954);
IkReal x956=new_r00*new_r00;
IkReal x957=new_r10*new_r10;
CheckValue<IkReal> x961=IKPowWithIntegerCheck((x957+x956),-1);
if(!x961.valid){
continue;
}
IkReal x958=x961.value;
IkReal x959=(new_r10*x958);
IkReal x960=((1.0)*x958);
j7eval[0]=((IKabs(((((-1.0)*x956*x957*x960))+((x956*x958))+(((-1.0)*x960*(x957*x957))))))+(IKabs((((new_r00*x959))+((x959*(new_r00*new_r00*new_r00)))+((new_r00*x959*(new_r10*new_r10)))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x963 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x963.valid){
continue;
}
IkReal x962=((1.0)*(x963.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x962)));
new_r11=0;
new_r00=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x962)));
IkReal x964 = new_r10*new_r10;
if(IKabs(x964)==0){
continue;
}
IkReal gconst16=((1.0)*new_r10*(pow(x964,-0.5)));
IkReal gconst17=0;
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x965=IKPowWithIntegerCheck(gconst16,-1);
if(!x965.valid){
continue;
}
cj7array[0]=(new_r01*(x965.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x966=IKsin(j7);
IkReal x967=IKcos(j7);
IkReal x968=((1.0)*x967);
evalcond[0]=(new_r01*x966);
evalcond[1]=(new_r10*x966);
evalcond[2]=(gconst16*x966);
evalcond[3]=(gconst16+(((-1.0)*new_r10*x968)));
evalcond[4]=((((-1.0)*gconst16*x968))+new_r10);
evalcond[5]=(((new_r01*x967))+(((-1.0)*gconst16)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x969=IKPowWithIntegerCheck(new_r10,-1);
if(!x969.valid){
continue;
}
cj7array[0]=(gconst16*(x969.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x970=IKsin(j7);
IkReal x971=IKcos(j7);
IkReal x972=((1.0)*gconst16);
IkReal x973=(x971*x972);
evalcond[0]=(new_r01*x970);
evalcond[1]=(new_r10*x970);
evalcond[2]=(gconst16*x970);
evalcond[3]=(new_r01+(((-1.0)*x973)));
evalcond[4]=(new_r10+(((-1.0)*x973)));
evalcond[5]=(((new_r01*x971))+(((-1.0)*x972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst17;
evalcond[2]=gconst16;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x975 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x975.valid){
continue;
}
IkReal x974=((1.0)*(x975.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x974)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x974)));
IkReal gconst16=((1.0)*new_r10);
IkReal gconst17=((1.0)*new_r00);
j7eval[0]=-1.0;
j7eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs(((1.0)*new_r00*new_r10))));
j7eval[2]=-1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x977 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x977.valid){
continue;
}
IkReal x976=((1.0)*(x977.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x976)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x976)));
IkReal gconst16=((1.0)*new_r10);
IkReal gconst17=((1.0)*new_r00);
j7eval[0]=-1.0;
j7eval[1]=-1.0;
j7eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs(((1.0)*new_r00*new_r10))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x979 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x979.valid){
continue;
}
IkReal x978=((1.0)*(x979.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x978)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x978)));
IkReal gconst16=((1.0)*new_r10);
IkReal gconst17=((1.0)*new_r00);
j7eval[0]=-1.0;
j7eval[1]=((IKabs(((1.0)+(((-2.0)*(new_r10*new_r10))))))+(IKabs(((2.0)*new_r00*new_r10))));
j7eval[2]=-1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x980 = IKatan2WithCheck(IkReal((((new_r00*new_r10))+((gconst16*gconst17)))),IkReal(((gconst17*gconst17)+(((-1.0)*(new_r10*new_r10))))),IKFAST_ATAN2_MAGTHRESH);
if(!x980.valid){
continue;
}
CheckValue<IkReal> x981=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*new_r10))+(((-1.0)*gconst17*new_r00)))),-1);
if(!x981.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x980.value)+(((1.5707963267949)*(x981.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x982=IKcos(j7);
IkReal x983=IKsin(j7);
IkReal x984=(gconst17*x983);
IkReal x985=((1.0)*x982);
IkReal x986=(gconst16*x983);
IkReal x987=(gconst16*x985);
evalcond[0]=((((-1.0)*x987))+x984);
evalcond[1]=(((new_r00*x982))+gconst17+((new_r10*x983)));
evalcond[2]=(((gconst17*x982))+new_r00+x986);
evalcond[3]=(((new_r00*x983))+gconst16+(((-1.0)*new_r10*x985)));
evalcond[4]=((((-1.0)*gconst17*x985))+(((-1.0)*x986)));
evalcond[5]=((((-1.0)*x987))+new_r10+x984);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x988=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst17*gconst17)))+(((-1.0)*(gconst16*gconst16))))),-1);
if(!x988.valid){
continue;
}
CheckValue<IkReal> x989 = IKatan2WithCheck(IkReal((gconst16*new_r00)),IkReal((gconst17*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x989.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x988.value)))+(x989.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x990=IKcos(j7);
IkReal x991=IKsin(j7);
IkReal x992=(gconst17*x991);
IkReal x993=((1.0)*x990);
IkReal x994=(gconst16*x991);
IkReal x995=(gconst16*x993);
evalcond[0]=((((-1.0)*x995))+x992);
evalcond[1]=(((new_r10*x991))+gconst17+((new_r00*x990)));
evalcond[2]=(new_r00+x994+((gconst17*x990)));
evalcond[3]=((((-1.0)*new_r10*x993))+gconst16+((new_r00*x991)));
evalcond[4]=((((-1.0)*x994))+(((-1.0)*gconst17*x993)));
evalcond[5]=((((-1.0)*x995))+new_r10+x992);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x996 = IKatan2WithCheck(IkReal((gconst16*gconst17)),IkReal(gconst17*gconst17),IKFAST_ATAN2_MAGTHRESH);
if(!x996.valid){
continue;
}
CheckValue<IkReal> x997=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*new_r10))+(((-1.0)*gconst17*new_r00)))),-1);
if(!x997.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x996.value)+(((1.5707963267949)*(x997.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x998=IKcos(j7);
IkReal x999=IKsin(j7);
IkReal x1000=(gconst17*x999);
IkReal x1001=((1.0)*x998);
IkReal x1002=(gconst16*x999);
IkReal x1003=(gconst16*x1001);
evalcond[0]=(x1000+(((-1.0)*x1003)));
evalcond[1]=(((new_r10*x999))+gconst17+((new_r00*x998)));
evalcond[2]=(x1002+new_r00+((gconst17*x998)));
evalcond[3]=(gconst16+(((-1.0)*new_r10*x1001))+((new_r00*x999)));
evalcond[4]=((((-1.0)*x1002))+(((-1.0)*gconst17*x1001)));
evalcond[5]=(x1000+(((-1.0)*x1003))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1005 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1005.valid){
continue;
}
IkReal x1004=((1.0)*(x1005.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x1004)));
new_r01=0;
new_r10=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1004)));
IkReal gconst16=0;
IkReal x1006 = new_r00*new_r00;
if(IKabs(x1006)==0){
continue;
}
IkReal gconst17=((1.0)*new_r00*(pow(x1006,-0.5)));
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1007=IKPowWithIntegerCheck(gconst17,-1);
if(!x1007.valid){
continue;
}
cj7array[0]=(new_r11*(x1007.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1008=IKsin(j7);
IkReal x1009=IKcos(j7);
evalcond[0]=(new_r00*x1008);
evalcond[1]=(new_r11*x1008);
evalcond[2]=(gconst17*x1008);
evalcond[3]=(gconst17+((new_r00*x1009)));
evalcond[4]=(((gconst17*x1009))+new_r00);
evalcond[5]=((((-1.0)*new_r11*x1009))+gconst17);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1010=IKPowWithIntegerCheck(new_r11,-1);
if(!x1010.valid){
continue;
}
cj7array[0]=(gconst17*(x1010.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1011=IKsin(j7);
IkReal x1012=IKcos(j7);
IkReal x1013=(gconst17*x1012);
evalcond[0]=(new_r00*x1011);
evalcond[1]=(new_r11*x1011);
evalcond[2]=(gconst17*x1011);
evalcond[3]=(gconst17+((new_r00*x1012)));
evalcond[4]=(x1013+new_r00);
evalcond[5]=(new_r11+(((-1.0)*x1013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r00);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1015 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1015.valid){
continue;
}
IkReal x1014=((1.0)*(x1015.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x1014)));
new_r00=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1014)));
IkReal x1016 = new_r10*new_r10;
if(IKabs(x1016)==0){
continue;
}
IkReal gconst16=((1.0)*new_r10*(pow(x1016,-0.5)));
IkReal gconst17=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1018 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1018.valid){
continue;
}
IkReal x1017=((1.0)*(x1018.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x1017)));
new_r00=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1017)));
IkReal x1019 = new_r10*new_r10;
if(IKabs(x1019)==0){
continue;
}
IkReal gconst16=((1.0)*new_r10*(pow(x1019,-0.5)));
IkReal gconst17=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1021 = IKatan2WithCheck(IkReal(new_r10),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1021.valid){
continue;
}
IkReal x1020=((1.0)*(x1021.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x1020)));
new_r00=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1020)));
IkReal x1022 = new_r10*new_r10;
if(IKabs(x1022)==0){
continue;
}
IkReal gconst16=((1.0)*new_r10*(pow(x1022,-0.5)));
IkReal gconst17=0;
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1023=IKPowWithIntegerCheck(gconst16,-1);
if(!x1023.valid){
continue;
}
CheckValue<IkReal> x1024=IKPowWithIntegerCheck(new_r10,-1);
if(!x1024.valid){
continue;
}
if( IKabs((new_r11*(x1023.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst16*(x1024.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r11*(x1023.value)))+IKsqr((gconst16*(x1024.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r11*(x1023.value)), (gconst16*(x1024.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1025=IKsin(j7);
IkReal x1026=IKcos(j7);
IkReal x1027=((1.0)*x1026);
IkReal x1028=(gconst16*x1025);
IkReal x1029=(gconst16*x1027);
evalcond[0]=(new_r10*x1025);
evalcond[1]=x1028;
evalcond[2]=(gconst16+(((-1.0)*new_r10*x1027)));
evalcond[3]=((((-1.0)*x1029))+new_r01);
evalcond[4]=((((-1.0)*x1028))+new_r11);
evalcond[5]=((((-1.0)*x1029))+new_r10);
evalcond[6]=((((-1.0)*new_r11*x1027))+((new_r01*x1025)));
evalcond[7]=(((new_r11*x1025))+(((-1.0)*gconst16))+((new_r01*x1026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1030=IKPowWithIntegerCheck(IKsign(gconst16),-1);
if(!x1030.valid){
continue;
}
CheckValue<IkReal> x1031 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1031.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1030.value)))+(x1031.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1032=IKsin(j7);
IkReal x1033=IKcos(j7);
IkReal x1034=((1.0)*x1033);
IkReal x1035=(gconst16*x1032);
IkReal x1036=(gconst16*x1034);
evalcond[0]=(new_r10*x1032);
evalcond[1]=x1035;
evalcond[2]=(gconst16+(((-1.0)*new_r10*x1034)));
evalcond[3]=((((-1.0)*x1036))+new_r01);
evalcond[4]=((((-1.0)*x1035))+new_r11);
evalcond[5]=((((-1.0)*x1036))+new_r10);
evalcond[6]=((((-1.0)*new_r11*x1034))+((new_r01*x1032)));
evalcond[7]=(((new_r11*x1032))+(((-1.0)*gconst16))+((new_r01*x1033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1037=IKPowWithIntegerCheck(IKsign(gconst16),-1);
if(!x1037.valid){
continue;
}
CheckValue<IkReal> x1038 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1038.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1037.value)))+(x1038.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1039=IKsin(j7);
IkReal x1040=IKcos(j7);
IkReal x1041=((1.0)*x1040);
IkReal x1042=(gconst16*x1039);
IkReal x1043=(gconst16*x1041);
evalcond[0]=(new_r10*x1039);
evalcond[1]=x1042;
evalcond[2]=(gconst16+(((-1.0)*new_r10*x1041)));
evalcond[3]=(new_r01+(((-1.0)*x1043)));
evalcond[4]=((((-1.0)*x1042))+new_r11);
evalcond[5]=(new_r10+(((-1.0)*x1043)));
evalcond[6]=(((new_r01*x1039))+(((-1.0)*new_r11*x1041)));
evalcond[7]=(((new_r11*x1039))+((new_r01*x1040))+(((-1.0)*gconst16)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1044 = IKatan2WithCheck(IkReal((((new_r00*new_r10))+((gconst16*gconst17)))),IkReal(((gconst17*gconst17)+(((-1.0)*(new_r10*new_r10))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1044.valid){
continue;
}
CheckValue<IkReal> x1045=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*new_r10))+(((-1.0)*gconst17*new_r00)))),-1);
if(!x1045.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1044.value)+(((1.5707963267949)*(x1045.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1046=IKsin(j7);
IkReal x1047=IKcos(j7);
IkReal x1048=((1.0)*gconst16);
IkReal x1049=(gconst17*x1046);
IkReal x1050=((1.0)*x1047);
IkReal x1051=(x1047*x1048);
evalcond[0]=(gconst17+((new_r00*x1047))+((new_r10*x1046)));
evalcond[1]=(((gconst17*x1047))+new_r00+((gconst16*x1046)));
evalcond[2]=(gconst16+((new_r00*x1046))+(((-1.0)*new_r10*x1050)));
evalcond[3]=(gconst17+((new_r01*x1046))+(((-1.0)*new_r11*x1050)));
evalcond[4]=((((-1.0)*x1051))+x1049+new_r01);
evalcond[5]=((((-1.0)*x1051))+x1049+new_r10);
evalcond[6]=(((new_r11*x1046))+((new_r01*x1047))+(((-1.0)*x1048)));
evalcond[7]=((((-1.0)*x1046*x1048))+new_r11+(((-1.0)*gconst17*x1050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1052=((1.0)*new_r10);
CheckValue<IkReal> x1053 = IKatan2WithCheck(IkReal((((new_r00*new_r01))+((gconst16*gconst17)))),IkReal(((((-1.0)*new_r01*x1052))+(gconst17*gconst17))),IKFAST_ATAN2_MAGTHRESH);
if(!x1053.valid){
continue;
}
CheckValue<IkReal> x1054=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*x1052))+(((-1.0)*gconst17*new_r00)))),-1);
if(!x1054.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1053.value)+(((1.5707963267949)*(x1054.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1055=IKsin(j7);
IkReal x1056=IKcos(j7);
IkReal x1057=((1.0)*gconst16);
IkReal x1058=(gconst17*x1055);
IkReal x1059=((1.0)*x1056);
IkReal x1060=(x1056*x1057);
evalcond[0]=(gconst17+((new_r00*x1056))+((new_r10*x1055)));
evalcond[1]=(new_r00+((gconst16*x1055))+((gconst17*x1056)));
evalcond[2]=(gconst16+((new_r00*x1055))+(((-1.0)*new_r10*x1059)));
evalcond[3]=(gconst17+((new_r01*x1055))+(((-1.0)*new_r11*x1059)));
evalcond[4]=(x1058+new_r01+(((-1.0)*x1060)));
evalcond[5]=(x1058+new_r10+(((-1.0)*x1060)));
evalcond[6]=((((-1.0)*x1057))+((new_r01*x1056))+((new_r11*x1055)));
evalcond[7]=((((-1.0)*x1055*x1057))+new_r11+(((-1.0)*gconst17*x1059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1061=((1.0)*new_r10);
CheckValue<IkReal> x1062=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r00*new_r01))+(((-1.0)*new_r11*x1061)))),-1);
if(!x1062.valid){
continue;
}
CheckValue<IkReal> x1063 = IKatan2WithCheck(IkReal((((gconst17*new_r11))+((gconst17*new_r00)))),IkReal(((((-1.0)*gconst17*x1061))+((gconst17*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1063.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1062.value)))+(x1063.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1064=IKsin(j7);
IkReal x1065=IKcos(j7);
IkReal x1066=((1.0)*gconst16);
IkReal x1067=(gconst17*x1064);
IkReal x1068=((1.0)*x1065);
IkReal x1069=(x1065*x1066);
evalcond[0]=(gconst17+((new_r00*x1065))+((new_r10*x1064)));
evalcond[1]=(((gconst17*x1065))+((gconst16*x1064))+new_r00);
evalcond[2]=((((-1.0)*new_r10*x1068))+gconst16+((new_r00*x1064)));
evalcond[3]=(gconst17+((new_r01*x1064))+(((-1.0)*new_r11*x1068)));
evalcond[4]=(x1067+new_r01+(((-1.0)*x1069)));
evalcond[5]=(x1067+new_r10+(((-1.0)*x1069)));
evalcond[6]=(((new_r01*x1065))+((new_r11*x1064))+(((-1.0)*x1066)));
evalcond[7]=((((-1.0)*gconst17*x1068))+new_r11+(((-1.0)*x1064*x1066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1070=((-1.0)*new_r10);
IkReal x1072 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x1072)==0){
continue;
}
IkReal x1071=pow(x1072,-0.5);
CheckValue<IkReal> x1073 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1070),IKFAST_ATAN2_MAGTHRESH);
if(!x1073.valid){
continue;
}
IkReal gconst18=((-1.0)*(x1073.value));
IkReal gconst19=(new_r00*x1071);
IkReal gconst20=(x1070*x1071);
CheckValue<IkReal> x1074 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1074.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1074.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x1075=((-1.0)*new_r10);
CheckValue<IkReal> x1078 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1075),IKFAST_ATAN2_MAGTHRESH);
if(!x1078.valid){
continue;
}
IkReal x1076=((-1.0)*(x1078.value));
IkReal x1077=x1071;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1076;
IkReal gconst18=x1076;
IkReal gconst19=(new_r00*x1077);
IkReal gconst20=(x1075*x1077);
IkReal x1079=new_r10*new_r10;
IkReal x1080=((1.0)*new_r00);
IkReal x1081=((1.0)*new_r10*new_r11);
IkReal x1082=((((-1.0)*new_r01*x1080))+(((-1.0)*x1081)));
IkReal x1083=x1071;
IkReal x1084=(new_r10*x1083);
j7eval[0]=x1082;
j7eval[1]=((IKabs(((((-1.0)*x1081*x1083))+(((-1.0)*x1080*x1084)))))+(IKabs((((x1079*x1083))+(((-1.0)*new_r01*x1084))))));
j7eval[2]=IKsign(x1082);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1085=((-1.0)*new_r10);
CheckValue<IkReal> x1088 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1085),IKFAST_ATAN2_MAGTHRESH);
if(!x1088.valid){
continue;
}
IkReal x1086=((-1.0)*(x1088.value));
IkReal x1087=x1071;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1086;
IkReal gconst18=x1086;
IkReal gconst19=(new_r00*x1087);
IkReal gconst20=(x1085*x1087);
IkReal x1089=new_r10*new_r10;
CheckValue<IkReal> x1092=IKPowWithIntegerCheck((x1089+(new_r00*new_r00)),-1);
if(!x1092.valid){
continue;
}
IkReal x1090=x1092.value;
IkReal x1091=(new_r00*x1090);
j7eval[0]=((IKabs((((x1089*x1090))+((new_r00*new_r11)))))+(IKabs((((new_r10*x1091))+((new_r01*x1091*(new_r00*new_r00)))+((new_r01*x1089*x1091))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1093=((-1.0)*new_r10);
CheckValue<IkReal> x1096 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1093),IKFAST_ATAN2_MAGTHRESH);
if(!x1096.valid){
continue;
}
IkReal x1094=((-1.0)*(x1096.value));
IkReal x1095=x1071;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1094;
IkReal gconst18=x1094;
IkReal gconst19=(new_r00*x1095);
IkReal gconst20=(x1093*x1095);
IkReal x1097=new_r10*new_r10;
IkReal x1098=new_r00*new_r00;
CheckValue<IkReal> x1102=IKPowWithIntegerCheck((x1097+x1098),-1);
if(!x1102.valid){
continue;
}
IkReal x1099=x1102.value;
IkReal x1100=(new_r10*x1099);
IkReal x1101=(x1097*x1099);
j7eval[0]=((IKabs((x1101+(((-1.0)*x1098*x1101))+(((-1.0)*x1099*(x1098*x1098))))))+(IKabs((((x1100*(new_r00*new_r00*new_r00)))+((new_r00*x1100*(new_r10*new_r10)))+((new_r00*x1100))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
IkReal x1103=((-1.0)*new_r10);
CheckValue<IkReal> x1105 = IKatan2WithCheck(IkReal(0),IkReal(x1103),IKFAST_ATAN2_MAGTHRESH);
if(!x1105.valid){
continue;
}
IkReal x1104=((-1.0)*(x1105.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1104;
new_r11=0;
new_r00=0;
IkReal gconst18=x1104;
IkReal gconst19=0;
IkReal x1106 = new_r10*new_r10;
if(IKabs(x1106)==0){
continue;
}
IkReal gconst20=(x1103*(pow(x1106,-0.5)));
j7eval[0]=new_r01;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1107=IKPowWithIntegerCheck(gconst20,-1);
if(!x1107.valid){
continue;
}
sj7array[0]=((-1.0)*new_r01*(x1107.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1108=IKcos(j7);
IkReal x1109=IKsin(j7);
evalcond[0]=(new_r01*x1108);
evalcond[1]=(gconst20*x1108);
evalcond[2]=((-1.0)*new_r10*x1108);
evalcond[3]=(gconst20+((new_r01*x1109)));
evalcond[4]=(gconst20+((new_r10*x1109)));
evalcond[5]=(((gconst20*x1109))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1110=IKPowWithIntegerCheck(new_r01,-1);
if(!x1110.valid){
continue;
}
sj7array[0]=((-1.0)*gconst20*(x1110.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1111=IKcos(j7);
IkReal x1112=IKsin(j7);
IkReal x1113=(gconst20*x1112);
evalcond[0]=(new_r01*x1111);
evalcond[1]=(gconst20*x1111);
evalcond[2]=((-1.0)*new_r10*x1111);
evalcond[3]=(x1113+new_r01);
evalcond[4]=(gconst20+((new_r10*x1112)));
evalcond[5]=(x1113+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst20;
evalcond[2]=gconst19;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x1114=((-1.0)*new_r10);
CheckValue<IkReal> x1116 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1114),IKFAST_ATAN2_MAGTHRESH);
if(!x1116.valid){
continue;
}
IkReal x1115=((-1.0)*(x1116.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1115;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst18=x1115;
IkReal gconst19=new_r00;
IkReal gconst20=x1114;
j7eval[0]=-1.0;
j7eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs((new_r00*new_r10))));
j7eval[2]=-1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x1117=((-1.0)*new_r10);
CheckValue<IkReal> x1119 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1117),IKFAST_ATAN2_MAGTHRESH);
if(!x1119.valid){
continue;
}
IkReal x1118=((-1.0)*(x1119.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1118;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst18=x1118;
IkReal gconst19=new_r00;
IkReal gconst20=x1117;
j7eval[0]=-1.0;
j7eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs((new_r00*new_r10))));
j7eval[2]=-1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x1120=((-1.0)*new_r10);
CheckValue<IkReal> x1122 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(x1120),IKFAST_ATAN2_MAGTHRESH);
if(!x1122.valid){
continue;
}
IkReal x1121=((-1.0)*(x1122.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1121;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst18=x1121;
IkReal gconst19=new_r00;
IkReal gconst20=x1120;
j7eval[0]=1.0;
j7eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r10*new_r10))))))))+(IKabs((new_r00*new_r10))));
j7eval[2]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1123=((1.0)*gconst20);
CheckValue<IkReal> x1124=IKPowWithIntegerCheck(IKsign((((gconst19*new_r00))+(((-1.0)*new_r10*x1123)))),-1);
if(!x1124.valid){
continue;
}
CheckValue<IkReal> x1125 = IKatan2WithCheck(IkReal(((((-1.0)*(new_r00*new_r00)))+(gconst20*gconst20))),IkReal((((new_r00*new_r10))+(((-1.0)*gconst19*x1123)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1125.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1124.value)))+(x1125.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1126=IKcos(j7);
IkReal x1127=IKsin(j7);
IkReal x1128=(gconst20*x1127);
IkReal x1129=((1.0)*x1126);
IkReal x1130=(gconst19*x1127);
IkReal x1131=(gconst19*x1129);
evalcond[0]=(x1128+(((-1.0)*x1131)));
evalcond[1]=(gconst20+((new_r10*x1127))+((new_r00*x1126)));
evalcond[2]=(x1130+((gconst20*x1126))+new_r00);
evalcond[3]=((((-1.0)*new_r10*x1129))+gconst19+((new_r00*x1127)));
evalcond[4]=((((-1.0)*x1130))+(((-1.0)*gconst20*x1129)));
evalcond[5]=(x1128+(((-1.0)*x1131))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1132 = IKatan2WithCheck(IkReal((gconst19*new_r00)),IkReal((gconst20*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1132.valid){
continue;
}
CheckValue<IkReal> x1133=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst20*gconst20)))+(((-1.0)*(gconst19*gconst19))))),-1);
if(!x1133.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1132.value)+(((1.5707963267949)*(x1133.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1134=IKcos(j7);
IkReal x1135=IKsin(j7);
IkReal x1136=(gconst20*x1135);
IkReal x1137=((1.0)*x1134);
IkReal x1138=(gconst19*x1135);
IkReal x1139=(gconst19*x1137);
evalcond[0]=(x1136+(((-1.0)*x1139)));
evalcond[1]=(gconst20+((new_r00*x1134))+((new_r10*x1135)));
evalcond[2]=(x1138+((gconst20*x1134))+new_r00);
evalcond[3]=(gconst19+(((-1.0)*new_r10*x1137))+((new_r00*x1135)));
evalcond[4]=((((-1.0)*x1138))+(((-1.0)*gconst20*x1137)));
evalcond[5]=(x1136+(((-1.0)*x1139))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1140=IKPowWithIntegerCheck(IKsign((((gconst20*new_r10))+(((-1.0)*gconst19*new_r00)))),-1);
if(!x1140.valid){
continue;
}
CheckValue<IkReal> x1141 = IKatan2WithCheck(IkReal(gconst19*gconst19),IkReal((gconst19*gconst20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1141.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1140.value)))+(x1141.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1142=IKcos(j7);
IkReal x1143=IKsin(j7);
IkReal x1144=(gconst20*x1143);
IkReal x1145=((1.0)*x1142);
IkReal x1146=(gconst19*x1143);
IkReal x1147=(gconst19*x1145);
evalcond[0]=(x1144+(((-1.0)*x1147)));
evalcond[1]=(((new_r00*x1142))+gconst20+((new_r10*x1143)));
evalcond[2]=(x1146+((gconst20*x1142))+new_r00);
evalcond[3]=(((new_r00*x1143))+gconst19+(((-1.0)*new_r10*x1145)));
evalcond[4]=((((-1.0)*gconst20*x1145))+(((-1.0)*x1146)));
evalcond[5]=(x1144+(((-1.0)*x1147))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1148=IKPowWithIntegerCheck(gconst19,-1);
if(!x1148.valid){
continue;
}
sj7array[0]=(new_r11*(x1148.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1149=IKcos(j7);
IkReal x1150=IKsin(j7);
IkReal x1151=((-1.0)*x1149);
evalcond[0]=(new_r00*x1149);
evalcond[1]=(new_r11*x1151);
evalcond[2]=(gconst19*x1151);
evalcond[3]=(gconst19+((new_r00*x1150)));
evalcond[4]=(new_r00+((gconst19*x1150)));
evalcond[5]=(((new_r11*x1150))+(((-1.0)*gconst19)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1153 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1153.valid){
continue;
}
IkReal x1152=((-1.0)*(x1153.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1152;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst18=x1152;
IkReal x1154 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x1154)==0){
continue;
}
IkReal gconst19=(new_r00*(pow(x1154,-0.5)));
IkReal gconst20=0;
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1156 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1156.valid){
continue;
}
IkReal x1155=((-1.0)*(x1156.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1155;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst18=x1155;
IkReal x1157 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x1157)==0){
continue;
}
IkReal gconst19=(new_r00*(pow(x1157,-0.5)));
IkReal gconst20=0;
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
CheckValue<IkReal> x1159 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1159.valid){
continue;
}
IkReal x1158=((-1.0)*(x1159.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1158;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst18=x1158;
IkReal x1160 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x1160)==0){
continue;
}
IkReal gconst19=(new_r00*(pow(x1160,-0.5)));
IkReal gconst20=0;
j7eval[0]=new_r00;
j7eval[1]=new_r01;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1161=IKPowWithIntegerCheck(new_r00,-1);
if(!x1161.valid){
continue;
}
CheckValue<IkReal> x1162=IKPowWithIntegerCheck(new_r01,-1);
if(!x1162.valid){
continue;
}
if( IKabs(((-1.0)*gconst19*(x1161.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst19*(x1162.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst19*(x1161.value)))+IKsqr((gconst19*(x1162.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst19*(x1161.value)), (gconst19*(x1162.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1163=IKsin(j7);
IkReal x1164=IKcos(j7);
IkReal x1165=((1.0)*gconst19);
IkReal x1166=(gconst19*x1163);
evalcond[0]=(new_r01*x1163);
evalcond[1]=(new_r00*x1164);
evalcond[2]=((-1.0)*x1166);
evalcond[3]=((-1.0)*gconst19*x1164);
evalcond[4]=(gconst19+((new_r00*x1163)));
evalcond[5]=(x1166+new_r00);
evalcond[6]=(new_r01+(((-1.0)*x1164*x1165)));
evalcond[7]=(((new_r01*x1164))+(((-1.0)*x1165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1167=IKPowWithIntegerCheck(new_r00,-1);
if(!x1167.valid){
continue;
}
CheckValue<IkReal> x1168=IKPowWithIntegerCheck(gconst19,-1);
if(!x1168.valid){
continue;
}
if( IKabs(((-1.0)*gconst19*(x1167.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x1168.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst19*(x1167.value)))+IKsqr((new_r01*(x1168.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst19*(x1167.value)), (new_r01*(x1168.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1169=IKsin(j7);
IkReal x1170=IKcos(j7);
IkReal x1171=((1.0)*gconst19);
IkReal x1172=(gconst19*x1169);
evalcond[0]=(new_r01*x1169);
evalcond[1]=(new_r00*x1170);
evalcond[2]=((-1.0)*x1172);
evalcond[3]=((-1.0)*gconst19*x1170);
evalcond[4]=(gconst19+((new_r00*x1169)));
evalcond[5]=(x1172+new_r00);
evalcond[6]=((((-1.0)*x1170*x1171))+new_r01);
evalcond[7]=((((-1.0)*x1171))+((new_r01*x1170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1173=IKPowWithIntegerCheck(IKsign(gconst19),-1);
if(!x1173.valid){
continue;
}
CheckValue<IkReal> x1174 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1174.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1173.value)))+(x1174.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1175=IKsin(j7);
IkReal x1176=IKcos(j7);
IkReal x1177=((1.0)*gconst19);
IkReal x1178=(gconst19*x1175);
evalcond[0]=(new_r01*x1175);
evalcond[1]=(new_r00*x1176);
evalcond[2]=((-1.0)*x1178);
evalcond[3]=((-1.0)*gconst19*x1176);
evalcond[4]=(gconst19+((new_r00*x1175)));
evalcond[5]=(x1178+new_r00);
evalcond[6]=((((-1.0)*x1176*x1177))+new_r01);
evalcond[7]=((((-1.0)*x1177))+((new_r01*x1176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r10);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1180 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1180.valid){
continue;
}
IkReal x1179=((-1.0)*(x1180.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1179;
new_r10=0;
IkReal gconst18=x1179;
IkReal x1181 = new_r00*new_r00;
if(IKabs(x1181)==0){
continue;
}
IkReal gconst19=(new_r00*(pow(x1181,-0.5)));
IkReal gconst20=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1183 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1183.valid){
continue;
}
IkReal x1182=((-1.0)*(x1183.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1182;
new_r10=0;
IkReal gconst18=x1182;
IkReal x1184 = new_r00*new_r00;
if(IKabs(x1184)==0){
continue;
}
IkReal gconst19=(new_r00*(pow(x1184,-0.5)));
IkReal gconst20=0;
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1186 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1186.valid){
continue;
}
IkReal x1185=((-1.0)*(x1186.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst19;
cj9=gconst20;
j9=x1185;
new_r10=0;
IkReal gconst18=x1185;
IkReal x1187 = new_r00*new_r00;
if(IKabs(x1187)==0){
continue;
}
IkReal gconst19=(new_r00*(pow(x1187,-0.5)));
IkReal gconst20=0;
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1188=IKPowWithIntegerCheck(new_r00,-1);
if(!x1188.valid){
continue;
}
CheckValue<IkReal> x1189=IKPowWithIntegerCheck(gconst19,-1);
if(!x1189.valid){
continue;
}
if( IKabs(((-1.0)*gconst19*(x1188.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x1189.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst19*(x1188.value)))+IKsqr((new_r01*(x1189.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst19*(x1188.value)), (new_r01*(x1189.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1190=IKcos(j7);
IkReal x1191=IKsin(j7);
IkReal x1192=((1.0)*gconst19);
evalcond[0]=(new_r00*x1190);
evalcond[1]=((-1.0)*gconst19*x1190);
evalcond[2]=(gconst19+((new_r00*x1191)));
evalcond[3]=(((gconst19*x1191))+new_r00);
evalcond[4]=((((-1.0)*x1190*x1192))+new_r01);
evalcond[5]=((((-1.0)*x1191*x1192))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x1190))+((new_r01*x1191)));
evalcond[7]=((((-1.0)*x1192))+((new_r11*x1191))+((new_r01*x1190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1193=IKPowWithIntegerCheck(IKsign(gconst19),-1);
if(!x1193.valid){
continue;
}
CheckValue<IkReal> x1194 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1194.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1193.value)))+(x1194.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1195=IKcos(j7);
IkReal x1196=IKsin(j7);
IkReal x1197=((1.0)*gconst19);
evalcond[0]=(new_r00*x1195);
evalcond[1]=((-1.0)*gconst19*x1195);
evalcond[2]=(gconst19+((new_r00*x1196)));
evalcond[3]=(((gconst19*x1196))+new_r00);
evalcond[4]=((((-1.0)*x1195*x1197))+new_r01);
evalcond[5]=((((-1.0)*x1196*x1197))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x1195))+((new_r01*x1196)));
evalcond[7]=((((-1.0)*x1197))+((new_r11*x1196))+((new_r01*x1195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1198=IKPowWithIntegerCheck(IKsign(gconst19),-1);
if(!x1198.valid){
continue;
}
CheckValue<IkReal> x1199 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1199.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1198.value)))+(x1199.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1200=IKcos(j7);
IkReal x1201=IKsin(j7);
IkReal x1202=((1.0)*gconst19);
evalcond[0]=(new_r00*x1200);
evalcond[1]=((-1.0)*gconst19*x1200);
evalcond[2]=(((new_r00*x1201))+gconst19);
evalcond[3]=(((gconst19*x1201))+new_r00);
evalcond[4]=((((-1.0)*x1200*x1202))+new_r01);
evalcond[5]=((((-1.0)*x1201*x1202))+new_r11);
evalcond[6]=(((new_r01*x1201))+(((-1.0)*new_r11*x1200)));
evalcond[7]=(((new_r11*x1201))+((new_r01*x1200))+(((-1.0)*x1202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1203=((1.0)*gconst20);
CheckValue<IkReal> x1204=IKPowWithIntegerCheck(IKsign((((gconst19*new_r00))+(((-1.0)*new_r10*x1203)))),-1);
if(!x1204.valid){
continue;
}
CheckValue<IkReal> x1205 = IKatan2WithCheck(IkReal(((((-1.0)*(new_r00*new_r00)))+(gconst20*gconst20))),IkReal(((((-1.0)*gconst19*x1203))+((new_r00*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1205.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1204.value)))+(x1205.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1206=IKsin(j7);
IkReal x1207=IKcos(j7);
IkReal x1208=((1.0)*gconst19);
IkReal x1209=(gconst20*x1206);
IkReal x1210=((1.0)*x1207);
IkReal x1211=(x1207*x1208);
evalcond[0]=(((new_r00*x1207))+((new_r10*x1206))+gconst20);
evalcond[1]=(((gconst20*x1207))+((gconst19*x1206))+new_r00);
evalcond[2]=(((new_r00*x1206))+gconst19+(((-1.0)*new_r10*x1210)));
evalcond[3]=(((new_r01*x1206))+gconst20+(((-1.0)*new_r11*x1210)));
evalcond[4]=(x1209+new_r01+(((-1.0)*x1211)));
evalcond[5]=(x1209+new_r10+(((-1.0)*x1211)));
evalcond[6]=(((new_r11*x1206))+((new_r01*x1207))+(((-1.0)*x1208)));
evalcond[7]=((((-1.0)*gconst20*x1210))+new_r11+(((-1.0)*x1206*x1208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1212=((1.0)*gconst19);
CheckValue<IkReal> x1213 = IKatan2WithCheck(IkReal((((new_r00*new_r11))+(gconst20*gconst20))),IkReal((((new_r00*new_r01))+(((-1.0)*gconst20*x1212)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1213.valid){
continue;
}
CheckValue<IkReal> x1214=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst20*new_r01))+(((-1.0)*new_r11*x1212)))),-1);
if(!x1214.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1213.value)+(((1.5707963267949)*(x1214.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1215=IKsin(j7);
IkReal x1216=IKcos(j7);
IkReal x1217=((1.0)*gconst19);
IkReal x1218=(gconst20*x1215);
IkReal x1219=((1.0)*x1216);
IkReal x1220=(x1216*x1217);
evalcond[0]=(((new_r10*x1215))+gconst20+((new_r00*x1216)));
evalcond[1]=(((gconst20*x1216))+((gconst19*x1215))+new_r00);
evalcond[2]=(gconst19+((new_r00*x1215))+(((-1.0)*new_r10*x1219)));
evalcond[3]=(gconst20+((new_r01*x1215))+(((-1.0)*new_r11*x1219)));
evalcond[4]=(x1218+(((-1.0)*x1220))+new_r01);
evalcond[5]=(x1218+(((-1.0)*x1220))+new_r10);
evalcond[6]=(((new_r11*x1215))+((new_r01*x1216))+(((-1.0)*x1217)));
evalcond[7]=((((-1.0)*x1215*x1217))+(((-1.0)*gconst20*x1219))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1221=((1.0)*new_r10);
CheckValue<IkReal> x1222=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r00*new_r01))+(((-1.0)*new_r11*x1221)))),-1);
if(!x1222.valid){
continue;
}
CheckValue<IkReal> x1223 = IKatan2WithCheck(IkReal((((gconst20*new_r00))+((gconst20*new_r11)))),IkReal((((gconst20*new_r01))+(((-1.0)*gconst20*x1221)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1223.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1222.value)))+(x1223.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1224=IKsin(j7);
IkReal x1225=IKcos(j7);
IkReal x1226=((1.0)*gconst19);
IkReal x1227=(gconst20*x1224);
IkReal x1228=((1.0)*x1225);
IkReal x1229=(x1225*x1226);
evalcond[0]=(gconst20+((new_r00*x1225))+((new_r10*x1224)));
evalcond[1]=(((gconst20*x1225))+((gconst19*x1224))+new_r00);
evalcond[2]=(gconst19+((new_r00*x1224))+(((-1.0)*new_r10*x1228)));
evalcond[3]=(gconst20+((new_r01*x1224))+(((-1.0)*new_r11*x1228)));
evalcond[4]=(x1227+(((-1.0)*x1229))+new_r01);
evalcond[5]=(x1227+(((-1.0)*x1229))+new_r10);
evalcond[6]=((((-1.0)*x1226))+((new_r11*x1224))+((new_r01*x1225)));
evalcond[7]=((((-1.0)*x1224*x1226))+(((-1.0)*gconst20*x1228))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1230=((-1.0)*new_r00);
IkReal x1232 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x1232)==0){
continue;
}
IkReal x1231=pow(x1232,-0.5);
CheckValue<IkReal> x1233 = IKatan2WithCheck(IkReal(x1230),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1233.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x1233.value))));
IkReal gconst22=(x1230*x1231);
IkReal gconst23=((1.0)*new_r10*x1231);
CheckValue<IkReal> x1234 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1234.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1234.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x1235=((-1.0)*new_r00);
CheckValue<IkReal> x1238 = IKatan2WithCheck(IkReal(x1235),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1238.valid){
continue;
}
IkReal x1236=((1.0)*(x1238.value));
IkReal x1237=x1231;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1236)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1236)));
IkReal gconst22=(x1235*x1237);
IkReal gconst23=((1.0)*new_r10*x1237);
IkReal x1239=new_r10*new_r10;
IkReal x1240=(new_r10*new_r11);
IkReal x1241=((((-1.0)*x1240))+(((-1.0)*new_r00*new_r01)));
IkReal x1242=x1231;
IkReal x1243=(new_r10*x1242);
j7eval[0]=x1241;
j7eval[1]=((IKabs((((x1240*x1242))+((new_r00*x1243)))))+(IKabs(((((-1.0)*x1239*x1242))+((new_r01*x1243))))));
j7eval[2]=IKsign(x1241);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1244=((-1.0)*new_r00);
CheckValue<IkReal> x1247 = IKatan2WithCheck(IkReal(x1244),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1247.valid){
continue;
}
IkReal x1245=((1.0)*(x1247.value));
IkReal x1246=x1231;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1245)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1245)));
IkReal gconst22=(x1244*x1246);
IkReal gconst23=((1.0)*new_r10*x1246);
IkReal x1248=new_r10*new_r10;
IkReal x1249=new_r00*new_r00*new_r00;
CheckValue<IkReal> x1253=IKPowWithIntegerCheck((x1248+(new_r00*new_r00)),-1);
if(!x1253.valid){
continue;
}
IkReal x1250=x1253.value;
IkReal x1251=(x1248*x1250);
IkReal x1252=(x1249*x1250);
j7eval[0]=((IKabs((x1251+((new_r11*x1252))+((new_r00*new_r11*x1251)))))+(IKabs((((new_r00*new_r10*x1250))+((new_r01*x1252))+((new_r00*new_r01*x1251))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1254=((-1.0)*new_r00);
CheckValue<IkReal> x1257 = IKatan2WithCheck(IkReal(x1254),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1257.valid){
continue;
}
IkReal x1255=((1.0)*(x1257.value));
IkReal x1256=x1231;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1255)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1255)));
IkReal gconst22=(x1254*x1256);
IkReal gconst23=((1.0)*new_r10*x1256);
IkReal x1258=new_r10*new_r10;
IkReal x1259=new_r00*new_r00;
CheckValue<IkReal> x1263=IKPowWithIntegerCheck((x1258+x1259),-1);
if(!x1263.valid){
continue;
}
IkReal x1260=x1263.value;
IkReal x1261=(new_r10*x1260);
IkReal x1262=(x1258*x1260);
j7eval[0]=((IKabs((x1262+(((-1.0)*x1260*(x1259*x1259)))+(((-1.0)*x1259*x1262)))))+(IKabs((((new_r00*x1261))+((x1261*(new_r00*new_r00*new_r00)))+((new_r00*x1261*(new_r10*new_r10)))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1265 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1265.valid){
continue;
}
IkReal x1264=((1.0)*(x1265.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1264)));
new_r11=0;
new_r00=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1264)));
IkReal gconst22=0;
IkReal x1266 = new_r10*new_r10;
if(IKabs(x1266)==0){
continue;
}
IkReal gconst23=((1.0)*new_r10*(pow(x1266,-0.5)));
j7eval[0]=new_r01;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1267=IKPowWithIntegerCheck(gconst23,-1);
if(!x1267.valid){
continue;
}
sj7array[0]=((-1.0)*new_r01*(x1267.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1268=IKcos(j7);
IkReal x1269=IKsin(j7);
evalcond[0]=(new_r01*x1268);
evalcond[1]=(gconst23*x1268);
evalcond[2]=((-1.0)*new_r10*x1268);
evalcond[3]=(((new_r01*x1269))+gconst23);
evalcond[4]=(gconst23+((new_r10*x1269)));
evalcond[5]=(((gconst23*x1269))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1270=IKPowWithIntegerCheck(new_r01,-1);
if(!x1270.valid){
continue;
}
sj7array[0]=((-1.0)*gconst23*(x1270.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1271=IKcos(j7);
IkReal x1272=IKsin(j7);
IkReal x1273=(gconst23*x1272);
evalcond[0]=(new_r01*x1271);
evalcond[1]=(gconst23*x1271);
evalcond[2]=((-1.0)*new_r10*x1271);
evalcond[3]=(x1273+new_r01);
evalcond[4]=(gconst23+((new_r10*x1272)));
evalcond[5]=(x1273+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst23;
evalcond[2]=gconst22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x1274=((-1.0)*new_r00);
CheckValue<IkReal> x1276 = IKatan2WithCheck(IkReal(x1274),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1276.valid){
continue;
}
IkReal x1275=((1.0)*(x1276.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1275)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1275)));
IkReal gconst22=x1274;
IkReal gconst23=((1.0)*new_r10);
j7eval[0]=1.0;
j7eval[1]=1.0;
j7eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs(((1.0)*new_r00*new_r10))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x1277=((-1.0)*new_r00);
CheckValue<IkReal> x1279 = IKatan2WithCheck(IkReal(x1277),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1279.valid){
continue;
}
IkReal x1278=((1.0)*(x1279.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1278)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1278)));
IkReal gconst22=x1277;
IkReal gconst23=((1.0)*new_r10);
j7eval[0]=-1.0;
j7eval[1]=((IKabs(((1.0)*new_r00*new_r10)))+(IKabs(((-1.0)+(new_r10*new_r10)))));
j7eval[2]=-1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x1280=((-1.0)*new_r00);
CheckValue<IkReal> x1282 = IKatan2WithCheck(IkReal(x1280),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1282.valid){
continue;
}
IkReal x1281=((1.0)*(x1282.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1281)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1281)));
IkReal gconst22=x1280;
IkReal gconst23=((1.0)*new_r10);
j7eval[0]=-1.0;
j7eval[1]=((IKabs(((-1.0)+(((2.0)*(new_r10*new_r10))))))+(IKabs(((2.0)*new_r00*new_r10))));
j7eval[2]=-1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1283=((1.0)*gconst23);
CheckValue<IkReal> x1284 = IKatan2WithCheck(IkReal(((gconst23*gconst23)+(((-1.0)*(new_r00*new_r00))))),IkReal((((new_r00*new_r10))+(((-1.0)*gconst22*x1283)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1284.valid){
continue;
}
CheckValue<IkReal> x1285=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x1283))+((gconst22*new_r00)))),-1);
if(!x1285.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1284.value)+(((1.5707963267949)*(x1285.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1286=IKcos(j7);
IkReal x1287=IKsin(j7);
IkReal x1288=(gconst23*x1287);
IkReal x1289=(gconst22*x1287);
IkReal x1290=((1.0)*x1286);
IkReal x1291=(gconst22*x1290);
evalcond[0]=(x1288+(((-1.0)*x1291)));
evalcond[1]=(((new_r10*x1287))+gconst23+((new_r00*x1286)));
evalcond[2]=(x1289+new_r00+((gconst23*x1286)));
evalcond[3]=((((-1.0)*new_r10*x1290))+gconst22+((new_r00*x1287)));
evalcond[4]=((((-1.0)*x1289))+(((-1.0)*gconst23*x1290)));
evalcond[5]=(x1288+(((-1.0)*x1291))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1292=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst22*gconst22)))+(((-1.0)*(gconst23*gconst23))))),-1);
if(!x1292.valid){
continue;
}
CheckValue<IkReal> x1293 = IKatan2WithCheck(IkReal((gconst22*new_r00)),IkReal((gconst23*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1293.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1292.value)))+(x1293.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1294=IKcos(j7);
IkReal x1295=IKsin(j7);
IkReal x1296=(gconst23*x1295);
IkReal x1297=(gconst22*x1295);
IkReal x1298=((1.0)*x1294);
IkReal x1299=(gconst22*x1298);
evalcond[0]=(x1296+(((-1.0)*x1299)));
evalcond[1]=(gconst23+((new_r10*x1295))+((new_r00*x1294)));
evalcond[2]=(x1297+((gconst23*x1294))+new_r00);
evalcond[3]=((((-1.0)*new_r10*x1298))+gconst22+((new_r00*x1295)));
evalcond[4]=((((-1.0)*gconst23*x1298))+(((-1.0)*x1297)));
evalcond[5]=(x1296+(((-1.0)*x1299))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1300=IKPowWithIntegerCheck(IKsign((((gconst23*new_r10))+(((-1.0)*gconst22*new_r00)))),-1);
if(!x1300.valid){
continue;
}
CheckValue<IkReal> x1301 = IKatan2WithCheck(IkReal(gconst22*gconst22),IkReal((gconst22*gconst23)),IKFAST_ATAN2_MAGTHRESH);
if(!x1301.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1300.value)))+(x1301.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1302=IKcos(j7);
IkReal x1303=IKsin(j7);
IkReal x1304=(gconst23*x1303);
IkReal x1305=(gconst22*x1303);
IkReal x1306=((1.0)*x1302);
IkReal x1307=(gconst22*x1306);
evalcond[0]=(x1304+(((-1.0)*x1307)));
evalcond[1]=(gconst23+((new_r10*x1303))+((new_r00*x1302)));
evalcond[2]=(x1305+((gconst23*x1302))+new_r00);
evalcond[3]=((((-1.0)*new_r10*x1306))+gconst22+((new_r00*x1303)));
evalcond[4]=((((-1.0)*x1305))+(((-1.0)*gconst23*x1306)));
evalcond[5]=(x1304+(((-1.0)*x1307))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1308=IKPowWithIntegerCheck(gconst22,-1);
if(!x1308.valid){
continue;
}
sj7array[0]=(new_r11*(x1308.value));
if( sj7array[0] >= -1-IKFAST_SINCOS_THRESH && sj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKasin(sj7array[0]);
    cj7array[0] = IKcos(j7array[0]);
    sj7array[1] = sj7array[0];
    j7array[1] = j7array[0] > 0 ? (IKPI-j7array[0]) : (-IKPI-j7array[0]);
    cj7array[1] = -cj7array[0];
}
else if( isnan(sj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1309=IKcos(j7);
IkReal x1310=IKsin(j7);
IkReal x1311=((-1.0)*x1309);
evalcond[0]=(new_r00*x1309);
evalcond[1]=(new_r11*x1311);
evalcond[2]=(gconst22*x1311);
evalcond[3]=(((new_r00*x1310))+gconst22);
evalcond[4]=(((gconst22*x1310))+new_r00);
evalcond[5]=(((new_r11*x1310))+(((-1.0)*gconst22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
IkReal x1312=((-1.0)*new_r00);
CheckValue<IkReal> x1314 = IKatan2WithCheck(IkReal(x1312),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1314.valid){
continue;
}
IkReal x1313=((1.0)*(x1314.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1313)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1313)));
IkReal x1315 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x1315)==0){
continue;
}
IkReal gconst22=(x1312*(pow(x1315,-0.5)));
IkReal gconst23=0;
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1316=((-1.0)*new_r00);
CheckValue<IkReal> x1318 = IKatan2WithCheck(IkReal(x1316),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1318.valid){
continue;
}
IkReal x1317=((1.0)*(x1318.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1317)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1317)));
IkReal x1319 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x1319)==0){
continue;
}
IkReal gconst22=(x1316*(pow(x1319,-0.5)));
IkReal gconst23=0;
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x1320=((-1.0)*new_r00);
CheckValue<IkReal> x1322 = IKatan2WithCheck(IkReal(x1320),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1322.valid){
continue;
}
IkReal x1321=((1.0)*(x1322.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1321)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1321)));
IkReal x1323 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x1323)==0){
continue;
}
IkReal gconst22=(x1320*(pow(x1323,-0.5)));
IkReal gconst23=0;
j7eval[0]=new_r00;
j7eval[1]=new_r01;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1324=IKPowWithIntegerCheck(new_r00,-1);
if(!x1324.valid){
continue;
}
CheckValue<IkReal> x1325=IKPowWithIntegerCheck(new_r01,-1);
if(!x1325.valid){
continue;
}
if( IKabs(((-1.0)*gconst22*(x1324.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst22*(x1325.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst22*(x1324.value)))+IKsqr((gconst22*(x1325.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst22*(x1324.value)), (gconst22*(x1325.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1326=IKsin(j7);
IkReal x1327=IKcos(j7);
IkReal x1328=((1.0)*gconst22);
IkReal x1329=(gconst22*x1326);
evalcond[0]=(new_r01*x1326);
evalcond[1]=(new_r00*x1327);
evalcond[2]=((-1.0)*x1329);
evalcond[3]=((-1.0)*gconst22*x1327);
evalcond[4]=(((new_r00*x1326))+gconst22);
evalcond[5]=(x1329+new_r00);
evalcond[6]=((((-1.0)*x1327*x1328))+new_r01);
evalcond[7]=(((new_r01*x1327))+(((-1.0)*x1328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1330=IKPowWithIntegerCheck(new_r00,-1);
if(!x1330.valid){
continue;
}
CheckValue<IkReal> x1331=IKPowWithIntegerCheck(gconst22,-1);
if(!x1331.valid){
continue;
}
if( IKabs(((-1.0)*gconst22*(x1330.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x1331.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst22*(x1330.value)))+IKsqr((new_r01*(x1331.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst22*(x1330.value)), (new_r01*(x1331.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1332=IKsin(j7);
IkReal x1333=IKcos(j7);
IkReal x1334=((1.0)*gconst22);
IkReal x1335=(gconst22*x1332);
evalcond[0]=(new_r01*x1332);
evalcond[1]=(new_r00*x1333);
evalcond[2]=((-1.0)*x1335);
evalcond[3]=((-1.0)*gconst22*x1333);
evalcond[4]=(gconst22+((new_r00*x1332)));
evalcond[5]=(x1335+new_r00);
evalcond[6]=((((-1.0)*x1333*x1334))+new_r01);
evalcond[7]=(((new_r01*x1333))+(((-1.0)*x1334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1336=IKPowWithIntegerCheck(IKsign(gconst22),-1);
if(!x1336.valid){
continue;
}
CheckValue<IkReal> x1337 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1337.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1336.value)))+(x1337.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1338=IKsin(j7);
IkReal x1339=IKcos(j7);
IkReal x1340=((1.0)*gconst22);
IkReal x1341=(gconst22*x1338);
evalcond[0]=(new_r01*x1338);
evalcond[1]=(new_r00*x1339);
evalcond[2]=((-1.0)*x1341);
evalcond[3]=((-1.0)*gconst22*x1339);
evalcond[4]=(gconst22+((new_r00*x1338)));
evalcond[5]=(x1341+new_r00);
evalcond[6]=((((-1.0)*x1339*x1340))+new_r01);
evalcond[7]=((((-1.0)*x1340))+((new_r01*x1339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r10);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
IkReal x1342=((-1.0)*new_r00);
CheckValue<IkReal> x1344 = IKatan2WithCheck(IkReal(x1342),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1344.valid){
continue;
}
IkReal x1343=((1.0)*(x1344.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1343)));
new_r10=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1343)));
IkReal x1345 = new_r00*new_r00;
if(IKabs(x1345)==0){
continue;
}
IkReal gconst22=(x1342*(pow(x1345,-0.5)));
IkReal gconst23=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1346=((-1.0)*new_r00);
CheckValue<IkReal> x1348 = IKatan2WithCheck(IkReal(x1346),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1348.valid){
continue;
}
IkReal x1347=((1.0)*(x1348.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1347)));
new_r10=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1347)));
IkReal x1349 = new_r00*new_r00;
if(IKabs(x1349)==0){
continue;
}
IkReal gconst22=(x1346*(pow(x1349,-0.5)));
IkReal gconst23=0;
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1350=((-1.0)*new_r00);
CheckValue<IkReal> x1352 = IKatan2WithCheck(IkReal(x1350),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1352.valid){
continue;
}
IkReal x1351=((1.0)*(x1352.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst22;
cj9=gconst23;
j9=((3.14159265)+(((-1.0)*x1351)));
new_r10=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1351)));
IkReal x1353 = new_r00*new_r00;
if(IKabs(x1353)==0){
continue;
}
IkReal gconst22=(x1350*(pow(x1353,-0.5)));
IkReal gconst23=0;
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1354=IKPowWithIntegerCheck(new_r00,-1);
if(!x1354.valid){
continue;
}
CheckValue<IkReal> x1355=IKPowWithIntegerCheck(gconst22,-1);
if(!x1355.valid){
continue;
}
if( IKabs(((-1.0)*gconst22*(x1354.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x1355.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst22*(x1354.value)))+IKsqr((new_r01*(x1355.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst22*(x1354.value)), (new_r01*(x1355.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1356=IKcos(j7);
IkReal x1357=IKsin(j7);
IkReal x1358=(gconst22*x1357);
IkReal x1359=((1.0)*x1356);
evalcond[0]=(new_r00*x1356);
evalcond[1]=((-1.0)*gconst22*x1356);
evalcond[2]=(gconst22+((new_r00*x1357)));
evalcond[3]=(x1358+new_r00);
evalcond[4]=((((-1.0)*gconst22*x1359))+new_r01);
evalcond[5]=((((-1.0)*x1358))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x1359))+((new_r01*x1357)));
evalcond[7]=(((new_r11*x1357))+((new_r01*x1356))+(((-1.0)*gconst22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1360=IKPowWithIntegerCheck(IKsign(gconst22),-1);
if(!x1360.valid){
continue;
}
CheckValue<IkReal> x1361 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1361.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1360.value)))+(x1361.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1362=IKcos(j7);
IkReal x1363=IKsin(j7);
IkReal x1364=(gconst22*x1363);
IkReal x1365=((1.0)*x1362);
evalcond[0]=(new_r00*x1362);
evalcond[1]=((-1.0)*gconst22*x1362);
evalcond[2]=(gconst22+((new_r00*x1363)));
evalcond[3]=(x1364+new_r00);
evalcond[4]=((((-1.0)*gconst22*x1365))+new_r01);
evalcond[5]=((((-1.0)*x1364))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x1365))+((new_r01*x1363)));
evalcond[7]=((((-1.0)*gconst22))+((new_r01*x1362))+((new_r11*x1363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1366=IKPowWithIntegerCheck(IKsign(gconst22),-1);
if(!x1366.valid){
continue;
}
CheckValue<IkReal> x1367 = IKatan2WithCheck(IkReal(new_r11),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1367.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1366.value)))+(x1367.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1368=IKcos(j7);
IkReal x1369=IKsin(j7);
IkReal x1370=(gconst22*x1369);
IkReal x1371=((1.0)*x1368);
evalcond[0]=(new_r00*x1368);
evalcond[1]=((-1.0)*gconst22*x1368);
evalcond[2]=(gconst22+((new_r00*x1369)));
evalcond[3]=(x1370+new_r00);
evalcond[4]=(new_r01+(((-1.0)*gconst22*x1371)));
evalcond[5]=((((-1.0)*x1370))+new_r11);
evalcond[6]=((((-1.0)*new_r11*x1371))+((new_r01*x1369)));
evalcond[7]=((((-1.0)*gconst22))+((new_r01*x1368))+((new_r11*x1369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1372=((1.0)*gconst23);
CheckValue<IkReal> x1373 = IKatan2WithCheck(IkReal(((gconst23*gconst23)+(((-1.0)*(new_r00*new_r00))))),IkReal((((new_r00*new_r10))+(((-1.0)*gconst22*x1372)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1373.valid){
continue;
}
CheckValue<IkReal> x1374=IKPowWithIntegerCheck(IKsign((((gconst22*new_r00))+(((-1.0)*new_r10*x1372)))),-1);
if(!x1374.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1373.value)+(((1.5707963267949)*(x1374.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1375=IKcos(j7);
IkReal x1376=IKsin(j7);
IkReal x1377=(gconst23*x1376);
IkReal x1378=(gconst22*x1376);
IkReal x1379=((1.0)*x1375);
IkReal x1380=(gconst22*x1379);
evalcond[0]=(gconst23+((new_r10*x1376))+((new_r00*x1375)));
evalcond[1]=(x1378+((gconst23*x1375))+new_r00);
evalcond[2]=(gconst22+((new_r00*x1376))+(((-1.0)*new_r10*x1379)));
evalcond[3]=((((-1.0)*new_r11*x1379))+gconst23+((new_r01*x1376)));
evalcond[4]=((((-1.0)*x1380))+x1377+new_r01);
evalcond[5]=((((-1.0)*x1380))+x1377+new_r10);
evalcond[6]=(((new_r11*x1376))+(((-1.0)*gconst22))+((new_r01*x1375)));
evalcond[7]=((((-1.0)*x1378))+(((-1.0)*gconst23*x1379))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1381=((1.0)*gconst22);
CheckValue<IkReal> x1382=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst23*new_r01))+(((-1.0)*new_r11*x1381)))),-1);
if(!x1382.valid){
continue;
}
CheckValue<IkReal> x1383 = IKatan2WithCheck(IkReal((((new_r00*new_r11))+(gconst23*gconst23))),IkReal((((new_r00*new_r01))+(((-1.0)*gconst23*x1381)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1383.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1382.value)))+(x1383.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1384=IKcos(j7);
IkReal x1385=IKsin(j7);
IkReal x1386=(gconst23*x1385);
IkReal x1387=(gconst22*x1385);
IkReal x1388=((1.0)*x1384);
IkReal x1389=(gconst22*x1388);
evalcond[0]=(((new_r10*x1385))+gconst23+((new_r00*x1384)));
evalcond[1]=(x1387+((gconst23*x1384))+new_r00);
evalcond[2]=(gconst22+(((-1.0)*new_r10*x1388))+((new_r00*x1385)));
evalcond[3]=(gconst23+((new_r01*x1385))+(((-1.0)*new_r11*x1388)));
evalcond[4]=((((-1.0)*x1389))+x1386+new_r01);
evalcond[5]=((((-1.0)*x1389))+x1386+new_r10);
evalcond[6]=(((new_r11*x1385))+((new_r01*x1384))+(((-1.0)*gconst22)));
evalcond[7]=((((-1.0)*gconst23*x1388))+(((-1.0)*x1387))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1390=((1.0)*new_r10);
CheckValue<IkReal> x1391=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r11*x1390))+(((-1.0)*new_r00*new_r01)))),-1);
if(!x1391.valid){
continue;
}
CheckValue<IkReal> x1392 = IKatan2WithCheck(IkReal((((gconst23*new_r11))+((gconst23*new_r00)))),IkReal((((gconst23*new_r01))+(((-1.0)*gconst23*x1390)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1392.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1391.value)))+(x1392.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1393=IKcos(j7);
IkReal x1394=IKsin(j7);
IkReal x1395=(gconst23*x1394);
IkReal x1396=(gconst22*x1394);
IkReal x1397=((1.0)*x1393);
IkReal x1398=(gconst22*x1397);
evalcond[0]=(((new_r10*x1394))+gconst23+((new_r00*x1393)));
evalcond[1]=(x1396+((gconst23*x1393))+new_r00);
evalcond[2]=(gconst22+((new_r00*x1394))+(((-1.0)*new_r10*x1397)));
evalcond[3]=(gconst23+(((-1.0)*new_r11*x1397))+((new_r01*x1394)));
evalcond[4]=(x1395+new_r01+(((-1.0)*x1398)));
evalcond[5]=(x1395+new_r10+(((-1.0)*x1398)));
evalcond[6]=(((new_r11*x1394))+((new_r01*x1393))+(((-1.0)*gconst22)));
evalcond[7]=((((-1.0)*gconst23*x1397))+(((-1.0)*x1396))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r00), new_r01);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1399=IKsin(j7);
IkReal x1400=IKcos(j7);
IkReal x1401=((1.0)*x1400);
evalcond[0]=(x1399+new_r00);
evalcond[1]=((((-1.0)*x1401))+new_r01);
evalcond[2]=((((-1.0)*x1399))+new_r11);
evalcond[3]=((((-1.0)*x1401))+new_r10);
evalcond[4]=(((new_r10*x1399))+((new_r00*x1400)));
evalcond[5]=(((new_r01*x1399))+(((-1.0)*new_r11*x1401)));
evalcond[6]=((-1.0)+((new_r11*x1399))+((new_r01*x1400)));
evalcond[7]=((1.0)+((new_r00*x1399))+(((-1.0)*new_r10*x1401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r11), ((-1.0)*new_r01));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1402=IKcos(j7);
IkReal x1403=IKsin(j7);
IkReal x1404=((1.0)*x1402);
evalcond[0]=(x1402+new_r01);
evalcond[1]=(x1403+new_r11);
evalcond[2]=(x1402+new_r10);
evalcond[3]=((((-1.0)*x1403))+new_r00);
evalcond[4]=(((new_r10*x1403))+((new_r00*x1402)));
evalcond[5]=(((new_r01*x1403))+(((-1.0)*new_r11*x1404)));
evalcond[6]=((1.0)+((new_r01*x1402))+((new_r11*x1403)));
evalcond[7]=((-1.0)+((new_r00*x1403))+(((-1.0)*new_r10*x1404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r11=0;
new_r00=0;
j7eval[0]=new_r10;
j7eval[1]=((IKabs(cj9))+(IKabs(sj9)));
j7eval[2]=IKsign(new_r10);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r11=0;
new_r00=0;
j7eval[0]=new_r01;
j7eval[1]=((IKabs(cj9))+(IKabs(sj9)));
j7eval[2]=IKsign(new_r01);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r11=0;
new_r00=0;
j7eval[0]=new_r01;
j7eval[1]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1405=IKPowWithIntegerCheck(new_r01,-1);
if(!x1405.valid){
continue;
}
CheckValue<IkReal> x1406=IKPowWithIntegerCheck(new_r10,-1);
if(!x1406.valid){
continue;
}
if( IKabs(((-1.0)*cj9*(x1405.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj9*(x1406.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj9*(x1405.value)))+IKsqr((sj9*(x1406.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*cj9*(x1405.value)), (sj9*(x1406.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x1407=IKsin(j7);
IkReal x1408=IKcos(j7);
IkReal x1409=(cj9*x1407);
IkReal x1410=((1.0)*x1408);
IkReal x1411=(sj9*x1410);
evalcond[0]=(cj9+((new_r01*x1407)));
evalcond[1]=(cj9+((new_r10*x1407)));
evalcond[2]=((((-1.0)*new_r10*x1410))+sj9);
evalcond[3]=((((-1.0)*sj9))+((new_r01*x1408)));
evalcond[4]=(((sj9*x1407))+((cj9*x1408)));
evalcond[5]=((((-1.0)*x1411))+x1409+new_r01);
evalcond[6]=((((-1.0)*x1411))+x1409+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1412=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x1412.valid){
continue;
}
CheckValue<IkReal> x1413 = IKatan2WithCheck(IkReal(((-1.0)*cj9)),IkReal(sj9),IKFAST_ATAN2_MAGTHRESH);
if(!x1413.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1412.value)))+(x1413.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x1414=IKsin(j7);
IkReal x1415=IKcos(j7);
IkReal x1416=(cj9*x1414);
IkReal x1417=((1.0)*x1415);
IkReal x1418=(sj9*x1417);
evalcond[0]=(cj9+((new_r01*x1414)));
evalcond[1]=(cj9+((new_r10*x1414)));
evalcond[2]=((((-1.0)*new_r10*x1417))+sj9);
evalcond[3]=((((-1.0)*sj9))+((new_r01*x1415)));
evalcond[4]=(((sj9*x1414))+((cj9*x1415)));
evalcond[5]=((((-1.0)*x1418))+x1416+new_r01);
evalcond[6]=((((-1.0)*x1418))+x1416+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1419=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x1419.valid){
continue;
}
CheckValue<IkReal> x1420 = IKatan2WithCheck(IkReal(((-1.0)*cj9)),IkReal(sj9),IKFAST_ATAN2_MAGTHRESH);
if(!x1420.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1419.value)))+(x1420.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x1421=IKsin(j7);
IkReal x1422=IKcos(j7);
IkReal x1423=(cj9*x1421);
IkReal x1424=((1.0)*x1422);
IkReal x1425=(sj9*x1424);
evalcond[0]=(cj9+((new_r01*x1421)));
evalcond[1]=(cj9+((new_r10*x1421)));
evalcond[2]=(sj9+(((-1.0)*new_r10*x1424)));
evalcond[3]=((((-1.0)*sj9))+((new_r01*x1422)));
evalcond[4]=(((cj9*x1422))+((sj9*x1421)));
evalcond[5]=(x1423+new_r01+(((-1.0)*x1425)));
evalcond[6]=(x1423+new_r10+(((-1.0)*x1425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1427 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1427.valid){
continue;
}
IkReal x1426=x1427.value;
j7array[0]=((-1.0)*x1426);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1426)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r10*(IKcos(j7))))+((new_r00*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1429 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1429.valid){
continue;
}
IkReal x1428=x1429.value;
j7array[0]=((-1.0)*x1428);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1428)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r11*(IKcos(j7))))+((new_r01*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r01=0;
new_r10=0;
j7eval[0]=new_r00;
j7eval[1]=((IKabs(cj9))+(IKabs(sj9)));
j7eval[2]=IKsign(new_r00);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r01=0;
new_r10=0;
j7eval[0]=new_r00;
j7eval[1]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1430=IKPowWithIntegerCheck(new_r00,-1);
if(!x1430.valid){
continue;
}
CheckValue<IkReal> x1431=IKPowWithIntegerCheck(new_r11,-1);
if(!x1431.valid){
continue;
}
if( IKabs(((-1.0)*sj9*(x1430.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj9*(x1431.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj9*(x1430.value)))+IKsqr((cj9*(x1431.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*sj9*(x1430.value)), (cj9*(x1431.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x1432=IKcos(j7);
IkReal x1433=IKsin(j7);
IkReal x1434=((1.0)*sj9);
IkReal x1435=(sj9*x1433);
IkReal x1436=(cj9*x1432);
evalcond[0]=(sj9+((new_r00*x1433)));
evalcond[1]=(cj9+((new_r00*x1432)));
evalcond[2]=(cj9+(((-1.0)*new_r11*x1432)));
evalcond[3]=(((new_r11*x1433))+(((-1.0)*x1434)));
evalcond[4]=((((-1.0)*x1432*x1434))+((cj9*x1433)));
evalcond[5]=(x1436+x1435+new_r00);
evalcond[6]=((((-1.0)*x1436))+new_r11+(((-1.0)*x1433*x1434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1437 = IKatan2WithCheck(IkReal(((-1.0)*sj9)),IkReal(((-1.0)*cj9)),IKFAST_ATAN2_MAGTHRESH);
if(!x1437.valid){
continue;
}
CheckValue<IkReal> x1438=IKPowWithIntegerCheck(IKsign(new_r00),-1);
if(!x1438.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1437.value)+(((1.5707963267949)*(x1438.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x1439=IKcos(j7);
IkReal x1440=IKsin(j7);
IkReal x1441=((1.0)*sj9);
IkReal x1442=(sj9*x1440);
IkReal x1443=(cj9*x1439);
evalcond[0]=(sj9+((new_r00*x1440)));
evalcond[1]=(cj9+((new_r00*x1439)));
evalcond[2]=(cj9+(((-1.0)*new_r11*x1439)));
evalcond[3]=(((new_r11*x1440))+(((-1.0)*x1441)));
evalcond[4]=(((cj9*x1440))+(((-1.0)*x1439*x1441)));
evalcond[5]=(x1443+x1442+new_r00);
evalcond[6]=((((-1.0)*x1443))+new_r11+(((-1.0)*x1440*x1441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1444=((1.0)*new_r00);
CheckValue<IkReal> x1445 = IKatan2WithCheck(IkReal(((((-1.0)*(cj9*cj9)))+(new_r00*new_r00))),IkReal((((cj9*sj9))+(((-1.0)*new_r10*x1444)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1445.valid){
continue;
}
CheckValue<IkReal> x1446=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj9*x1444))+((cj9*new_r10)))),-1);
if(!x1446.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1445.value)+(((1.5707963267949)*(x1446.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1447=IKsin(j7);
IkReal x1448=IKcos(j7);
IkReal x1449=(cj9*x1447);
IkReal x1450=(sj9*x1447);
IkReal x1451=(cj9*x1448);
IkReal x1452=((1.0)*x1448);
IkReal x1453=(sj9*x1452);
evalcond[0]=(((new_r10*x1447))+cj9+((new_r00*x1448)));
evalcond[1]=(x1450+x1451+new_r00);
evalcond[2]=((((-1.0)*new_r10*x1452))+sj9+((new_r00*x1447)));
evalcond[3]=(cj9+((new_r01*x1447))+(((-1.0)*new_r11*x1452)));
evalcond[4]=((((-1.0)*x1453))+x1449+new_r01);
evalcond[5]=((((-1.0)*x1453))+x1449+new_r10);
evalcond[6]=((((-1.0)*sj9))+((new_r11*x1447))+((new_r01*x1448)));
evalcond[7]=((((-1.0)*x1451))+(((-1.0)*x1450))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1454=((1.0)*new_r10);
CheckValue<IkReal> x1455 = IKatan2WithCheck(IkReal((((cj9*sj9))+((new_r00*new_r01)))),IkReal(((cj9*cj9)+(((-1.0)*new_r01*x1454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1455.valid){
continue;
}
CheckValue<IkReal> x1456=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj9*new_r00))+(((-1.0)*sj9*x1454)))),-1);
if(!x1456.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1455.value)+(((1.5707963267949)*(x1456.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1457=IKsin(j7);
IkReal x1458=IKcos(j7);
IkReal x1459=(cj9*x1457);
IkReal x1460=(sj9*x1457);
IkReal x1461=(cj9*x1458);
IkReal x1462=((1.0)*x1458);
IkReal x1463=(sj9*x1462);
evalcond[0]=(cj9+((new_r00*x1458))+((new_r10*x1457)));
evalcond[1]=(x1461+x1460+new_r00);
evalcond[2]=((((-1.0)*new_r10*x1462))+sj9+((new_r00*x1457)));
evalcond[3]=(cj9+((new_r01*x1457))+(((-1.0)*new_r11*x1462)));
evalcond[4]=((((-1.0)*x1463))+x1459+new_r01);
evalcond[5]=((((-1.0)*x1463))+x1459+new_r10);
evalcond[6]=((((-1.0)*sj9))+((new_r01*x1458))+((new_r11*x1457)));
evalcond[7]=(new_r11+(((-1.0)*x1461))+(((-1.0)*x1460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1464=((1.0)*new_r10);
CheckValue<IkReal> x1465 = IKatan2WithCheck(IkReal((((cj9*new_r00))+((cj9*new_r11)))),IkReal(((((-1.0)*cj9*x1464))+((cj9*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1465.valid){
continue;
}
CheckValue<IkReal> x1466=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r00*new_r01))+(((-1.0)*new_r11*x1464)))),-1);
if(!x1466.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1465.value)+(((1.5707963267949)*(x1466.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1467=IKsin(j7);
IkReal x1468=IKcos(j7);
IkReal x1469=(cj9*x1467);
IkReal x1470=(sj9*x1467);
IkReal x1471=(cj9*x1468);
IkReal x1472=((1.0)*x1468);
IkReal x1473=(sj9*x1472);
evalcond[0]=(((new_r00*x1468))+cj9+((new_r10*x1467)));
evalcond[1]=(x1470+x1471+new_r00);
evalcond[2]=(((new_r00*x1467))+sj9+(((-1.0)*new_r10*x1472)));
evalcond[3]=(((new_r01*x1467))+cj9+(((-1.0)*new_r11*x1472)));
evalcond[4]=(x1469+(((-1.0)*x1473))+new_r01);
evalcond[5]=(x1469+(((-1.0)*x1473))+new_r10);
evalcond[6]=((((-1.0)*sj9))+((new_r01*x1468))+((new_r11*x1467)));
evalcond[7]=((((-1.0)*x1471))+(((-1.0)*x1470))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j7eval[0]=((IKabs((new_r11*new_r22)))+(IKabs((new_r01*new_r22))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1475 = IKatan2WithCheck(IkReal((new_r01*new_r22)),IkReal((new_r11*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1475.valid){
continue;
}
IkReal x1474=x1475.value;
j7array[0]=((-1.0)*x1474);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1474)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1476=IKcos(j7);
IkReal x1477=IKsin(j7);
IkReal x1478=(new_r10*x1477);
IkReal x1479=((1.0)*x1476);
IkReal x1480=(new_r00*x1476);
evalcond[0]=(((new_r11*x1477))+((new_r01*x1476)));
evalcond[1]=(x1478+x1480);
evalcond[2]=(((new_r00*x1477))+(((-1.0)*new_r10*x1479)));
evalcond[3]=((((-1.0)*new_r11*x1479))+((new_r01*x1477)));
evalcond[4]=(((new_r22*x1480))+((new_r22*x1478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1482 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1482.valid){
continue;
}
IkReal x1481=x1482.value;
j7array[0]=((-1.0)*x1481);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1481)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1483=IKsin(j7);
IkReal x1484=IKcos(j7);
IkReal x1485=(new_r22*x1483);
IkReal x1486=((1.0)*x1484);
IkReal x1487=(new_r22*x1484);
evalcond[0]=(((new_r11*x1483))+((new_r01*x1484)));
evalcond[1]=((((-1.0)*new_r10*x1486))+((new_r00*x1483)));
evalcond[2]=((((-1.0)*new_r11*x1486))+((new_r01*x1483)));
evalcond[3]=(((new_r11*x1485))+((new_r01*x1487)));
evalcond[4]=(((new_r00*x1487))+((new_r10*x1485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1489 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1489.valid){
continue;
}
IkReal x1488=x1489.value;
j7array[0]=((-1.0)*x1488);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1488)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1490=IKsin(j7);
IkReal x1491=IKcos(j7);
IkReal x1492=(new_r10*x1490);
IkReal x1493=((1.0)*x1491);
IkReal x1494=(new_r00*x1491);
evalcond[0]=(x1492+x1494);
evalcond[1]=((((-1.0)*new_r10*x1493))+((new_r00*x1490)));
evalcond[2]=(((new_r01*x1490))+(((-1.0)*new_r11*x1493)));
evalcond[3]=(((new_r01*new_r22*x1491))+((new_r11*new_r22*x1490)));
evalcond[4]=(((new_r22*x1494))+((new_r22*x1492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1496=IKPowWithIntegerCheck(sj8,-1);
if(!x1496.valid){
continue;
}
IkReal x1495=x1496.value;
CheckValue<IkReal> x1497=IKPowWithIntegerCheck(new_r12,-1);
if(!x1497.valid){
continue;
}
if( IKabs((x1495*(x1497.value)*(((-1.0)+(new_r02*new_r02)+(cj8*cj8))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x1495)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1495*(x1497.value)*(((-1.0)+(new_r02*new_r02)+(cj8*cj8)))))+IKsqr(((-1.0)*new_r02*x1495))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x1495*(x1497.value)*(((-1.0)+(new_r02*new_r02)+(cj8*cj8)))), ((-1.0)*new_r02*x1495));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[18];
IkReal x1498=IKcos(j7);
IkReal x1499=IKsin(j7);
IkReal x1500=(cj8*sj9);
IkReal x1501=((1.0)*new_r10);
IkReal x1502=((1.0)*cj9);
IkReal x1503=((1.0)*sj8);
IkReal x1504=(new_r12*x1499);
IkReal x1505=(sj8*x1499);
IkReal x1506=(new_r02*x1498);
IkReal x1507=((1.0)*x1498);
IkReal x1508=(new_r11*x1499);
IkReal x1509=(new_r10*x1499);
IkReal x1510=(cj8*x1498);
evalcond[0]=(((sj8*x1498))+new_r02);
evalcond[1]=(x1505+new_r12);
evalcond[2]=((((-1.0)*new_r02*x1499))+((new_r12*x1498)));
evalcond[3]=(sj8+x1506+x1504);
evalcond[4]=((((-1.0)*x1498*x1501))+sj9+((new_r00*x1499)));
evalcond[5]=((((-1.0)*new_r11*x1507))+cj9+((new_r01*x1499)));
evalcond[6]=(((x1498*x1500))+((cj9*x1499))+new_r01);
evalcond[7]=(((new_r01*x1498))+x1500+x1508);
evalcond[8]=(new_r00+((sj9*x1499))+(((-1.0)*x1502*x1510)));
evalcond[9]=(((x1499*x1500))+(((-1.0)*x1498*x1502))+new_r11);
evalcond[10]=(((new_r00*x1498))+x1509+(((-1.0)*cj8*x1502)));
evalcond[11]=((((-1.0)*sj9*x1507))+(((-1.0)*cj8*x1499*x1502))+new_r10);
evalcond[12]=(((cj8*x1504))+((cj8*x1506))+((new_r22*sj8)));
evalcond[13]=(sj9+((cj8*x1508))+((new_r01*x1510))+((new_r21*sj8)));
evalcond[14]=(((cj8*new_r20))+(((-1.0)*new_r00*x1498*x1503))+(((-1.0)*x1501*x1505)));
evalcond[15]=(((cj8*new_r21))+(((-1.0)*new_r01*x1498*x1503))+(((-1.0)*x1503*x1508)));
evalcond[16]=((-1.0)+((cj8*new_r22))+(((-1.0)*x1503*x1506))+(((-1.0)*x1503*x1504)));
evalcond[17]=((((-1.0)*x1502))+((new_r20*sj8))+((cj8*x1509))+((new_r00*x1510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1511=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x1511.valid){
continue;
}
CheckValue<IkReal> x1512 = IKatan2WithCheck(IkReal(((-1.0)*new_r12)),IkReal(((-1.0)*new_r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x1512.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1511.value)))+(x1512.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[18];
IkReal x1513=IKcos(j7);
IkReal x1514=IKsin(j7);
IkReal x1515=(cj8*sj9);
IkReal x1516=((1.0)*new_r10);
IkReal x1517=((1.0)*cj9);
IkReal x1518=((1.0)*sj8);
IkReal x1519=(new_r12*x1514);
IkReal x1520=(sj8*x1514);
IkReal x1521=(new_r02*x1513);
IkReal x1522=((1.0)*x1513);
IkReal x1523=(new_r11*x1514);
IkReal x1524=(new_r10*x1514);
IkReal x1525=(cj8*x1513);
evalcond[0]=(((sj8*x1513))+new_r02);
evalcond[1]=(x1520+new_r12);
evalcond[2]=((((-1.0)*new_r02*x1514))+((new_r12*x1513)));
evalcond[3]=(sj8+x1521+x1519);
evalcond[4]=(sj9+(((-1.0)*x1513*x1516))+((new_r00*x1514)));
evalcond[5]=((((-1.0)*new_r11*x1522))+cj9+((new_r01*x1514)));
evalcond[6]=(((x1513*x1515))+((cj9*x1514))+new_r01);
evalcond[7]=(x1523+x1515+((new_r01*x1513)));
evalcond[8]=(((sj9*x1514))+(((-1.0)*x1517*x1525))+new_r00);
evalcond[9]=(((x1514*x1515))+(((-1.0)*x1513*x1517))+new_r11);
evalcond[10]=(((new_r00*x1513))+x1524+(((-1.0)*cj8*x1517)));
evalcond[11]=((((-1.0)*sj9*x1522))+new_r10+(((-1.0)*cj8*x1514*x1517)));
evalcond[12]=(((cj8*x1519))+((cj8*x1521))+((new_r22*sj8)));
evalcond[13]=(sj9+((cj8*x1523))+((new_r01*x1525))+((new_r21*sj8)));
evalcond[14]=(((cj8*new_r20))+(((-1.0)*new_r00*x1513*x1518))+(((-1.0)*x1516*x1520)));
evalcond[15]=(((cj8*new_r21))+(((-1.0)*x1518*x1523))+(((-1.0)*new_r01*x1513*x1518)));
evalcond[16]=((-1.0)+((cj8*new_r22))+(((-1.0)*x1518*x1521))+(((-1.0)*x1518*x1519)));
evalcond[17]=((((-1.0)*x1517))+((new_r20*sj8))+((cj8*x1524))+((new_r00*x1525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - a5 (2b280726c8cebbdb14627cb6c178883b)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
